// generated by Fast Light User Interface Designer (fluid) version 1.0302

#ifndef MeshToolsUI_h
#define MeshToolsUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Menu_Button.H>
#include "MeshTools.h"
#include "SpecialSlider2.h"
#include "SpecialRoller4.h"
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Check_Browser.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Text_Buffer.H>
#include <FL/Fl_Chart.H>
#include <FL/Fl_Browser.H>

class MeshToolsUI {
public:
  MeshToolsUI();
private:
  Fl_Double_Window *mainWindow;
  inline void cb_mainWindow_i(Fl_Double_Window*, void*);
  static void cb_mainWindow(Fl_Double_Window*, void*);
public:
  Fl_Group *Top;
  Fl_Group *Unresizable;
  Fl_Button *Del;
private:
  inline void cb_Del_i(Fl_Button*, void*);
  static void cb_Del(Fl_Button*, void*);
public:
  Fl_Menu_Button *File;
  static Fl_Menu_Item menu_File[];
  static Fl_Menu_Item *Generic_Open_Surface;
private:
  inline void cb_Generic_Open_Surface_i(Fl_Menu_*, void*);
  static void cb_Generic_Open_Surface(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Surface;
  static Fl_Menu_Item *Save_PLY;
private:
  inline void cb_Save_PLY_i(Fl_Menu_*, void*);
  static void cb_Save_PLY(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_STL;
private:
  inline void cb_Save_STL_i(Fl_Menu_*, void*);
  static void cb_Save_STL(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_VTK;
private:
  inline void cb_Save_VTK_i(Fl_Menu_*, void*);
  static void cb_Save_VTK(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_OBJ;
private:
  inline void cb_Save_OBJ_i(Fl_Menu_*, void*);
  static void cb_Save_OBJ(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Position_submenu;
  static Fl_Menu_Item *Load_POS;
private:
  inline void cb_Load_POS_i(Fl_Menu_*, void*);
  static void cb_Load_POS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_POS_Inv;
private:
  inline void cb_Load_POS_Inv_i(Fl_Menu_*, void*);
  static void cb_Load_POS_Inv(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_POS;
private:
  inline void cb_Save_POS_i(Fl_Menu_*, void*);
  static void cb_Save_POS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Project_submenu;
  static Fl_Menu_Item *Open_NTW;
private:
  inline void cb_Open_NTW_i(Fl_Menu_*, void*);
  static void cb_Open_NTW(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_NTW;
private:
  inline void cb_Save_NTW_i(Fl_Menu_*, void*);
  static void cb_Save_NTW(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Landmarks_submenu;
  static Fl_Menu_Item *Open_VER;
private:
  inline void cb_Open_VER_i(Fl_Menu_*, void*);
  static void cb_Open_VER(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Open_VER1;
private:
  inline void cb_Open_VER1_i(Fl_Menu_*, void*);
  static void cb_Open_VER1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_VER;
private:
  inline void cb_Save_VER_i(Fl_Menu_*, void*);
  static void cb_Save_VER(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_VER1;
private:
  inline void cb_Save_VER1_i(Fl_Menu_*, void*);
  static void cb_Save_VER1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Open_VER2;
private:
  inline void cb_Open_VER2_i(Fl_Menu_*, void*);
  static void cb_Open_VER2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_VER3;
private:
  inline void cb_Save_VER3_i(Fl_Menu_*, void*);
  static void cb_Save_VER3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Curves_submenu;
  static Fl_Menu_Item *Open_CUR;
private:
  inline void cb_Open_CUR_i(Fl_Menu_*, void*);
  static void cb_Open_CUR(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_CUR;
private:
  inline void cb_Save_CUR_i(Fl_Menu_*, void*);
  static void cb_Save_CUR(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_CURLMK;
private:
  inline void cb_Save_CURLMK_i(Fl_Menu_*, void*);
  static void cb_Save_CURLMK(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Curve_Infos;
private:
  inline void cb_Save_Curve_Infos_i(Fl_Menu_*, void*);
  static void cb_Save_Curve_Infos(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Tags_submenu;
  static Fl_Menu_Item *Open_TAG;
private:
  inline void cb_Open_TAG_i(Fl_Menu_*, void*);
  static void cb_Open_TAG(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_TAG;
private:
  inline void cb_Save_TAG_i(Fl_Menu_*, void*);
  static void cb_Save_TAG(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Open_FLG;
private:
  inline void cb_Open_FLG_i(Fl_Menu_*, void*);
  static void cb_Open_FLG(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_FLG;
private:
  inline void cb_Save_FLG_i(Fl_Menu_*, void*);
  static void cb_Save_FLG(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Infos;
private:
  inline void cb_Save_Infos_i(Fl_Menu_*, void*);
  static void cb_Save_Infos(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Orientation_submenu;
  static Fl_Menu_Item *Open_ORI;
private:
  inline void cb_Open_ORI_i(Fl_Menu_*, void*);
  static void cb_Open_ORI(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_ORI;
private:
  inline void cb_Save_ORI_i(Fl_Menu_*, void*);
  static void cb_Save_ORI(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *Viewing_options;
  static Fl_Menu_Item menu_Viewing_options[];
  static Fl_Menu_Item *SET_GENERAL_COLOUR_LIGHTNING;
private:
  inline void cb_SET_GENERAL_COLOUR_LIGHTNING_i(Fl_Menu_*, void*);
  static void cb_SET_GENERAL_COLOUR_LIGHTNING(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SET_GENERAL_RENDERING;
private:
  inline void cb_SET_GENERAL_RENDERING_i(Fl_Menu_*, void*);
  static void cb_SET_GENERAL_RENDERING(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Camera_submenu;
  static Fl_Menu_Item *SET_CAMERA_OPT;
private:
  inline void cb_SET_CAMERA_OPT_i(Fl_Menu_*, void*);
  static void cb_SET_CAMERA_OPT(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Camera_center;
  static Fl_Menu_Item *CAP0;
private:
  inline void cb_CAP0_i(Fl_Menu_*, void*);
  static void cb_CAP0(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAPBAR;
private:
  inline void cb_CAPBAR_i(Fl_Menu_*, void*);
  static void cb_CAPBAR(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP1;
private:
  inline void cb_CAP1_i(Fl_Menu_*, void*);
  static void cb_CAP1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP2;
private:
  inline void cb_CAP2_i(Fl_Menu_*, void*);
  static void cb_CAP2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP3;
private:
  inline void cb_CAP3_i(Fl_Menu_*, void*);
  static void cb_CAP3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP4;
private:
  inline void cb_CAP4_i(Fl_Menu_*, void*);
  static void cb_CAP4(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP5;
private:
  inline void cb_CAP5_i(Fl_Menu_*, void*);
  static void cb_CAP5(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP6;
private:
  inline void cb_CAP6_i(Fl_Menu_*, void*);
  static void cb_CAP6(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP7;
private:
  inline void cb_CAP7_i(Fl_Menu_*, void*);
  static void cb_CAP7(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP8;
private:
  inline void cb_CAP8_i(Fl_Menu_*, void*);
  static void cb_CAP8(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP9;
private:
  inline void cb_CAP9_i(Fl_Menu_*, void*);
  static void cb_CAP9(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAP10;
private:
  inline void cb_CAP10_i(Fl_Menu_*, void*);
  static void cb_CAP10(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_100PX_IN_MM;
private:
  inline void cb_DISP_100PX_IN_MM_i(Fl_Menu_*, void*);
  static void cb_DISP_100PX_IN_MM(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *RESET_CAMERA;
private:
  inline void cb_RESET_CAMERA_i(Fl_Menu_*, void*);
  static void cb_RESET_CAMERA(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *CAMERA_PARAMS;
private:
  inline void cb_CAMERA_PARAMS_i(Fl_Menu_*, void*);
  static void cb_CAMERA_PARAMS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Display_Options;
  static Fl_Menu_Item *DISP_SURFACE;
private:
  inline void cb_DISP_SURFACE_i(Fl_Menu_*, void*);
  static void cb_DISP_SURFACE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_WIREFRAME;
private:
  inline void cb_DISP_WIREFRAME_i(Fl_Menu_*, void*);
  static void cb_DISP_WIREFRAME(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_SORT;
private:
  inline void cb_DISP_SORT_i(Fl_Menu_*, void*);
  static void cb_DISP_SORT(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_SORT2;
private:
  inline void cb_DISP_SORT2_i(Fl_Menu_*, void*);
  static void cb_DISP_SORT2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_FLAT;
private:
  inline void cb_DISP_FLAT_i(Fl_Menu_*, void*);
  static void cb_DISP_FLAT(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_TRI_GOU;
private:
  inline void cb_DISP_TRI_GOU_i(Fl_Menu_*, void*);
  static void cb_DISP_TRI_GOU(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_CULLFACE;
private:
  inline void cb_DISP_CULLFACE_i(Fl_Menu_*, void*);
  static void cb_DISP_CULLFACE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_GRID_SIZE;
private:
  inline void cb_DISP_GRID_SIZE_i(Fl_Menu_*, void*);
  static void cb_DISP_GRID_SIZE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SET_GENERAL_LANDMARK_RENDERING;
private:
  inline void cb_SET_GENERAL_LANDMARK_RENDERING_i(Fl_Menu_*, void*);
  static void cb_SET_GENERAL_LANDMARK_RENDERING(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_LANDMARKNUM;
private:
  inline void cb_DISP_LANDMARKNUM_i(Fl_Menu_*, void*);
  static void cb_DISP_LANDMARKNUM(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_CURVE;
private:
  inline void cb_DISP_CURVE_i(Fl_Menu_*, void*);
  static void cb_DISP_CURVE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DISP_ORIENTATION;
private:
  inline void cb_DISP_ORIENTATION_i(Fl_Menu_*, void*);
  static void cb_DISP_ORIENTATION(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *VBO_ACTIVATED;
private:
  inline void cb_VBO_ACTIVATED_i(Fl_Menu_*, void*);
  static void cb_VBO_ACTIVATED(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *Edit_obj;
  static Fl_Menu_Item menu_Edit_obj[];
  static Fl_Menu_Item *Object_structure_modification;
  static Fl_Menu_Item *INVERT;
private:
  inline void cb_INVERT_i(Fl_Menu_*, void*);
  static void cb_INVERT(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MIRROR_ThroughY;
private:
  inline void cb_MIRROR_ThroughY_i(Fl_Menu_*, void*);
  static void cb_MIRROR_ThroughY(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DECOMPOSE_REGIONS;
private:
  inline void cb_DECOMPOSE_REGIONS_i(Fl_Menu_*, void*);
  static void cb_DECOMPOSE_REGIONS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *KEEP_LARGEST_REGION;
private:
  inline void cb_KEEP_LARGEST_REGION_i(Fl_Menu_*, void*);
  static void cb_KEEP_LARGEST_REGION(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ACT_TOOL;
private:
  inline void cb_ACT_TOOL_i(Fl_Menu_*, void*);
  static void cb_ACT_TOOL(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SMOOTH;
private:
  inline void cb_SMOOTH_i(Fl_Menu_*, void*);
  static void cb_SMOOTH(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DEF_WINDOW;
private:
  inline void cb_DEF_WINDOW_i(Fl_Menu_*, void*);
  static void cb_DEF_WINDOW(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DECIMATE;
private:
  inline void cb_DECIMATE_i(Fl_Menu_*, void*);
  static void cb_DECIMATE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *DENSIFY;
private:
  inline void cb_DENSIFY_i(Fl_Menu_*, void*);
  static void cb_DENSIFY(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *FILL_HOLES;
private:
  inline void cb_FILL_HOLES_i(Fl_Menu_*, void*);
  static void cb_FILL_HOLES(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *REGISTRATION_ICP;
private:
  inline void cb_REGISTRATION_ICP_i(Fl_Menu_*, void*);
  static void cb_REGISTRATION_ICP(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Change_object_rendering_options;
  static Fl_Menu_Item *SET_ALPHA_VALUE;
private:
  inline void cb_SET_ALPHA_VALUE_i(Fl_Menu_*, void*);
  static void cb_SET_ALPHA_VALUE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Set_Color;
  static Fl_Menu_Item *Color_grey;
private:
  inline void cb_Color_grey_i(Fl_Menu_*, void*);
  static void cb_Color_grey(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_yellow;
private:
  inline void cb_Color_yellow_i(Fl_Menu_*, void*);
  static void cb_Color_yellow(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_red;
private:
  inline void cb_Color_red_i(Fl_Menu_*, void*);
  static void cb_Color_red(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_blue;
private:
  inline void cb_Color_blue_i(Fl_Menu_*, void*);
  static void cb_Color_blue(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_pink;
private:
  inline void cb_Color_pink_i(Fl_Menu_*, void*);
  static void cb_Color_pink(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_violet;
private:
  inline void cb_Color_violet_i(Fl_Menu_*, void*);
  static void cb_Color_violet(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_bone;
private:
  inline void cb_Color_bone_i(Fl_Menu_*, void*);
  static void cb_Color_bone(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_green;
private:
  inline void cb_Color_green_i(Fl_Menu_*, void*);
  static void cb_Color_green(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_darkred;
private:
  inline void cb_Color_darkred_i(Fl_Menu_*, void*);
  static void cb_Color_darkred(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_darkblue;
private:
  inline void cb_Color_darkblue_i(Fl_Menu_*, void*);
  static void cb_Color_darkblue(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_darkgreen;
private:
  inline void cb_Color_darkgreen_i(Fl_Menu_*, void*);
  static void cb_Color_darkgreen(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_orange;
private:
  inline void cb_Color_orange_i(Fl_Menu_*, void*);
  static void cb_Color_orange(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Color_brown;
private:
  inline void cb_Color_brown_i(Fl_Menu_*, void*);
  static void cb_Color_brown(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Menu_Show_Matrices;
private:
  inline void cb_Menu_Show_Matrices_i(Fl_Menu_*, void*);
  static void cb_Menu_Show_Matrices(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Object_group_submenu;
  static Fl_Menu_Item *GROUP;
private:
  inline void cb_GROUP_i(Fl_Menu_*, void*);
  static void cb_GROUP(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *UNGROUP;
private:
  inline void cb_UNGROUP_i(Fl_Menu_*, void*);
  static void cb_UNGROUP(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Object_rendering_list_submenu;
  static Fl_Menu_Item *Obj_move_up;
private:
  inline void cb_Obj_move_up_i(Fl_Menu_*, void*);
  static void cb_Obj_move_up(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Obj_move_down;
private:
  inline void cb_Obj_move_down_i(Fl_Menu_*, void*);
  static void cb_Obj_move_down(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Edit_delete_submenu;
  static Fl_Menu_Item *Delete_smaller_than_tri;
private:
  inline void cb_Delete_smaller_than_tri_i(Fl_Menu_*, void*);
  static void cb_Delete_smaller_than_tri(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Delete_smaller_than_vol;
private:
  inline void cb_Delete_smaller_than_vol_i(Fl_Menu_*, void*);
  static void cb_Delete_smaller_than_vol(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *Landmarks;
  static Fl_Menu_Item menu_Landmarks[];
  static Fl_Menu_Item *SelectLandmark;
private:
  inline void cb_SelectLandmark_i(Fl_Menu_*, void*);
  static void cb_SelectLandmark(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SelectLandmarkRange;
private:
  inline void cb_SelectLandmarkRange_i(Fl_Menu_*, void*);
  static void cb_SelectLandmarkRange(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SitckyLandmarks;
private:
  inline void cb_SitckyLandmarks_i(Fl_Menu_*, void*);
  static void cb_SitckyLandmarks(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AllFlagOptions;
private:
  inline void cb_AllFlagOptions_i(Fl_Menu_*, void*);
  static void cb_AllFlagOptions(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *LandmarkNormals;
private:
  inline void cb_LandmarkNormals_i(Fl_Menu_*, void*);
  static void cb_LandmarkNormals(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Curves_submenu_edition;
  static Fl_Menu_Item *Move_handles_option;
private:
  inline void cb_Move_handles_option_i(Fl_Menu_*, void*);
  static void cb_Move_handles_option(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *StartCurve;
private:
  inline void cb_StartCurve_i(Fl_Menu_*, void*);
  static void cb_StartCurve(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ConnectStartingPointCurve;
private:
  inline void cb_ConnectStartingPointCurve_i(Fl_Menu_*, void*);
  static void cb_ConnectStartingPointCurve(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *StartCurveConnection;
private:
  inline void cb_StartCurveConnection_i(Fl_Menu_*, void*);
  static void cb_StartCurveConnection(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *NoStartCurve;
private:
  inline void cb_NoStartCurve_i(Fl_Menu_*, void*);
  static void cb_NoStartCurve(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *SC_options;
  static Fl_Menu_Item menu_SC_options[];
  static Fl_Menu_Item *Scalars_SHOW;
private:
  inline void cb_Scalars_SHOW_i(Fl_Menu_*, void*);
  static void cb_Scalars_SHOW(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SCALAR_DISTANCE;
private:
  inline void cb_SCALAR_DISTANCE_i(Fl_Menu_*, void*);
  static void cb_SCALAR_DISTANCE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SCALAR_CURVATURE;
private:
  inline void cb_SCALAR_CURVATURE_i(Fl_Menu_*, void*);
  static void cb_SCALAR_CURVATURE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SCALAR_THICKNESS;
private:
  inline void cb_SCALAR_THICKNESS_i(Fl_Menu_*, void*);
  static void cb_SCALAR_THICKNESS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SCALAR_THICKNESS2;
private:
  inline void cb_SCALAR_THICKNESS2_i(Fl_Menu_*, void*);
  static void cb_SCALAR_THICKNESS2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *SCALAR_MEAN;
private:
  inline void cb_SCALAR_MEAN_i(Fl_Menu_*, void*);
  static void cb_SCALAR_MEAN(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *init_rgb;
private:
  inline void cb_init_rgb_i(Fl_Menu_*, void*);
  static void cb_init_rgb(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *Tags_menu;
  static Fl_Menu_Item menu_Tags_menu[];
  static Fl_Menu_Item *TAGS_SHOW;
private:
  inline void cb_TAGS_SHOW_i(Fl_Menu_*, void*);
  static void cb_TAGS_SHOW(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_CONVERT;
private:
  inline void cb_TAGS_CONVERT_i(Fl_Menu_*, void*);
  static void cb_TAGS_CONVERT(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_MERGE;
private:
  inline void cb_TAGS_MERGE_i(Fl_Menu_*, void*);
  static void cb_TAGS_MERGE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_CONNECTIVITY;
private:
  inline void cb_TAGS_CONNECTIVITY_i(Fl_Menu_*, void*);
  static void cb_TAGS_CONNECTIVITY(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_SUB_EXTRACT;
  static Fl_Menu_Item *TAGS_DECOMPOSE6;
private:
  inline void cb_TAGS_DECOMPOSE6_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE6(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_DECOMPOSE2;
private:
  inline void cb_TAGS_DECOMPOSE2_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_DECOMPOSE;
private:
  inline void cb_TAGS_DECOMPOSE_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_DECOMPOSE_RANGE;
private:
  inline void cb_TAGS_DECOMPOSE_RANGE_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE_RANGE(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_SUB_DELETE;
  static Fl_Menu_Item *TAGS_DECOMPOSE3;
private:
  inline void cb_TAGS_DECOMPOSE3_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_DECOMPOSE5;
private:
  inline void cb_TAGS_DECOMPOSE5_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE5(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *TAGS_DECOMPOSE4;
private:
  inline void cb_TAGS_DECOMPOSE4_i(Fl_Menu_*, void*);
  static void cb_TAGS_DECOMPOSE4(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *Show;
  static Fl_Menu_Item menu_Show[];
  static Fl_Menu_Item *SET_WINDOW_OPTIONS;
private:
  inline void cb_SET_WINDOW_OPTIONS_i(Fl_Menu_*, void*);
  static void cb_SET_WINDOW_OPTIONS(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ShowViewHideObjects;
private:
  inline void cb_ShowViewHideObjects_i(Fl_Menu_*, void*);
  static void cb_ShowViewHideObjects(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AREA_VOLUME;
private:
  inline void cb_AREA_VOLUME_i(Fl_Menu_*, void*);
  static void cb_AREA_VOLUME(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *PRINT_SCALAR_LIST;
private:
  inline void cb_PRINT_SCALAR_LIST_i(Fl_Menu_*, void*);
  static void cb_PRINT_SCALAR_LIST(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *PRINT_NAME_LIST;
private:
  inline void cb_PRINT_NAME_LIST_i(Fl_Menu_*, void*);
  static void cb_PRINT_NAME_LIST(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *PRINT_NAME_LIST2;
private:
  inline void cb_PRINT_NAME_LIST2_i(Fl_Menu_*, void*);
  static void cb_PRINT_NAME_LIST2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Hierarchy;
private:
  inline void cb_Hierarchy_i(Fl_Menu_*, void*);
  static void cb_Hierarchy(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *About;
  static Fl_Menu_Item menu_About[];
  static Fl_Menu_Item *GET_VERSION;
private:
  inline void cb_GET_VERSION_i(Fl_Menu_*, void*);
  static void cb_GET_VERSION(Fl_Menu_*, void*);
public:
  Fl_Group *Buttons;
  Fl_Button *Move_mode;
private:
  inline void cb_Move_mode_i(Fl_Button*, void*);
  static void cb_Move_mode(Fl_Button*, void*);
public:
  Fl_Button *Camera_mode;
private:
  inline void cb_Camera_mode_i(Fl_Button*, void*);
  static void cb_Camera_mode(Fl_Button*, void*);
public:
  Fl_Button *Landmark_mode;
private:
  inline void cb_Landmark_mode_i(Fl_Button*, void*);
  static void cb_Landmark_mode(Fl_Button*, void*);
public:
  Fl_Button *Source_mode;
private:
  inline void cb_Source_mode_i(Fl_Button*, void*);
  static void cb_Source_mode(Fl_Button*, void*);
public:
  Fl_Button *Target_mode;
private:
  inline void cb_Target_mode_i(Fl_Button*, void*);
  static void cb_Target_mode(Fl_Button*, void*);
public:
  Fl_Button *Flag_mode;
private:
  inline void cb_Flag_mode_i(Fl_Button*, void*);
  static void cb_Flag_mode(Fl_Button*, void*);
public:
  Fl_Button *TRI_sort_0;
private:
  inline void cb_TRI_sort_0_i(Fl_Button*, void*);
  static void cb_TRI_sort_0(Fl_Button*, void*);
public:
  Fl_Button *TRI_sort_1;
private:
  inline void cb_TRI_sort_1_i(Fl_Button*, void*);
  static void cb_TRI_sort_1(Fl_Button*, void*);
public:
  Fl_Button *Grid;
private:
  inline void cb_Grid_i(Fl_Button*, void*);
  static void cb_Grid(Fl_Button*, void*);
public:
  Fl_Button *Bt_move_up;
private:
  inline void cb_Bt_move_up_i(Fl_Button*, void*);
  static void cb_Bt_move_up(Fl_Button*, void*);
public:
  Fl_Button *Bt_move_down;
private:
  inline void cb_Bt_move_down_i(Fl_Button*, void*);
  static void cb_Bt_move_down(Fl_Button*, void*);
public:
  Fl_Button *Bt_light_right;
private:
  inline void cb_Bt_light_right_i(Fl_Button*, void*);
  static void cb_Bt_light_right(Fl_Button*, void*);
public:
  Fl_Button *Bt_light_left;
private:
  inline void cb_Bt_light_left_i(Fl_Button*, void*);
  static void cb_Bt_light_left(Fl_Button*, void*);
public:
  Fl_Button *Bt_light_face;
private:
  inline void cb_Bt_light_face_i(Fl_Button*, void*);
  static void cb_Bt_light_face(Fl_Button*, void*);
public:
  Fl_Button *Bt_light_back;
private:
  inline void cb_Bt_light_back_i(Fl_Button*, void*);
  static void cb_Bt_light_back(Fl_Button*, void*);
public:
  Fl_Button *Bt_light_above;
private:
  inline void cb_Bt_light_above_i(Fl_Button*, void*);
  static void cb_Bt_light_above(Fl_Button*, void*);
public:
  Fl_Button *Bt_light_below;
private:
  inline void cb_Bt_light_below_i(Fl_Button*, void*);
  static void cb_Bt_light_below(Fl_Button*, void*);
public:
  Fl_Button *Bt_pos_left;
private:
  inline void cb_Bt_pos_left_i(Fl_Button*, void*);
  static void cb_Bt_pos_left(Fl_Button*, void*);
public:
  Fl_Button *Bt_pos_right;
private:
  inline void cb_Bt_pos_right_i(Fl_Button*, void*);
  static void cb_Bt_pos_right(Fl_Button*, void*);
public:
  Fl_Button *Bt_pos_face;
private:
  inline void cb_Bt_pos_face_i(Fl_Button*, void*);
  static void cb_Bt_pos_face(Fl_Button*, void*);
public:
  Fl_Button *Bt_pos_back;
private:
  inline void cb_Bt_pos_back_i(Fl_Button*, void*);
  static void cb_Bt_pos_back(Fl_Button*, void*);
public:
  Fl_Button *Bt_pos_above;
private:
  inline void cb_Bt_pos_above_i(Fl_Button*, void*);
  static void cb_Bt_pos_above(Fl_Button*, void*);
public:
  Fl_Button *Bt_pos_below;
private:
  inline void cb_Bt_pos_below_i(Fl_Button*, void*);
  static void cb_Bt_pos_below(Fl_Button*, void*);
public:
  Fl_Button *Matrix_button;
private:
  inline void cb_Matrix_button_i(Fl_Button*, void*);
  static void cb_Matrix_button(Fl_Button*, void*);
public:
  Fl_Button *Color_Scale_button;
private:
  inline void cb_Color_Scale_button_i(Fl_Button*, void*);
  static void cb_Color_Scale_button(Fl_Button*, void*);
public:
  Fl_Button *Color_Scale_Show;
private:
  inline void cb_Color_Scale_Show_i(Fl_Button*, void*);
  static void cb_Color_Scale_Show(Fl_Button*, void*);
public:
  Fl_Button *Show_Tag_Window2;
private:
  inline void cb_Show_Tag_Window2_i(Fl_Button*, void*);
  static void cb_Show_Tag_Window2(Fl_Button*, void*);
public:
  Fl_Button *Tag_mode_off;
private:
  inline void cb_Tag_mode_off_i(Fl_Button*, void*);
  static void cb_Tag_mode_off(Fl_Button*, void*);
public:
  Fl_Button *Tag_mode_on;
private:
  inline void cb_Tag_mode_on_i(Fl_Button*, void*);
  static void cb_Tag_mode_on(Fl_Button*, void*);
public:
  Fl_Button *Pencil;
private:
  inline void cb_Pencil_i(Fl_Button*, void*);
  static void cb_Pencil(Fl_Button*, void*);
public:
  Fl_Button *Magic_Wand;
private:
  inline void cb_Magic_Wand_i(Fl_Button*, void*);
  static void cb_Magic_Wand(Fl_Button*, void*);
public:
  Fl_Button *Flood_Fill;
private:
  inline void cb_Flood_Fill_i(Fl_Button*, void*);
  static void cb_Flood_Fill(Fl_Button*, void*);
public:
  Fl_Button *Lasso_plus;
private:
  inline void cb_Lasso_plus_i(Fl_Button*, void*);
  static void cb_Lasso_plus(Fl_Button*, void*);
public:
  Fl_Button *Edit_flag;
private:
  inline void cb_Edit_flag_i(Fl_Button*, void*);
  static void cb_Edit_flag(Fl_Button*, void*);
public:
  Fl_Button *Show_Tag_Window;
private:
  inline void cb_Show_Tag_Window_i(Fl_Button*, void*);
  static void cb_Show_Tag_Window(Fl_Button*, void*);
public:
  Fl_Button *Edit_name;
private:
  inline void cb_Edit_name_i(Fl_Button*, void*);
  static void cb_Edit_name(Fl_Button*, void*);
public:
  Fl_Button *Orientation;
private:
  inline void cb_Orientation_i(Fl_Button*, void*);
  static void cb_Orientation(Fl_Button*, void*);
public:
  Fl_Button *Move_cam_centre_of_mass;
private:
  inline void cb_Move_cam_centre_of_mass_i(Fl_Button*, void*);
  static void cb_Move_cam_centre_of_mass(Fl_Button*, void*);
public:
  Fl_Group *Resizable;
  Fl_Group *Bottom;
  MeshTools *MT;
  Fl_Group *WW;
  Fl_Group *WW_unresizable;
  SpecialSlider2 *zpan1;
private:
  inline void cb_zpan1_i(SpecialSlider2*, void*);
  static void cb_zpan1(SpecialSlider2*, void*);
public:
  SpecialRoller4 *zroll1;
private:
  inline void cb_zroll1_i(SpecialRoller4*, void*);
  static void cb_zroll1(SpecialRoller4*, void*);
public:
  SpecialSlider2 *ypan1;
private:
  inline void cb_ypan1_i(SpecialSlider2*, void*);
  static void cb_ypan1(SpecialSlider2*, void*);
public:
  SpecialRoller4 *yroll1;
private:
  inline void cb_yroll1_i(SpecialRoller4*, void*);
  static void cb_yroll1(SpecialRoller4*, void*);
public:
  Fl_Group *WW_resizable;
  Fl_Group *EE;
  Fl_Group *EE_unresizable;
  SpecialSlider2 *zpan;
private:
  inline void cb_zpan_i(SpecialSlider2*, void*);
  static void cb_zpan(SpecialSlider2*, void*);
public:
  SpecialSlider2 *zroll;
private:
  inline void cb_zroll_i(SpecialSlider2*, void*);
  static void cb_zroll(SpecialSlider2*, void*);
public:
  SpecialRoller4 *zoom;
private:
  inline void cb_zoom_i(SpecialRoller4*, void*);
  static void cb_zoom(SpecialRoller4*, void*);
public:
  Fl_Button *CP_cut_half2;
private:
  inline void cb_CP_cut_half2_i(Fl_Button*, void*);
  static void cb_CP_cut_half2(Fl_Button*, void*);
public:
  Fl_Button *CP_normal_cp2;
private:
  inline void cb_CP_normal_cp2_i(Fl_Button*, void*);
  static void cb_CP_normal_cp2(Fl_Button*, void*);
public:
  Fl_Group *EE_resizable;
  Fl_Group *SS;
  Fl_Group *SS_unresizable;
  SpecialSlider2 *xpan1;
private:
  inline void cb_xpan1_i(SpecialSlider2*, void*);
  static void cb_xpan1(SpecialSlider2*, void*);
public:
  SpecialRoller4 *xroll1;
private:
  inline void cb_xroll1_i(SpecialRoller4*, void*);
  static void cb_xroll1(SpecialRoller4*, void*);
public:
  Fl_Group *SS_resizable;
  Fl_Double_Window *camWindow;
  Fl_Value_Input *Cam_near;
  Fl_Value_Input *Cam_far;
  Fl_Value_Input *Cam_az;
  Fl_Value_Input *Cam_el;
  Fl_Value_Input *Cam_tw;
  Fl_Value_Input *Cam_tx;
  Fl_Value_Input *Cam_ty;
  Fl_Value_Input *Cam_tz;
  Fl_Button *Ok_cam;
private:
  inline void cb_Ok_cam_i(Fl_Button*, void*);
  static void cb_Ok_cam(Fl_Button*, void*);
public:
  Fl_Button *CP_cut_half;
private:
  inline void cb_CP_cut_half_i(Fl_Button*, void*);
  static void cb_CP_cut_half(Fl_Button*, void*);
public:
  Fl_Button *CP_normal_cp;
private:
  inline void cb_CP_normal_cp_i(Fl_Button*, void*);
  static void cb_CP_normal_cp(Fl_Button*, void*);
public:
  Fl_Double_Window *optWindow;
  Fl_Group *open_surface_option;
  Fl_Group *open_surface_option_camera;
  Fl_Round_Button *rb_cam;
  Fl_Round_Button *rb_cam2;
  Fl_Group *open_surface_option_center_of_mass;
  Fl_Round_Button *rb_cm;
  Fl_Round_Button *rb_cm2;
  Fl_Group *process_surface_options;
  Fl_Round_Button *rb_delete_orig;
  Fl_Round_Button *rb_keep_orig;
  Fl_Button *Ok_scc;
private:
  inline void cb_Ok_scc_i(Fl_Button*, void*);
  static void cb_Ok_scc(Fl_Button*, void*);
public:
  Fl_Double_Window *opt_lc_Window;
  Fl_Group *Window_group;
  Fl_Button *Back_Color;
private:
  inline void cb_Back_Color_i(Fl_Button*, void*);
  static void cb_Back_Color(Fl_Button*, void*);
public:
  Fl_Button *Grid_Color;
private:
  inline void cb_Grid_Color_i(Fl_Button*, void*);
  static void cb_Grid_Color(Fl_Button*, void*);
public:
  Fl_Button *Obj_Color;
private:
  inline void cb_Obj_Color_i(Fl_Button*, void*);
  static void cb_Obj_Color(Fl_Button*, void*);
public:
  Fl_Group *Light_group;
  Fl_Roller *LightRoll1;
private:
  inline void cb_LightRoll1_i(Fl_Roller*, void*);
  static void cb_LightRoll1(Fl_Roller*, void*);
public:
  Fl_Roller *LightRoll2;
private:
  inline void cb_LightRoll2_i(Fl_Roller*, void*);
  static void cb_LightRoll2(Fl_Roller*, void*);
public:
  Fl_Value_Slider *Specular;
private:
  inline void cb_Specular_i(Fl_Value_Slider*, void*);
  static void cb_Specular(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *Diffuse;
private:
  inline void cb_Diffuse_i(Fl_Value_Slider*, void*);
  static void cb_Diffuse(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *Ambiant;
private:
  inline void cb_Ambiant_i(Fl_Value_Slider*, void*);
  static void cb_Ambiant(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *cb_enable_2sides;
  Fl_Button *Ok_scc_lightning_colour;
private:
  inline void cb_Ok_scc_lightning_colour_i(Fl_Button*, void*);
  static void cb_Ok_scc_lightning_colour(Fl_Button*, void*);
public:
  Fl_Button *Reinit_general_options;
private:
  inline void cb_Reinit_general_options_i(Fl_Button*, void*);
  static void cb_Reinit_general_options(Fl_Button*, void*);
public:
  Fl_Double_Window *opt_lm_Window;
  Fl_Group *landmark_type_radio_buttons;
  Fl_Round_Button *pt_sphere;
  Fl_Round_Button *pt_needle;
  Fl_Value_Input *Landmark_Size2;
  Fl_Check_Button *auto_landmark_size;
private:
  inline void cb_auto_landmark_size_i(Fl_Check_Button*, void*);
  static void cb_auto_landmark_size(Fl_Check_Button*, void*);
public:
  Fl_Button *Ok_scc_lm;
private:
  inline void cb_Ok_scc_lm_i(Fl_Button*, void*);
  static void cb_Ok_scc_lm(Fl_Button*, void*);
public:
  Fl_Value_Input *Flag_g_length;
  Fl_Button *Flag_g_colour;
private:
  inline void cb_Flag_g_colour_i(Fl_Button*, void*);
  static void cb_Flag_g_colour(Fl_Button*, void*);
public:
  Fl_Double_Window *opt_rd_Window;
  Fl_Group *fast_display_option;
  Fl_Round_Button *rb_show_all;
private:
  inline void cb_rb_show_all_i(Fl_Round_Button*, void*);
  static void cb_rb_show_all(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_show_point_cloud;
private:
  inline void cb_rb_show_point_cloud_i(Fl_Round_Button*, void*);
  static void cb_rb_show_point_cloud(Fl_Round_Button*, void*);
public:
  Fl_Group *depth_of_field_of_view;
  Fl_Group *behaviour_when_moving_zoom;
  Fl_Round_Button *zm_keep;
  Fl_Round_Button *zm_adapt;
  Fl_Button *Ok_scc_rd;
private:
  inline void cb_Ok_scc_rd_i(Fl_Button*, void*);
  static void cb_Ok_scc_rd(Fl_Button*, void*);
public:
  Fl_Double_Window *matWindow;
  Fl_Button *Ok_mat;
private:
  inline void cb_Ok_mat_i(Fl_Button*, void*);
  static void cb_Ok_mat(Fl_Button*, void*);
public:
  Fl_Group *Size_matrix;
  Fl_Value_Input *M1_00;
  Fl_Value_Input *M1_01;
  Fl_Value_Input *M1_02;
  Fl_Value_Input *M1_03;
  Fl_Value_Input *M1_10;
  Fl_Value_Input *M1_11;
  Fl_Value_Input *M1_12;
  Fl_Value_Input *M1_13;
  Fl_Value_Input *M1_20;
  Fl_Value_Input *M1_21;
  Fl_Value_Input *M1_22;
  Fl_Value_Input *M1_23;
  Fl_Value_Input *M1_30;
  Fl_Value_Input *M1_31;
  Fl_Value_Input *M1_32;
  Fl_Value_Input *M1_33;
  Fl_Group *Position_matrix;
  Fl_Value_Input *M2_00;
  Fl_Value_Input *M2_01;
  Fl_Value_Input *M2_02;
  Fl_Value_Input *M2_03;
  Fl_Value_Input *M2_10;
  Fl_Value_Input *M2_11;
  Fl_Value_Input *M2_12;
  Fl_Value_Input *M2_13;
  Fl_Value_Input *M2_20;
  Fl_Value_Input *M2_21;
  Fl_Value_Input *M2_22;
  Fl_Value_Input *M2_23;
  Fl_Value_Input *M2_30;
  Fl_Value_Input *M2_31;
  Fl_Value_Input *M2_32;
  Fl_Value_Input *M2_33;
  Fl_Button *Init_mat;
private:
  inline void cb_Init_mat_i(Fl_Button*, void*);
  static void cb_Init_mat(Fl_Button*, void*);
public:
  Fl_Button *conv_mat;
private:
  inline void cb_conv_mat_i(Fl_Button*, void*);
  static void cb_conv_mat(Fl_Button*, void*);
public:
  Fl_Button *Ok_mat2;
private:
  inline void cb_Ok_mat2_i(Fl_Button*, void*);
  static void cb_Ok_mat2(Fl_Button*, void*);
public:
  Fl_Output *MyName;
  Fl_Button *Refresh_mat;
private:
  inline void cb_Refresh_mat_i(Fl_Button*, void*);
  static void cb_Refresh_mat(Fl_Button*, void*);
public:
  Fl_Double_Window *versionWindow;
  Fl_Button *Ok_Version;
private:
  inline void cb_Ok_Version_i(Fl_Button*, void*);
  static void cb_Ok_Version(Fl_Button*, void*);
public:
  Fl_Input *Version;
  Fl_Input *Copyright;
  Fl_Input *Contact;
  Fl_Input *Website;
  Fl_Input *Git;
  Fl_Double_Window *smoothWindow;
  Fl_Value_Input *S_Iteration_number;
  Fl_Button *Ok_smooth;
private:
  inline void cb_Ok_smooth_i(Fl_Button*, void*);
  static void cb_Ok_smooth(Fl_Button*, void*);
public:
  Fl_Value_Input *Relaxation;
  Fl_Button *Cancel_smooth;
private:
  inline void cb_Cancel_smooth_i(Fl_Button*, void*);
  static void cb_Cancel_smooth(Fl_Button*, void*);
public:
  Fl_Double_Window *blendWindow;
  Fl_Value_Input *Alpha_value;
  Fl_Button *Ok_blend;
private:
  inline void cb_Ok_blend_i(Fl_Button*, void*);
  static void cb_Ok_blend(Fl_Button*, void*);
public:
  Fl_Double_Window *gridsizeWindow;
  Fl_Value_Input *grid_size_value;
  Fl_Button *Ok_grid_size;
private:
  inline void cb_Ok_grid_size_i(Fl_Button*, void*);
  static void cb_Ok_grid_size(Fl_Button*, void*);
public:
  Fl_Double_Window *zoomScaleWindow;
  Fl_Value_Input *TF100pixels_in_mm_value;
  Fl_Button *Ok_100pixels_in_mm;
private:
  inline void cb_Ok_100pixels_in_mm_i(Fl_Button*, void*);
  static void cb_Ok_100pixels_in_mm(Fl_Button*, void*);
public:
  Fl_Double_Window *curvWindow;
  Fl_Button *Ok_curv;
private:
  inline void cb_Ok_curv_i(Fl_Button*, void*);
  static void cb_Ok_curv(Fl_Button*, void*);
public:
  Fl_Group *curvature_computation_option;
  Fl_Round_Button *cv_1;
  Fl_Round_Button *cv_2;
  Fl_Round_Button *cv_3;
  Fl_Round_Button *cv_4;
  Fl_Button *Cancel_curv;
private:
  inline void cb_Cancel_curv_i(Fl_Button*, void*);
  static void cb_Cancel_curv(Fl_Button*, void*);
public:
  Fl_Double_Window *deleteWindow;
  Fl_Value_Input *Triangles;
  Fl_Button *Ok_delete;
private:
  inline void cb_Ok_delete_i(Fl_Button*, void*);
  static void cb_Ok_delete(Fl_Button*, void*);
public:
  Fl_Button *Cancel_delete;
private:
  inline void cb_Cancel_delete_i(Fl_Button*, void*);
  static void cb_Cancel_delete(Fl_Button*, void*);
public:
  Fl_Double_Window *deleteWindow2;
  Fl_Value_Input *DeleteVolume;
  Fl_Button *Ok_delete_small_volume;
private:
  inline void cb_Ok_delete_small_volume_i(Fl_Button*, void*);
  static void cb_Ok_delete_small_volume(Fl_Button*, void*);
public:
  Fl_Button *Cancel_volume_delete;
private:
  inline void cb_Cancel_volume_delete_i(Fl_Button*, void*);
  static void cb_Cancel_volume_delete(Fl_Button*, void*);
public:
  Fl_Double_Window *defWindow;
  Fl_Value_Input *Def_percentage;
  Fl_Group *tps_radio_buttons;
  Fl_Round_Button *U_1;
  Fl_Round_Button *U_2;
  Fl_Button *Okdef2;
private:
  inline void cb_Okdef2_i(Fl_Button*, void*);
  static void cb_Okdef2(Fl_Button*, void*);
public:
  Fl_Button *Canceldef;
private:
  inline void cb_Canceldef_i(Fl_Button*, void*);
  static void cb_Canceldef(Fl_Button*, void*);
public:
  Fl_Double_Window *LMcurveWindow;
  Fl_Value_Input *CUR_NR;
  Fl_Button *Ok_curve_landmark;
private:
  inline void cb_Ok_curve_landmark_i(Fl_Button*, void*);
  static void cb_Ok_curve_landmark(Fl_Button*, void*);
public:
  Fl_Group *LMK_GROUP_SAVE_OPTIONS3;
  Fl_Round_Button *LMK_VER3;
  Fl_Round_Button *LMK_LMK3;
  Fl_Double_Window *movehandlesWindow;
  Fl_Value_Input *MovementIntensity;
  Fl_Button *Ok_move_handles;
private:
  inline void cb_Ok_move_handles_i(Fl_Button*, void*);
  static void cb_Ok_move_handles(Fl_Button*, void*);
public:
  Fl_Button *Cancel_move_handles;
private:
  inline void cb_Cancel_move_handles_i(Fl_Button*, void*);
  static void cb_Cancel_move_handles(Fl_Button*, void*);
public:
  Fl_Double_Window *STLSaveWindow;
  Fl_Group *STL_T_RB;
  Fl_Round_Button *STL_T_0;
  Fl_Round_Button *STL_T_1;
  Fl_Group *STL_M_RB;
  Fl_Round_Button *STL_M_0;
  Fl_Round_Button *STL_M_1;
  Fl_Button *OkSTLSave;
private:
  inline void cb_OkSTLSave_i(Fl_Button*, void*);
  static void cb_OkSTLSave(Fl_Button*, void*);
public:
  Fl_Button *CancelSaveSTL;
private:
  inline void cb_CancelSaveSTL_i(Fl_Button*, void*);
  static void cb_CancelSaveSTL(Fl_Button*, void*);
public:
  Fl_Double_Window *VTKSaveWindow;
  Fl_Group *VTK_T_RB;
  Fl_Round_Button *VTK_T_0;
  Fl_Round_Button *VTK_T_1;
  Fl_Group *VTK_M_RB;
  Fl_Round_Button *VTK_M_0;
  Fl_Round_Button *VTK_M_1;
  Fl_Button *OkVTKSave;
private:
  inline void cb_OkVTKSave_i(Fl_Button*, void*);
  static void cb_OkVTKSave(Fl_Button*, void*);
public:
  Fl_Button *CancelSaveVTK;
private:
  inline void cb_CancelSaveVTK_i(Fl_Button*, void*);
  static void cb_CancelSaveVTK(Fl_Button*, void*);
public:
  Fl_Double_Window *OBJSaveWindow;
  Fl_Group *OBJ_M_RB;
  Fl_Round_Button *OBJ_M_0;
  Fl_Round_Button *OBJ_M_1;
  Fl_Button *OkOBJSave;
private:
  inline void cb_OkOBJSave_i(Fl_Button*, void*);
  static void cb_OkOBJSave(Fl_Button*, void*);
public:
  Fl_Button *CancelSaveOBJ;
private:
  inline void cb_CancelSaveOBJ_i(Fl_Button*, void*);
  static void cb_CancelSaveOBJ(Fl_Button*, void*);
public:
  Fl_Double_Window *PLYSaveWindow;
  Fl_Group *PLY_T_RB;
  Fl_Round_Button *PLY_T_0;
  Fl_Round_Button *PLY_T_2;
  Fl_Round_Button *PLY_T_1;
  Fl_Group *PLY_M_RB;
  Fl_Round_Button *PLY_M_0;
  Fl_Round_Button *PLY_M_1;
  Fl_Group *PLY_N_RB;
  Fl_Round_Button *PLY_N_0;
  Fl_Round_Button *PLY_N_1;
  Fl_Button *OkPLYSave;
private:
  inline void cb_OkPLYSave_i(Fl_Button*, void*);
  static void cb_OkPLYSave(Fl_Button*, void*);
public:
  Fl_Button *CancelSavePLY;
private:
  inline void cb_CancelSavePLY_i(Fl_Button*, void*);
  static void cb_CancelSavePLY(Fl_Button*, void*);
public:
  Fl_Double_Window *decimateWindow;
  Fl_Value_Input *DCM_factor;
  Fl_Button *Ok_decimate;
private:
  inline void cb_Ok_decimate_i(Fl_Button*, void*);
  static void cb_Ok_decimate(Fl_Button*, void*);
public:
  Fl_Button *Cancel_decimate;
private:
  inline void cb_Cancel_decimate_i(Fl_Button*, void*);
  static void cb_Cancel_decimate(Fl_Button*, void*);
public:
  Fl_Group *decimate_options;
  Fl_Round_Button *dc_quadratic;
private:
  inline void cb_dc_quadratic_i(Fl_Round_Button*, void*);
  static void cb_dc_quadratic(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *dc_pro;
  Fl_Double_Window *LMKSaveNormal;
  Fl_Group *LMK_GROUP_SAVE_OPTIONS;
  Fl_Round_Button *LMK_VER;
  Fl_Round_Button *LMK_LMK;
  Fl_Button *OkLMKSave1;
private:
  inline void cb_OkLMKSave1_i(Fl_Button*, void*);
  static void cb_OkLMKSave1(Fl_Button*, void*);
public:
  Fl_Button *CancelSaveLMK;
private:
  inline void cb_CancelSaveLMK_i(Fl_Button*, void*);
  static void cb_CancelSaveLMK(Fl_Button*, void*);
public:
  Fl_Button *OkLMKSave2;
private:
  inline void cb_OkLMKSave2_i(Fl_Button*, void*);
  static void cb_OkLMKSave2(Fl_Button*, void*);
public:
  Fl_Double_Window *LMKSaveTarget;
  Fl_Group *LMK_GROUP_SAVE_OPTIONS2;
  Fl_Round_Button *LMK_VER2;
  Fl_Round_Button *LMK_LMK2;
  Fl_Button *OkLMKSave3;
private:
  inline void cb_OkLMKSave3_i(Fl_Button*, void*);
  static void cb_OkLMKSave3(Fl_Button*, void*);
public:
  Fl_Button *CancelSaveLMK2;
private:
  inline void cb_CancelSaveLMK2_i(Fl_Button*, void*);
  static void cb_CancelSaveLMK2(Fl_Button*, void*);
public:
  Fl_Button *OkLMKSave4;
private:
  inline void cb_OkLMKSave4_i(Fl_Button*, void*);
  static void cb_OkLMKSave4(Fl_Button*, void*);
public:
  Fl_Double_Window *scWindow;
  Fl_Button *Ok_sc;
private:
  inline void cb_Ok_sc_i(Fl_Button*, void*);
  static void cb_Ok_sc(Fl_Button*, void*);
public:
  Fl_Slider *scmin;
private:
  inline void cb_scmin_i(Fl_Slider*, void*);
  static void cb_scmin(Fl_Slider*, void*);
public:
  Fl_Slider *scmax;
private:
  inline void cb_scmax_i(Fl_Slider*, void*);
  static void cb_scmax(Fl_Slider*, void*);
public:
  Fl_Value_Input *Min;
  Fl_Value_Input *Max;
  Fl_Value_Input *Min_sc;
  Fl_Value_Input *Max_sc;
  Fl_Choice *sc_active;
private:
  inline void cb_sc_active_i(Fl_Choice*, void*);
  static void cb_sc_active(Fl_Choice*, void*);
public:
  Fl_Button *sc_right_01;
private:
  inline void cb_sc_right_01_i(Fl_Button*, void*);
  static void cb_sc_right_01(Fl_Button*, void*);
public:
  Fl_Button *sc_right_02;
private:
  inline void cb_sc_right_02_i(Fl_Button*, void*);
  static void cb_sc_right_02(Fl_Button*, void*);
public:
  Fl_Button *Ok_sc2;
private:
  inline void cb_Ok_sc2_i(Fl_Button*, void*);
  static void cb_Ok_sc2(Fl_Button*, void*);
public:
  Fl_Button *Ok_sc3;
private:
  inline void cb_Ok_sc3_i(Fl_Button*, void*);
  static void cb_Ok_sc3(Fl_Button*, void*);
public:
  Fl_Choice *sc_cs;
private:
  inline void cb_sc_cs_i(Fl_Choice*, void*);
  static void cb_sc_cs(Fl_Choice*, void*);
public:
  Fl_Check_Button *above_Max;
private:
  inline void cb_above_Max_i(Fl_Check_Button*, void*);
  static void cb_above_Max(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *below_Min;
private:
  inline void cb_below_Min_i(Fl_Check_Button*, void*);
  static void cb_below_Min(Fl_Check_Button*, void*);
public:
  Fl_Double_Window *thicknessWindow;
  Fl_Button *Ok_thickness;
private:
  inline void cb_Ok_thickness_i(Fl_Button*, void*);
  static void cb_Ok_thickness(Fl_Button*, void*);
public:
  Fl_Value_Input *Thickness_Max_Distance;
  Fl_Button *Cancel_th;
private:
  inline void cb_Cancel_th_i(Fl_Button*, void*);
  static void cb_Cancel_th(Fl_Button*, void*);
public:
  Fl_Double_Window *tagsWindow;
  Fl_Button *Ok_tags;
private:
  inline void cb_Ok_tags_i(Fl_Button*, void*);
  static void cb_Ok_tags(Fl_Button*, void*);
public:
  Fl_Button *init_tags;
private:
  inline void cb_init_tags_i(Fl_Button*, void*);
  static void cb_init_tags(Fl_Button*, void*);
public:
  Fl_Group *TAG_TOOLS_OPTIONS;
  Fl_Value_Input *Pencil_Tag_level;
private:
  inline void cb_Pencil_Tag_level_i(Fl_Value_Input*, void*);
  static void cb_Pencil_Tag_level(Fl_Value_Input*, void*);
public:
  Fl_Value_Slider *Magic_Wand_Limit;
private:
  inline void cb_Magic_Wand_Limit_i(Fl_Value_Slider*, void*);
  static void cb_Magic_Wand_Limit(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *Magic_Wand_Override;
private:
  inline void cb_Magic_Wand_Override_i(Fl_Check_Button*, void*);
  static void cb_Magic_Wand_Override(Fl_Check_Button*, void*);
public:
  Fl_Group *Extract_Delete_Group;
  Fl_Input *Extraction_text;
  Fl_Round_Button *rb_extract00;
private:
  inline void cb_rb_extract00_i(Fl_Round_Button*, void*);
  static void cb_rb_extract00(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_extract01;
private:
  inline void cb_rb_extract01_i(Fl_Round_Button*, void*);
  static void cb_rb_extract01(Fl_Round_Button*, void*);
public:
  Fl_Scroll *Tags_group;
  Fl_Group *Label_tag_group;
  Fl_Input *Tag_text_00;
private:
  inline void cb_Tag_text_00_i(Fl_Input*, void*);
  static void cb_Tag_text_00(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_01;
private:
  inline void cb_Tag_text_01_i(Fl_Input*, void*);
  static void cb_Tag_text_01(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_02;
private:
  inline void cb_Tag_text_02_i(Fl_Input*, void*);
  static void cb_Tag_text_02(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_03;
private:
  inline void cb_Tag_text_03_i(Fl_Input*, void*);
  static void cb_Tag_text_03(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_04;
private:
  inline void cb_Tag_text_04_i(Fl_Input*, void*);
  static void cb_Tag_text_04(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_05;
private:
  inline void cb_Tag_text_05_i(Fl_Input*, void*);
  static void cb_Tag_text_05(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_06;
private:
  inline void cb_Tag_text_06_i(Fl_Input*, void*);
  static void cb_Tag_text_06(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_07;
private:
  inline void cb_Tag_text_07_i(Fl_Input*, void*);
  static void cb_Tag_text_07(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_08;
private:
  inline void cb_Tag_text_08_i(Fl_Input*, void*);
  static void cb_Tag_text_08(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_09;
private:
  inline void cb_Tag_text_09_i(Fl_Input*, void*);
  static void cb_Tag_text_09(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_10;
private:
  inline void cb_Tag_text_10_i(Fl_Input*, void*);
  static void cb_Tag_text_10(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_11;
private:
  inline void cb_Tag_text_11_i(Fl_Input*, void*);
  static void cb_Tag_text_11(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_12;
private:
  inline void cb_Tag_text_12_i(Fl_Input*, void*);
  static void cb_Tag_text_12(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_13;
private:
  inline void cb_Tag_text_13_i(Fl_Input*, void*);
  static void cb_Tag_text_13(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_14;
private:
  inline void cb_Tag_text_14_i(Fl_Input*, void*);
  static void cb_Tag_text_14(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_15;
private:
  inline void cb_Tag_text_15_i(Fl_Input*, void*);
  static void cb_Tag_text_15(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_16;
private:
  inline void cb_Tag_text_16_i(Fl_Input*, void*);
  static void cb_Tag_text_16(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_17;
private:
  inline void cb_Tag_text_17_i(Fl_Input*, void*);
  static void cb_Tag_text_17(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_18;
private:
  inline void cb_Tag_text_18_i(Fl_Input*, void*);
  static void cb_Tag_text_18(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_19;
private:
  inline void cb_Tag_text_19_i(Fl_Input*, void*);
  static void cb_Tag_text_19(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_20;
private:
  inline void cb_Tag_text_20_i(Fl_Input*, void*);
  static void cb_Tag_text_20(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_21;
private:
  inline void cb_Tag_text_21_i(Fl_Input*, void*);
  static void cb_Tag_text_21(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_22;
private:
  inline void cb_Tag_text_22_i(Fl_Input*, void*);
  static void cb_Tag_text_22(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_23;
private:
  inline void cb_Tag_text_23_i(Fl_Input*, void*);
  static void cb_Tag_text_23(Fl_Input*, void*);
public:
  Fl_Input *Tag_text_24;
private:
  inline void cb_Tag_text_24_i(Fl_Input*, void*);
  static void cb_Tag_text_24(Fl_Input*, void*);
public:
  Fl_Group *Active_tag_group;
  Fl_Round_Button *rb_tag00;
private:
  inline void cb_rb_tag00_i(Fl_Round_Button*, void*);
  static void cb_rb_tag00(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag01;
private:
  inline void cb_rb_tag01_i(Fl_Round_Button*, void*);
  static void cb_rb_tag01(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag02;
private:
  inline void cb_rb_tag02_i(Fl_Round_Button*, void*);
  static void cb_rb_tag02(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag03;
private:
  inline void cb_rb_tag03_i(Fl_Round_Button*, void*);
  static void cb_rb_tag03(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag04;
private:
  inline void cb_rb_tag04_i(Fl_Round_Button*, void*);
  static void cb_rb_tag04(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag05;
private:
  inline void cb_rb_tag05_i(Fl_Round_Button*, void*);
  static void cb_rb_tag05(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag06;
private:
  inline void cb_rb_tag06_i(Fl_Round_Button*, void*);
  static void cb_rb_tag06(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag07;
private:
  inline void cb_rb_tag07_i(Fl_Round_Button*, void*);
  static void cb_rb_tag07(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag08;
private:
  inline void cb_rb_tag08_i(Fl_Round_Button*, void*);
  static void cb_rb_tag08(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag09;
private:
  inline void cb_rb_tag09_i(Fl_Round_Button*, void*);
  static void cb_rb_tag09(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag10;
private:
  inline void cb_rb_tag10_i(Fl_Round_Button*, void*);
  static void cb_rb_tag10(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag11;
private:
  inline void cb_rb_tag11_i(Fl_Round_Button*, void*);
  static void cb_rb_tag11(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag12;
private:
  inline void cb_rb_tag12_i(Fl_Round_Button*, void*);
  static void cb_rb_tag12(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag13;
private:
  inline void cb_rb_tag13_i(Fl_Round_Button*, void*);
  static void cb_rb_tag13(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag14;
private:
  inline void cb_rb_tag14_i(Fl_Round_Button*, void*);
  static void cb_rb_tag14(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag15;
private:
  inline void cb_rb_tag15_i(Fl_Round_Button*, void*);
  static void cb_rb_tag15(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag16;
private:
  inline void cb_rb_tag16_i(Fl_Round_Button*, void*);
  static void cb_rb_tag16(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag17;
private:
  inline void cb_rb_tag17_i(Fl_Round_Button*, void*);
  static void cb_rb_tag17(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag18;
private:
  inline void cb_rb_tag18_i(Fl_Round_Button*, void*);
  static void cb_rb_tag18(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag19;
private:
  inline void cb_rb_tag19_i(Fl_Round_Button*, void*);
  static void cb_rb_tag19(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag20;
private:
  inline void cb_rb_tag20_i(Fl_Round_Button*, void*);
  static void cb_rb_tag20(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag21;
private:
  inline void cb_rb_tag21_i(Fl_Round_Button*, void*);
  static void cb_rb_tag21(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag22;
private:
  inline void cb_rb_tag22_i(Fl_Round_Button*, void*);
  static void cb_rb_tag22(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag23;
private:
  inline void cb_rb_tag23_i(Fl_Round_Button*, void*);
  static void cb_rb_tag23(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *rb_tag24;
private:
  inline void cb_rb_tag24_i(Fl_Round_Button*, void*);
  static void cb_rb_tag24(Fl_Round_Button*, void*);
public:
  Fl_Group *Alpha_group;
  Fl_Value_Input *Alpha_00;
private:
  inline void cb_Alpha_00_i(Fl_Value_Input*, void*);
  static void cb_Alpha_00(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_01;
private:
  inline void cb_Alpha_01_i(Fl_Value_Input*, void*);
  static void cb_Alpha_01(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_02;
private:
  inline void cb_Alpha_02_i(Fl_Value_Input*, void*);
  static void cb_Alpha_02(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_03;
private:
  inline void cb_Alpha_03_i(Fl_Value_Input*, void*);
  static void cb_Alpha_03(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_04;
private:
  inline void cb_Alpha_04_i(Fl_Value_Input*, void*);
  static void cb_Alpha_04(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_05;
private:
  inline void cb_Alpha_05_i(Fl_Value_Input*, void*);
  static void cb_Alpha_05(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_06;
private:
  inline void cb_Alpha_06_i(Fl_Value_Input*, void*);
  static void cb_Alpha_06(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_07;
private:
  inline void cb_Alpha_07_i(Fl_Value_Input*, void*);
  static void cb_Alpha_07(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_08;
private:
  inline void cb_Alpha_08_i(Fl_Value_Input*, void*);
  static void cb_Alpha_08(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_09;
private:
  inline void cb_Alpha_09_i(Fl_Value_Input*, void*);
  static void cb_Alpha_09(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_10;
private:
  inline void cb_Alpha_10_i(Fl_Value_Input*, void*);
  static void cb_Alpha_10(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_11;
private:
  inline void cb_Alpha_11_i(Fl_Value_Input*, void*);
  static void cb_Alpha_11(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_12;
private:
  inline void cb_Alpha_12_i(Fl_Value_Input*, void*);
  static void cb_Alpha_12(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_13;
private:
  inline void cb_Alpha_13_i(Fl_Value_Input*, void*);
  static void cb_Alpha_13(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_14;
private:
  inline void cb_Alpha_14_i(Fl_Value_Input*, void*);
  static void cb_Alpha_14(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_15;
private:
  inline void cb_Alpha_15_i(Fl_Value_Input*, void*);
  static void cb_Alpha_15(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_16;
private:
  inline void cb_Alpha_16_i(Fl_Value_Input*, void*);
  static void cb_Alpha_16(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_17;
private:
  inline void cb_Alpha_17_i(Fl_Value_Input*, void*);
  static void cb_Alpha_17(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_18;
private:
  inline void cb_Alpha_18_i(Fl_Value_Input*, void*);
  static void cb_Alpha_18(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_19;
private:
  inline void cb_Alpha_19_i(Fl_Value_Input*, void*);
  static void cb_Alpha_19(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_20;
private:
  inline void cb_Alpha_20_i(Fl_Value_Input*, void*);
  static void cb_Alpha_20(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_21;
private:
  inline void cb_Alpha_21_i(Fl_Value_Input*, void*);
  static void cb_Alpha_21(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_22;
private:
  inline void cb_Alpha_22_i(Fl_Value_Input*, void*);
  static void cb_Alpha_22(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_23;
private:
  inline void cb_Alpha_23_i(Fl_Value_Input*, void*);
  static void cb_Alpha_23(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *Alpha_24;
private:
  inline void cb_Alpha_24_i(Fl_Value_Input*, void*);
  static void cb_Alpha_24(Fl_Value_Input*, void*);
public:
  Fl_Group *Tag_color_group;
  Fl_Button *Tag_00;
private:
  inline void cb_Tag_00_i(Fl_Button*, void*);
  static void cb_Tag_00(Fl_Button*, void*);
public:
  Fl_Button *Tag_01;
private:
  inline void cb_Tag_01_i(Fl_Button*, void*);
  static void cb_Tag_01(Fl_Button*, void*);
public:
  Fl_Button *Tag_02;
private:
  inline void cb_Tag_02_i(Fl_Button*, void*);
  static void cb_Tag_02(Fl_Button*, void*);
public:
  Fl_Button *Tag_03;
private:
  inline void cb_Tag_03_i(Fl_Button*, void*);
  static void cb_Tag_03(Fl_Button*, void*);
public:
  Fl_Button *Tag_04;
private:
  inline void cb_Tag_04_i(Fl_Button*, void*);
  static void cb_Tag_04(Fl_Button*, void*);
public:
  Fl_Button *Tag_05;
private:
  inline void cb_Tag_05_i(Fl_Button*, void*);
  static void cb_Tag_05(Fl_Button*, void*);
public:
  Fl_Button *Tag_06;
private:
  inline void cb_Tag_06_i(Fl_Button*, void*);
  static void cb_Tag_06(Fl_Button*, void*);
public:
  Fl_Button *Tag_07;
private:
  inline void cb_Tag_07_i(Fl_Button*, void*);
  static void cb_Tag_07(Fl_Button*, void*);
public:
  Fl_Button *Tag_08;
private:
  inline void cb_Tag_08_i(Fl_Button*, void*);
  static void cb_Tag_08(Fl_Button*, void*);
public:
  Fl_Button *Tag_09;
private:
  inline void cb_Tag_09_i(Fl_Button*, void*);
  static void cb_Tag_09(Fl_Button*, void*);
public:
  Fl_Button *Tag_10;
private:
  inline void cb_Tag_10_i(Fl_Button*, void*);
  static void cb_Tag_10(Fl_Button*, void*);
public:
  Fl_Button *Tag_11;
private:
  inline void cb_Tag_11_i(Fl_Button*, void*);
  static void cb_Tag_11(Fl_Button*, void*);
public:
  Fl_Button *Tag_12;
private:
  inline void cb_Tag_12_i(Fl_Button*, void*);
  static void cb_Tag_12(Fl_Button*, void*);
public:
  Fl_Button *Tag_13;
private:
  inline void cb_Tag_13_i(Fl_Button*, void*);
  static void cb_Tag_13(Fl_Button*, void*);
public:
  Fl_Button *Tag_14;
private:
  inline void cb_Tag_14_i(Fl_Button*, void*);
  static void cb_Tag_14(Fl_Button*, void*);
public:
  Fl_Button *Tag_15;
private:
  inline void cb_Tag_15_i(Fl_Button*, void*);
  static void cb_Tag_15(Fl_Button*, void*);
public:
  Fl_Button *Tag_16;
private:
  inline void cb_Tag_16_i(Fl_Button*, void*);
  static void cb_Tag_16(Fl_Button*, void*);
public:
  Fl_Button *Tag_17;
private:
  inline void cb_Tag_17_i(Fl_Button*, void*);
  static void cb_Tag_17(Fl_Button*, void*);
public:
  Fl_Button *Tag_18;
private:
  inline void cb_Tag_18_i(Fl_Button*, void*);
  static void cb_Tag_18(Fl_Button*, void*);
public:
  Fl_Button *Tag_19;
private:
  inline void cb_Tag_19_i(Fl_Button*, void*);
  static void cb_Tag_19(Fl_Button*, void*);
public:
  Fl_Button *Tag_20;
private:
  inline void cb_Tag_20_i(Fl_Button*, void*);
  static void cb_Tag_20(Fl_Button*, void*);
public:
  Fl_Button *Tag_21;
private:
  inline void cb_Tag_21_i(Fl_Button*, void*);
  static void cb_Tag_21(Fl_Button*, void*);
public:
  Fl_Button *Tag_22;
private:
  inline void cb_Tag_22_i(Fl_Button*, void*);
  static void cb_Tag_22(Fl_Button*, void*);
public:
  Fl_Button *Tag_23;
private:
  inline void cb_Tag_23_i(Fl_Button*, void*);
  static void cb_Tag_23(Fl_Button*, void*);
public:
  Fl_Button *Tag_24;
private:
  inline void cb_Tag_24_i(Fl_Button*, void*);
  static void cb_Tag_24(Fl_Button*, void*);
public:
  Fl_Group *Clear_group;
  Fl_Button *Clear_01;
private:
  inline void cb_Clear_01_i(Fl_Button*, void*);
  static void cb_Clear_01(Fl_Button*, void*);
public:
  Fl_Button *Clear_02;
private:
  inline void cb_Clear_02_i(Fl_Button*, void*);
  static void cb_Clear_02(Fl_Button*, void*);
public:
  Fl_Button *Clear_03;
private:
  inline void cb_Clear_03_i(Fl_Button*, void*);
  static void cb_Clear_03(Fl_Button*, void*);
public:
  Fl_Button *Clear_04;
private:
  inline void cb_Clear_04_i(Fl_Button*, void*);
  static void cb_Clear_04(Fl_Button*, void*);
public:
  Fl_Button *Clear_05;
private:
  inline void cb_Clear_05_i(Fl_Button*, void*);
  static void cb_Clear_05(Fl_Button*, void*);
public:
  Fl_Button *Clear_06;
private:
  inline void cb_Clear_06_i(Fl_Button*, void*);
  static void cb_Clear_06(Fl_Button*, void*);
public:
  Fl_Button *Clear_07;
private:
  inline void cb_Clear_07_i(Fl_Button*, void*);
  static void cb_Clear_07(Fl_Button*, void*);
public:
  Fl_Button *Clear_08;
private:
  inline void cb_Clear_08_i(Fl_Button*, void*);
  static void cb_Clear_08(Fl_Button*, void*);
public:
  Fl_Button *Clear_09;
private:
  inline void cb_Clear_09_i(Fl_Button*, void*);
  static void cb_Clear_09(Fl_Button*, void*);
public:
  Fl_Button *Clear_10;
private:
  inline void cb_Clear_10_i(Fl_Button*, void*);
  static void cb_Clear_10(Fl_Button*, void*);
public:
  Fl_Button *Clear_11;
private:
  inline void cb_Clear_11_i(Fl_Button*, void*);
  static void cb_Clear_11(Fl_Button*, void*);
public:
  Fl_Button *Clear_12;
private:
  inline void cb_Clear_12_i(Fl_Button*, void*);
  static void cb_Clear_12(Fl_Button*, void*);
public:
  Fl_Button *Clear_13;
private:
  inline void cb_Clear_13_i(Fl_Button*, void*);
  static void cb_Clear_13(Fl_Button*, void*);
public:
  Fl_Button *Clear_14;
private:
  inline void cb_Clear_14_i(Fl_Button*, void*);
  static void cb_Clear_14(Fl_Button*, void*);
public:
  Fl_Button *Clear_15;
private:
  inline void cb_Clear_15_i(Fl_Button*, void*);
  static void cb_Clear_15(Fl_Button*, void*);
public:
  Fl_Button *Clear_16;
private:
  inline void cb_Clear_16_i(Fl_Button*, void*);
  static void cb_Clear_16(Fl_Button*, void*);
public:
  Fl_Button *Clear_17;
private:
  inline void cb_Clear_17_i(Fl_Button*, void*);
  static void cb_Clear_17(Fl_Button*, void*);
public:
  Fl_Button *Clear_18;
private:
  inline void cb_Clear_18_i(Fl_Button*, void*);
  static void cb_Clear_18(Fl_Button*, void*);
public:
  Fl_Button *Clear_19;
private:
  inline void cb_Clear_19_i(Fl_Button*, void*);
  static void cb_Clear_19(Fl_Button*, void*);
public:
  Fl_Button *Clear_20;
private:
  inline void cb_Clear_20_i(Fl_Button*, void*);
  static void cb_Clear_20(Fl_Button*, void*);
public:
  Fl_Button *Clear_21;
private:
  inline void cb_Clear_21_i(Fl_Button*, void*);
  static void cb_Clear_21(Fl_Button*, void*);
public:
  Fl_Button *Clear_22;
private:
  inline void cb_Clear_22_i(Fl_Button*, void*);
  static void cb_Clear_22(Fl_Button*, void*);
public:
  Fl_Button *Clear_23;
private:
  inline void cb_Clear_23_i(Fl_Button*, void*);
  static void cb_Clear_23(Fl_Button*, void*);
public:
  Fl_Button *Clear_24;
private:
  inline void cb_Clear_24_i(Fl_Button*, void*);
  static void cb_Clear_24(Fl_Button*, void*);
public:
  Fl_Button *Clear_00;
private:
  inline void cb_Clear_00_i(Fl_Button*, void*);
  static void cb_Clear_00(Fl_Button*, void*);
public:
  Fl_Group *Fill_holes_group;
  Fl_Button *FH_01;
private:
  inline void cb_FH_01_i(Fl_Button*, void*);
  static void cb_FH_01(Fl_Button*, void*);
public:
  Fl_Button *FH_02;
private:
  inline void cb_FH_02_i(Fl_Button*, void*);
  static void cb_FH_02(Fl_Button*, void*);
public:
  Fl_Button *FH_03;
private:
  inline void cb_FH_03_i(Fl_Button*, void*);
  static void cb_FH_03(Fl_Button*, void*);
public:
  Fl_Button *FH_04;
private:
  inline void cb_FH_04_i(Fl_Button*, void*);
  static void cb_FH_04(Fl_Button*, void*);
public:
  Fl_Button *FH_05;
private:
  inline void cb_FH_05_i(Fl_Button*, void*);
  static void cb_FH_05(Fl_Button*, void*);
public:
  Fl_Button *FH_06;
private:
  inline void cb_FH_06_i(Fl_Button*, void*);
  static void cb_FH_06(Fl_Button*, void*);
public:
  Fl_Button *FH_07;
private:
  inline void cb_FH_07_i(Fl_Button*, void*);
  static void cb_FH_07(Fl_Button*, void*);
public:
  Fl_Button *FH_08;
private:
  inline void cb_FH_08_i(Fl_Button*, void*);
  static void cb_FH_08(Fl_Button*, void*);
public:
  Fl_Button *FH_09;
private:
  inline void cb_FH_09_i(Fl_Button*, void*);
  static void cb_FH_09(Fl_Button*, void*);
public:
  Fl_Button *FH_10;
private:
  inline void cb_FH_10_i(Fl_Button*, void*);
  static void cb_FH_10(Fl_Button*, void*);
public:
  Fl_Button *FH_11;
private:
  inline void cb_FH_11_i(Fl_Button*, void*);
  static void cb_FH_11(Fl_Button*, void*);
public:
  Fl_Button *FH_12;
private:
  inline void cb_FH_12_i(Fl_Button*, void*);
  static void cb_FH_12(Fl_Button*, void*);
public:
  Fl_Button *FH_13;
private:
  inline void cb_FH_13_i(Fl_Button*, void*);
  static void cb_FH_13(Fl_Button*, void*);
public:
  Fl_Button *FH_14;
private:
  inline void cb_FH_14_i(Fl_Button*, void*);
  static void cb_FH_14(Fl_Button*, void*);
public:
  Fl_Button *FH_15;
private:
  inline void cb_FH_15_i(Fl_Button*, void*);
  static void cb_FH_15(Fl_Button*, void*);
public:
  Fl_Button *FH_16;
private:
  inline void cb_FH_16_i(Fl_Button*, void*);
  static void cb_FH_16(Fl_Button*, void*);
public:
  Fl_Button *FH_17;
private:
  inline void cb_FH_17_i(Fl_Button*, void*);
  static void cb_FH_17(Fl_Button*, void*);
public:
  Fl_Button *FH_18;
private:
  inline void cb_FH_18_i(Fl_Button*, void*);
  static void cb_FH_18(Fl_Button*, void*);
public:
  Fl_Button *FH_19;
private:
  inline void cb_FH_19_i(Fl_Button*, void*);
  static void cb_FH_19(Fl_Button*, void*);
public:
  Fl_Button *FH_20;
private:
  inline void cb_FH_20_i(Fl_Button*, void*);
  static void cb_FH_20(Fl_Button*, void*);
public:
  Fl_Button *FH_21;
private:
  inline void cb_FH_21_i(Fl_Button*, void*);
  static void cb_FH_21(Fl_Button*, void*);
public:
  Fl_Button *FH_22;
private:
  inline void cb_FH_22_i(Fl_Button*, void*);
  static void cb_FH_22(Fl_Button*, void*);
public:
  Fl_Button *FH_23;
private:
  inline void cb_FH_23_i(Fl_Button*, void*);
  static void cb_FH_23(Fl_Button*, void*);
public:
  Fl_Button *FH_24;
private:
  inline void cb_FH_24_i(Fl_Button*, void*);
  static void cb_FH_24(Fl_Button*, void*);
public:
  Fl_Button *FH_00;
private:
  inline void cb_FH_00_i(Fl_Button*, void*);
  static void cb_FH_00(Fl_Button*, void*);
public:
  Fl_Double_Window *mergetagsWindow;
  Fl_Choice *merge_source;
  Fl_Button *Ok_merge;
private:
  inline void cb_Ok_merge_i(Fl_Button*, void*);
  static void cb_Ok_merge(Fl_Button*, void*);
public:
  Fl_Choice *merge_target;
  Fl_Button *Cancel_merge_tags;
private:
  inline void cb_Cancel_merge_tags_i(Fl_Button*, void*);
  static void cb_Cancel_merge_tags(Fl_Button*, void*);
public:
  Fl_Double_Window *extractregionWindow;
  Fl_Value_Input *Tag_value;
  Fl_Button *Ok_extractregion;
private:
  inline void cb_Ok_extractregion_i(Fl_Button*, void*);
  static void cb_Ok_extractregion(Fl_Button*, void*);
public:
  Fl_Button *Cancel_extract_region;
private:
  inline void cb_Cancel_extract_region_i(Fl_Button*, void*);
  static void cb_Cancel_extract_region(Fl_Button*, void*);
public:
  Fl_Double_Window *extractrangeWindow;
  Fl_Group *Extract_what_radio_buttons;
  Fl_Round_Button *ex_tags;
  Fl_Round_Button *ex_scalars;
  Fl_Choice *sc_active2;
  Fl_Value_Input *Range_min;
  Fl_Value_Input *Range_max;
  Fl_Button *Ok_extractrange;
private:
  inline void cb_Ok_extractrange_i(Fl_Button*, void*);
  static void cb_Ok_extractrange(Fl_Button*, void*);
public:
  Fl_Button *Cancel_extract_scalar_range;
private:
  inline void cb_Cancel_extract_scalar_range_i(Fl_Button*, void*);
  static void cb_Cancel_extract_scalar_range(Fl_Button*, void*);
public:
  Fl_Double_Window *decomposeWindow;
  Fl_Value_Input *Decompose_min_region_size;
  Fl_Button *Ok_decomposition;
private:
  inline void cb_Ok_decomposition_i(Fl_Button*, void*);
  static void cb_Ok_decomposition(Fl_Button*, void*);
public:
  Fl_Button *Cancel_connectivity_decompose;
private:
  inline void cb_Cancel_connectivity_decompose_i(Fl_Button*, void*);
  static void cb_Cancel_connectivity_decompose(Fl_Button*, void*);
public:
  Fl_Double_Window *extractallregionsWindow;
  Fl_Value_Input *Tag_decompose_min_region_size;
  Fl_Button *Ok_extractallregions;
private:
  inline void cb_Ok_extractallregions_i(Fl_Button*, void*);
  static void cb_Ok_extractallregions(Fl_Button*, void*);
public:
  Fl_Button *Cancel_extractalltaggedregions;
private:
  inline void cb_Cancel_extractalltaggedregions_i(Fl_Button*, void*);
  static void cb_Cancel_extractalltaggedregions(Fl_Button*, void*);
public:
  Fl_Double_Window *deleteregionWindow;
  Fl_Value_Input *Tag_value_delete;
  Fl_Button *Ok_deleteregion;
private:
  inline void cb_Ok_deleteregion_i(Fl_Button*, void*);
  static void cb_Ok_deleteregion(Fl_Button*, void*);
public:
  Fl_Button *Cancel_deleteregion;
private:
  inline void cb_Cancel_deleteregion_i(Fl_Button*, void*);
  static void cb_Cancel_deleteregion(Fl_Button*, void*);
public:
  Fl_Double_Window *flagWindow;
  Fl_Button *Refresh_flag;
private:
  inline void cb_Refresh_flag_i(Fl_Button*, void*);
  static void cb_Refresh_flag(Fl_Button*, void*);
public:
  Fl_Input *Flag_Label;
  Fl_Button *Cancel_flag;
private:
  inline void cb_Cancel_flag_i(Fl_Button*, void*);
  static void cb_Cancel_flag(Fl_Button*, void*);
public:
  Fl_Value_Input *Flag_Length;
  Fl_Button *Flag_Colour;
private:
  inline void cb_Flag_Colour_i(Fl_Button*, void*);
  static void cb_Flag_Colour(Fl_Button*, void*);
public:
  Fl_Button *Ok_flag;
private:
  inline void cb_Ok_flag_i(Fl_Button*, void*);
  static void cb_Ok_flag(Fl_Button*, void*);
public:
  Fl_Double_Window *thicknessWindow2;
  Fl_Button *Ok_th2;
private:
  inline void cb_Ok_th2_i(Fl_Button*, void*);
  static void cb_Ok_th2(Fl_Button*, void*);
public:
  Fl_Choice *th_source;
  Fl_Choice *th_target;
  Fl_Value_Input *Thickness_Max_Distance2;
  Fl_Button *Cancel_th2;
private:
  inline void cb_Cancel_th2_i(Fl_Button*, void*);
  static void cb_Cancel_th2(Fl_Button*, void*);
public:
  Fl_Double_Window *fillholesWindow;
  Fl_Value_Input *HOLES_size;
  Fl_Button *Ok_fillholes;
private:
  inline void cb_Ok_fillholes_i(Fl_Button*, void*);
  static void cb_Ok_fillholes(Fl_Button*, void*);
public:
  Fl_Button *Cancel_fillholes;
private:
  inline void cb_Cancel_fillholes_i(Fl_Button*, void*);
  static void cb_Cancel_fillholes(Fl_Button*, void*);
public:
  Fl_Double_Window *fillholesWindow2;
  Fl_Value_Input *HOLES2_size;
  Fl_Button *Ok_fillholes2;
private:
  inline void cb_Ok_fillholes2_i(Fl_Button*, void*);
  static void cb_Ok_fillholes2(Fl_Button*, void*);
public:
  Fl_Button *Cancel_fillholes2;
private:
  inline void cb_Cancel_fillholes2_i(Fl_Button*, void*);
  static void cb_Cancel_fillholes2(Fl_Button*, void*);
public:
  Fl_Value_Input *HOLES2_tagid;
  Fl_Double_Window *densifyWindow;
  Fl_Value_Input *DENSIFY_factor;
  Fl_Button *Ok_densify;
private:
  inline void cb_Ok_densify_i(Fl_Button*, void*);
  static void cb_Ok_densify(Fl_Button*, void*);
public:
  Fl_Button *Cancel_densify;
private:
  inline void cb_Cancel_densify_i(Fl_Button*, void*);
  static void cb_Cancel_densify(Fl_Button*, void*);
public:
  Fl_Double_Window *nameWindow;
  Fl_Button *Ok_name;
private:
  inline void cb_Ok_name_i(Fl_Button*, void*);
  static void cb_Ok_name(Fl_Button*, void*);
public:
  Fl_Button *Ok_name2;
private:
  inline void cb_Ok_name2_i(Fl_Button*, void*);
  static void cb_Ok_name2(Fl_Button*, void*);
public:
  Fl_Input *Name_Label;
  Fl_Button *Cancel_name;
private:
  inline void cb_Cancel_name_i(Fl_Button*, void*);
  static void cb_Cancel_name(Fl_Button*, void*);
public:
  Fl_Button *Refresh_name;
private:
  inline void cb_Refresh_name_i(Fl_Button*, void*);
  static void cb_Refresh_name(Fl_Button*, void*);
public:
  Fl_Double_Window *allflagWindow;
  Fl_Button *Ok_all_flag;
private:
  inline void cb_Ok_all_flag_i(Fl_Button*, void*);
  static void cb_Ok_all_flag(Fl_Button*, void*);
public:
  Fl_Button *Cancel_all_flag;
private:
  inline void cb_Cancel_all_flag_i(Fl_Button*, void*);
  static void cb_Cancel_all_flag(Fl_Button*, void*);
public:
  Fl_Value_Input *All_Flag_Length;
  Fl_Button *All_Flag_Colour;
private:
  inline void cb_All_Flag_Colour_i(Fl_Button*, void*);
  static void cb_All_Flag_Colour(Fl_Button*, void*);
public:
  Fl_Double_Window *ViewHideObjectsWindow;
  Fl_Check_Browser *Check_browser;
private:
  inline void cb_Check_browser_i(Fl_Check_Browser*, void*);
  static void cb_Check_browser(Fl_Check_Browser*, void*);
public:
  Fl_Button *Ok_view_hide;
private:
  inline void cb_Ok_view_hide_i(Fl_Button*, void*);
  static void cb_Ok_view_hide(Fl_Button*, void*);
public:
  Fl_Button *Refresh_view_hide;
private:
  inline void cb_Refresh_view_hide_i(Fl_Button*, void*);
  static void cb_Refresh_view_hide(Fl_Button*, void*);
public:
  Fl_Button *Check_none_view_hide;
private:
  inline void cb_Check_none_view_hide_i(Fl_Button*, void*);
  static void cb_Check_none_view_hide(Fl_Button*, void*);
public:
  Fl_Button *Check_all_view_hide;
private:
  inline void cb_Check_all_view_hide_i(Fl_Button*, void*);
  static void cb_Check_all_view_hide(Fl_Button*, void*);
public:
  Fl_Double_Window *tags_convert_Window;
  Fl_Group *rgb_to_tags_options;
  Fl_Round_Button *rgb_exact;
  Fl_Round_Button *rgb_distinct;
  Fl_Button *Ok_rgb_to_tags;
private:
  inline void cb_Ok_rgb_to_tags_i(Fl_Button*, void*);
  static void cb_Ok_rgb_to_tags(Fl_Button*, void*);
public:
  Fl_Double_Window *orientationWindow;
  Fl_Button *Ok_orientation;
private:
  inline void cb_Ok_orientation_i(Fl_Button*, void*);
  static void cb_Ok_orientation(Fl_Button*, void*);
public:
  Fl_Button *Cancel_orientation;
private:
  inline void cb_Cancel_orientation_i(Fl_Button*, void*);
  static void cb_Cancel_orientation(Fl_Button*, void*);
public:
  Fl_Input *z_plus_l;
  Fl_Input *z_minus_l;
  Fl_Input *y_plus_l;
  Fl_Input *y_minus_l;
  Fl_Input *x_plus_l;
  Fl_Input *x_minus_l;
  Fl_Double_Window *lmkselectWindow;
  Fl_Value_Input *LandmarkId;
  Fl_Button *Ok_lmkselect;
private:
  inline void cb_Ok_lmkselect_i(Fl_Button*, void*);
  static void cb_Ok_lmkselect(Fl_Button*, void*);
public:
  Fl_Button *Cancel_lmkselect;
private:
  inline void cb_Cancel_lmkselect_i(Fl_Button*, void*);
  static void cb_Cancel_lmkselect(Fl_Button*, void*);
public:
  Fl_Round_Button *SELECT_LMK;
  Fl_Round_Button *SELECT_LMK2;
  Fl_Double_Window *lmkrangeselectWindow;
  Fl_Value_Input *rangestart;
  Fl_Button *Ok_lmkrangeselect;
private:
  inline void cb_Ok_lmkrangeselect_i(Fl_Button*, void*);
  static void cb_Ok_lmkrangeselect(Fl_Button*, void*);
public:
  Fl_Button *Cancel_lmkrangeselect;
private:
  inline void cb_Cancel_lmkrangeselect_i(Fl_Button*, void*);
  static void cb_Cancel_lmkrangeselect(Fl_Button*, void*);
public:
  Fl_Round_Button *SELECTRANGE_LMK;
  Fl_Round_Button *SELECTRANGE_LMK2;
  Fl_Value_Input *rangeend;
  Fl_Double_Window *Registration_Window;
  Fl_Group *once_icp_ok;
  Fl_Check_Button *display_landmark;
  Fl_Button *draw;
private:
  inline void cb_draw_i(Fl_Button*, void*);
  static void cb_draw(Fl_Button*, void*);
public:
  Fl_Check_Button *display_vertice;
private:
  inline void cb_display_vertice_i(Fl_Check_Button*, void*);
  static void cb_display_vertice(Fl_Check_Button*, void*);
public:
  Fl_Button *vertice_color;
private:
  inline void cb_vertice_color_i(Fl_Button*, void*);
  static void cb_vertice_color(Fl_Button*, void*);
public:
  Fl_Value_Input *display_val_dec_vertice;
private:
  inline void cb_display_val_dec_vertice_i(Fl_Value_Input*, void*);
  static void cb_display_val_dec_vertice(Fl_Value_Input*, void*);
public:
  Fl_Value_Output *display_val_result_vertice;
private:
  inline void cb_display_val_result_vertice_i(Fl_Value_Output*, void*);
  static void cb_display_val_result_vertice(Fl_Value_Output*, void*);
public:
  Fl_Text_Display *textmatchings;
  Fl_Button *ok_vertice;
private:
  inline void cb_ok_vertice_i(Fl_Button*, void*);
  static void cb_ok_vertice(Fl_Button*, void*);
public:
  Fl_Button *save_vertice;
private:
  inline void cb_save_vertice_i(Fl_Button*, void*);
  static void cb_save_vertice(Fl_Button*, void*);
public:
  Fl_Value_Input *line_width;
  Fl_Button *save_origin_source_vertice;
private:
  inline void cb_save_origin_source_vertice_i(Fl_Button*, void*);
  static void cb_save_origin_source_vertice(Fl_Button*, void*);
public:
  Fl_Button *errors_curve;
private:
  inline void cb_errors_curve_i(Fl_Button*, void*);
  static void cb_errors_curve(Fl_Button*, void*);
public:
  Fl_Check_Button *color_ICP;
private:
  inline void cb_color_ICP_i(Fl_Check_Button*, void*);
  static void cb_color_ICP(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *Distance_threshold;
  Fl_Group *data_icp;
  Fl_Button *Ok_ICP;
private:
  inline void cb_Ok_ICP_i(Fl_Button*, void*);
  static void cb_Ok_ICP(Fl_Button*, void*);
public:
  Fl_Button *Cancel_ICP;
private:
  inline void cb_Cancel_ICP_i(Fl_Button*, void*);
  static void cb_Cancel_ICP(Fl_Button*, void*);
public:
  Fl_Check_Button *color_data;
private:
  inline void cb_color_data_i(Fl_Check_Button*, void*);
  static void cb_color_data(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *curv_data;
private:
  inline void cb_curv_data_i(Fl_Check_Button*, void*);
  static void cb_curv_data(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *weighted_normal;
  Fl_Value_Slider *weighted_color;
private:
  inline void cb_weighted_color_i(Fl_Value_Slider*, void*);
  static void cb_weighted_color(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *weighted_curvature;
private:
  inline void cb_weighted_curvature_i(Fl_Value_Slider*, void*);
  static void cb_weighted_curvature(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *percentageCurv;
  Fl_Choice *icp_source_name;
  Fl_Choice *icp_target_name;
  Fl_Button *reinit_s_t_list;
private:
  inline void cb_reinit_s_t_list_i(Fl_Button*, void*);
  static void cb_reinit_s_t_list(Fl_Button*, void*);
public:
  Fl_Group *transformation_mode;
  Fl_Check_Button *rigid;
private:
  inline void cb_rigid_i(Fl_Check_Button*, void*);
  static void cb_rigid(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *similitude;
private:
  inline void cb_similitude_i(Fl_Check_Button*, void*);
  static void cb_similitude(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *affine;
private:
  inline void cb_affine_i(Fl_Check_Button*, void*);
  static void cb_affine(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *loc_affine;
private:
  inline void cb_loc_affine_i(Fl_Check_Button*, void*);
  static void cb_loc_affine(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *step_by_step;
private:
  inline void cb_step_by_step_i(Fl_Check_Button*, void*);
  static void cb_step_by_step(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *add_landmarks;
private:
  inline void cb_add_landmarks_i(Fl_Check_Button*, void*);
  static void cb_add_landmarks(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *weighted_landmark;
  Fl_Check_Button *choose_numberLandmarksPoints;
private:
  inline void cb_choose_numberLandmarksPoints_i(Fl_Check_Button*, void*);
  static void cb_choose_numberLandmarksPoints(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *val_dec;
private:
  inline void cb_val_dec_i(Fl_Value_Input*, void*);
  static void cb_val_dec(Fl_Value_Input*, void*);
public:
  Fl_Value_Output *val_result;
private:
  inline void cb_val_result_i(Fl_Value_Output*, void*);
  static void cb_val_result(Fl_Value_Output*, void*);
public:
  Fl_Text_Display *textpoints;
  Fl_Value_Slider *percentageOfRadius;
  Fl_Group *error_threshold;
  Fl_Value_Input *ite_max;
  Fl_Value_Input *threshold_InPercentage;
  Fl_Text_Display *textpercentError;
  Fl_Group *parameters;
  Fl_Button *save_parameters;
private:
  inline void cb_save_parameters_i(Fl_Button*, void*);
  static void cb_save_parameters(Fl_Button*, void*);
public:
  Fl_Check_Button *store_parameter;
private:
  inline void cb_store_parameter_i(Fl_Check_Button*, void*);
  static void cb_store_parameter(Fl_Check_Button*, void*);
public:
  Fl_Light_Button *load_parameter;
private:
  inline void cb_load_parameter_i(Fl_Light_Button*, void*);
  static void cb_load_parameter(Fl_Light_Button*, void*);
public:
  Fl_Group *LA_transformation;
  Fl_Value_Input *radiusLA;
private:
  inline void cb_radiusLA_i(Fl_Value_Input*, void*);
  static void cb_radiusLA(Fl_Value_Input*, void*);
public:
  Fl_Text_Display *textpercentRadius;
  Fl_Check_Button *Only_Matching;
private:
  inline void cb_Only_Matching_i(Fl_Check_Button*, void*);
  static void cb_Only_Matching(Fl_Check_Button*, void*);
public:
  Fl_Double_Window *Errors_curv_Window;
  Fl_Button *save_errors_curve;
private:
  inline void cb_save_errors_curve_i(Fl_Button*, void*);
  static void cb_save_errors_curve(Fl_Button*, void*);
public:
  Fl_Group *caption;
  Fl_Text_Display *caption_matching;
  Fl_Text_Display *caption_landmarks;
  Fl_Text_Display *caption_total;
  Fl_Text_Display *caption_textmode;
  Fl_Chart *box_curve;
  Fl_Chart *box_curve1;
  Fl_Chart *box_curve2;
  Fl_Chart *box_axe_abs;
  Fl_Text_Display *time_total;
  Fl_Browser *table_time;
  Fl_Browser *table_error;
  Fl_Double_Window *NTWSaveWindow;
  Fl_Group *NTW_O_RB;
  Fl_Round_Button *NTW_O_0;
  Fl_Round_Button *NTW_O_1;
  Fl_Group *NTW_T_RB;
  Fl_Round_Button *NTW_T_0;
  Fl_Round_Button *NTW_T_1;
  Fl_Group *NTW_C_RB;
  Fl_Round_Button *NTW_C_0;
  Fl_Round_Button *NTW_C_1;
  Fl_Button *OkNTWSave;
private:
  inline void cb_OkNTWSave_i(Fl_Button*, void*);
  static void cb_OkNTWSave(Fl_Button*, void*);
public:
  Fl_Button *CancelSaveNTW;
private:
  inline void cb_CancelSaveNTW_i(Fl_Button*, void*);
  static void cb_CancelSaveNTW(Fl_Button*, void*);
public:
  void show(int argc, char **argv);
  void cam_show();
  void cam_hide();
  void options_lc_show();
  void options_lc_hide();
  void options_lc_update();
  void options_lm_show();
  void options_lm_hide();
  void options_rd_show();
  void options_rd_hide();
  void options_show();
  void options_hide();
  void handle(int event);
  void Displaymode(int mode);
  void mat_show();
  void mat_hide();
  void version_show();
  void version_hide();
  void smooth_show();
  void smooth_hide();
  void blend_show();
  void blend_hide();
  void grid_size_show();
  void grid_size_hide();
  void zoomScaleWindow_show();
  void zoomScaleWindow_hide();
  void curv_show();
  void curv_hide();
  void delete_show();
  void delete_hide();
  void def_show();
  void def_hide();
  void lmcur_show();
  void lmcur_hide();
  void delete2_show();
  void delete2_hide();
  void movehandles_show();
  void movehandles_hide();
  void stl_show();
  void stl_hide();
  void vtk_show();
  void vtk_hide();
  void obj_show();
  void obj_hide();
  void ply_show();
  void ply_hide();
  void decimate_show();
  void decimate_hide();
  void lmk_show();
  void lmk_hide();
  void lmk_show2();
  void lmk_hide2();
  void thickness_show();
  void thickness_hide();
  void sc_show();
  void sc_hide();
  void sc_update();
  void sc_update2();
  void tags_show();
  void tags_update();
  void tags_hide();
  void mergetags_show();
  void mergetags_hide();
  void extractregion_show();
  void extractregion_hide();
  void extractrange_show();
  void extractrange_hide();
  void extractallregions_show();
  void extractallregions_hide();
  void decompose_show();
  void decompose_hide();
  void deleteregion_show();
  void deleteregion_hide();
  void flag_show();
  void flag_hide();
  void flag_update();
  void thickness2_show();
  void thickness2_hide();
  void fillholes_show();
  void fillholes_hide();
  void fillholes2_show(int tag_id);
  void fillholes2_hide();
  void densify_show();
  void densify_hide();
  void name_show();
  void name_hide();
  void all_flag_show();
  void all_flag_hide();
  void tags_convert_show();
  void tags_convert_hide();
  void view_hide_show();
  void view_hide_hide();
  void view_hide_refresh();
  void view_hide_ok();
  void orientation_show();
  void orientation_hide();
  void orientation_update();
  void lmkselect_show();
  void lmkselect_hide();
  void lmkrangeselect_hide();
  void lmkrangeselect_show();
  void registration_ICP_hide();
  void registration_ICP_show();
  void errors_curve_ICP_hide();
  void errors_curv_ICP_show();
  void InitializeChart(Fl_Chart * chart,int ind);
  void Display_Text(Fl_Text_Display *caption,const char* str,Fl_Color n);
  void Initialize_time_Table(Fl_Browser *table);
  void Initialize_error_Table(Fl_Browser *table);
  char * select_mode_text(vtkSmartPointer<vtkFloatArray> tab,int i);
  int Update_Chart_scale(vtkSmartPointer<vtkFloatArray> tab,float chart_height);
  void ntw_show();
  void ntw_hide();
};
#endif
