// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "MeshToolsUI.h"

void MeshToolsUI::cb_mainWindow_i(Fl_Double_Window*, void*) {
  options_hide();
cam_hide();

exit(0);
}
void MeshToolsUI::cb_mainWindow(Fl_Double_Window* o, void* v) {
  ((MeshToolsUI*)(o->user_data()))->cb_mainWindow_i(o,v);
}

void MeshToolsUI::cb_Del_i(Fl_Button*, void*) {
  int test;
test = fl_ask("Do you really want to delete  ?");
if (test ==1)
{
	MT->Delete();			
	MT->redraw();
	
};
}
void MeshToolsUI::cb_Del(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Del_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_delete2[] = {
"19 19 -97 1",
" \377\377\377!\254\26\35\"\252\26\34#\251\26\34$\250\26\34%\232\24\32&\245\
\26\34\'\236\25\33(\237\26\34)\236\26\34*\234\26\34+\177\22\27,\230\26\34-\
\211\24\31.u\21\25/j\20\24""0i\20\24""1\213\26\33""2\212\26\33""3\204\25\32""4\
\201\26\33""5S\16\21""6J\r\17""7U\17\22""8v\26\32""9F\r\17:s\26\32;D\r\17<>\f\
\16=[\22\24>=\f\16?A\r\17@<\f\16""A?\r\17""B@\16\20""CY\26\31""DW\26\31""EJ\
\26\30""FH\26\30G\255\25\36H\255\26\36I\253\26\35J\250\25\34K\244\25\34L\252\
\26\35M\251\26\35N\247\26\35O\246\26\35P\242\25\34Q\224\24\32R\216\23\32S\214\
\23\31T]\r\22U\222\25\34V\200\22\30Wm\20\25X\223\26\34Y\220\26\34Za\17\23[Y\
\16\22\\\\\17\23]\200\26\33^J\r\20_I\r\20`z\26\33""aw\26\33""bF\r\20""c?\f\17""\
df\26\32""eS\26\31""fK\26\31gH\26\31hF\26\31i?\24\27jD\26\31kB\26\31l8\23\25m7\
\23\25n=\26\30o<\26\30p:\26\30q9\26\30r8\26\30s6\26\30t5\26\30u4\26\30v\262\
\25#w\261\25!x\245\24\37y\257\26!z=\26\31{8\26\31|\263\25$}e\16\27~\237\23$\
\177\212\21!\200\217\20\"",
"                   ",
"  |w          !    ",
" ~y!GH      !!!!   ",
" \177v!!!!    !!!I()  ",
" }\200x!!!!  !!#,4D   ",
"  ^TQJI!!!!L1Fpq   ",
"   b6W%!!!IYEss    ",
"    <<.M!I*etu     ",
"    [\\SIIMYgtr     ",
"    K\'$\"1]U38      ",
"   !!!N`zi=VP!     ",
"  !!LXdoumB7R!!    ",
" !!I2fnk{lAcZ*IM   ",
" I!&Cuj   >>?/-+0  ",
" IO:eh     >@;5_   ",
"  *a        >>9;   ",
"                   ",
"                   ",
"                   "
};
static Fl_Pixmap image_delete2(idata_delete2);

void MeshToolsUI::cb_Generic_Open_Surface_i(Fl_Menu_*, void*) {
  MT->Open_Mesh_File();
sc_update2();
}
void MeshToolsUI::cb_Generic_Open_Surface(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Generic_Open_Surface_i(o,v);
}

void MeshToolsUI::cb_Save_PLY_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("At least one mesh must be selected");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	ok = fl_ask("More than one mesh are currently selected. Do you want to save all selected meshes into one single mesh file?");	
}


if (ok==1)
{
	ply_show();
};
}
void MeshToolsUI::cb_Save_PLY(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_PLY_i(o,v);
}

void MeshToolsUI::cb_Save_STL_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("At least one mesh must be selected");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	ok = fl_ask("More than one mesh are currently selected. Do you want to save all selected meshes into one single mesh file?");	
}


if (ok==1)
{
	stl_show();
};
}
void MeshToolsUI::cb_Save_STL(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_STL_i(o,v);
}

void MeshToolsUI::cb_Save_VTK_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("At least one mesh must be selected");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	ok = fl_ask("More than one mesh are currently selected. Do you want to save all selected meshes into one single mesh file?");	
}


if (ok==1)
{
	vtk_show();
};
}
void MeshToolsUI::cb_Save_VTK(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_VTK_i(o,v);
}

void MeshToolsUI::cb_Save_OBJ_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("At least one mesh must be selected");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	ok = fl_ask("More than one mesh are currently selected. Do you want to save all selected meshes into one single mesh file?");	
}


if (ok==1)
{
	obj_show();
};
}
void MeshToolsUI::cb_Save_OBJ(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_OBJ_i(o,v);
}

void MeshToolsUI::cb_Load_POS_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("No mesh selected. Please select at least one mesh.");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	ok = fl_ask("More than one mesh are currently selected. Do you want to give the same position to all selected meshes?");	
}

if (ok==1)
{

	MT->Open_POS_File();
	MT->redraw();
};
}
void MeshToolsUI::cb_Load_POS(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Load_POS_i(o,v);
}

void MeshToolsUI::cb_Load_POS_Inv_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("No mesh selected. Please select at least one mesh.");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	ok = fl_ask("More than one mesh are currently selected. Do you want to give the same position to all selected meshes?");	
}

if (ok==1)
{
	MT->Open_POS_File_Inv();
	MT->redraw();
};
}
void MeshToolsUI::cb_Load_POS_Inv(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Load_POS_Inv_i(o,v);
}

void MeshToolsUI::cb_Save_POS_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("No mesh selected. Please select one mesh in order to save its position.");
	ok =0;
}
else if (g_selected_names.size()>1)
{
	fl_alert("More than one mesh selected. Please select only one mesh in order to save its position.");
	ok =0;
}

if (ok==1)
{
	MT->Save_POS_File();
	MT->redraw();
};
}
void MeshToolsUI::cb_Save_POS(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_POS_i(o,v);
}

void MeshToolsUI::cb_Open_NTW_i(Fl_Menu_*, void*) {
  MT->Open_NTW_File();
}
void MeshToolsUI::cb_Open_NTW(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_NTW_i(o,v);
}

void MeshToolsUI::cb_Save_NTW_i(Fl_Menu_*, void*) {
  //MT->Save_NTW_File();
ntw_show();
}
void MeshToolsUI::cb_Save_NTW(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_NTW_i(o,v);
}

void MeshToolsUI::cb_Open_VER_i(Fl_Menu_*, void*) {
  MT->Open_Landmarks(0);
}
void MeshToolsUI::cb_Open_VER(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_VER_i(o,v);
}

void MeshToolsUI::cb_Open_VER1_i(Fl_Menu_*, void*) {
  MT->Open_Landmarks(1);
}
void MeshToolsUI::cb_Open_VER1(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_VER1_i(o,v);
}

void MeshToolsUI::cb_Save_VER_i(Fl_Menu_*, void*) {
  lmk_show();
//MT->Save_LMK_Landmarks(0);
}
void MeshToolsUI::cb_Save_VER(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_VER_i(o,v);
}

void MeshToolsUI::cb_Save_VER1_i(Fl_Menu_*, void*) {
  lmk_show2();
//MT->Save_LMK_Landmarks(1);
}
void MeshToolsUI::cb_Save_VER1(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_VER1_i(o,v);
}

void MeshToolsUI::cb_Open_VER2_i(Fl_Menu_*, void*) {
  MT->Open_STV_File();
}
void MeshToolsUI::cb_Open_VER2(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_VER2_i(o,v);
}

void MeshToolsUI::cb_Save_VER3_i(Fl_Menu_*, void*) {
  MT->Save_STV_File();
}
void MeshToolsUI::cb_Save_VER3(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_VER3_i(o,v);
}

void MeshToolsUI::cb_Open_CUR_i(Fl_Menu_*, void*) {
  MT->Open_CUR_File();
}
void MeshToolsUI::cb_Open_CUR(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_CUR_i(o,v);
}

void MeshToolsUI::cb_Save_CUR_i(Fl_Menu_*, void*) {
  MT->Save_CUR_File();
}
void MeshToolsUI::cb_Save_CUR(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_CUR_i(o,v);
}

void MeshToolsUI::cb_Save_CURLMK_i(Fl_Menu_*, void*) {
  lmcur_show();;
}
void MeshToolsUI::cb_Save_CURLMK(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_CURLMK_i(o,v);
}

void MeshToolsUI::cb_Save_Curve_Infos_i(Fl_Menu_*, void*) {
  MT->Save_CUR_Infos();
//Keep names;
}
void MeshToolsUI::cb_Save_Curve_Infos(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_Curve_Infos_i(o,v);
}

void MeshToolsUI::cb_Open_TAG_i(Fl_Menu_*, void*) {
  MT->Open_TAG_File();
tags_update();
MT->Update_RGB();
}
void MeshToolsUI::cb_Open_TAG(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_TAG_i(o,v);
}

void MeshToolsUI::cb_Save_TAG_i(Fl_Menu_*, void*) {
  MT->Save_TAG_File();
}
void MeshToolsUI::cb_Save_TAG(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_TAG_i(o,v);
}

void MeshToolsUI::cb_Open_FLG_i(Fl_Menu_*, void*) {
  MT->Open_FLG_File();
}
void MeshToolsUI::cb_Open_FLG(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_FLG_i(o,v);
}

void MeshToolsUI::cb_Save_FLG_i(Fl_Menu_*, void*) {
  MT->Save_FLG_File();
}
void MeshToolsUI::cb_Save_FLG(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_FLG_i(o,v);
}

void MeshToolsUI::cb_Save_Infos_i(Fl_Menu_*, void*) {
  MT->Compute_Name_Lists();
int ok=1;
if (g_selected_names.size()==0)
{
	fl_alert("At least one mesh must be selected");
	ok =0;
}

if (ok==1)
{
  MT->Save_Infos();
}

//Keep names;
}
void MeshToolsUI::cb_Save_Infos(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_Infos_i(o,v);
}

void MeshToolsUI::cb_Open_ORI_i(Fl_Menu_*, void*) {
  MT->Open_ORI_File();
orientation_update();
}
void MeshToolsUI::cb_Open_ORI(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Open_ORI_i(o,v);
}

void MeshToolsUI::cb_Save_ORI_i(Fl_Menu_*, void*) {
  MT->Save_ORI_File();
}
void MeshToolsUI::cb_Save_ORI(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Save_ORI_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_File[] = {
 {"Open Surface", 0,  (Fl_Callback*)MeshToolsUI::cb_Generic_Open_Surface, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Surface", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save PLY", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_PLY, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save STL", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_STL, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save VTK", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_VTK, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save OBJ", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_OBJ, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Position", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Position", 0,  (Fl_Callback*)MeshToolsUI::cb_Load_POS, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Load Transposed Position", 0,  (Fl_Callback*)MeshToolsUI::cb_Load_POS_Inv, 0, 0, FL_NORMAL_LABEL, 0, 14, 56},
 {"Save Position", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_POS, 0, 0, FL_NORMAL_LABEL, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Project", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open project", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_NTW, 0, 0, FL_NORMAL_LABEL, 0, 14, 56},
 {"Save project", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_NTW, 0, 0, FL_NORMAL_LABEL, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Landmarks", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_VER, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Load target landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_VER1, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_VER, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save target landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_VER1, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Load source and target landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_VER2, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save source and target landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_VER3, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {0,0,0,0,0,0,0,0,0},
 {"Curves", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load curves", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_CUR, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save curves", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_CUR, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Export curves as landmark file", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_CURLMK, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save curve infos (length per curve.)", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_Curve_Infos, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Tags and Flags", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load tag colors and labels", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_TAG, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save tag colors and labels", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_TAG, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Load flags", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_FLG, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save flags", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_FLG, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {0,0,0,0,0,0,0,0,0},
 {"Save infos (surface area, volume...)", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_Infos, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Orientation labels", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load orientation labels", 0,  (Fl_Callback*)MeshToolsUI::cb_Open_ORI, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Save orientation labels", 0,  (Fl_Callback*)MeshToolsUI::cb_Save_ORI, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::Generic_Open_Surface = MeshToolsUI::menu_File + 0;
Fl_Menu_Item* MeshToolsUI::Save_Surface = MeshToolsUI::menu_File + 1;
Fl_Menu_Item* MeshToolsUI::Save_PLY = MeshToolsUI::menu_File + 2;
Fl_Menu_Item* MeshToolsUI::Save_STL = MeshToolsUI::menu_File + 3;
Fl_Menu_Item* MeshToolsUI::Save_VTK = MeshToolsUI::menu_File + 4;
Fl_Menu_Item* MeshToolsUI::Save_OBJ = MeshToolsUI::menu_File + 5;
Fl_Menu_Item* MeshToolsUI::Position_submenu = MeshToolsUI::menu_File + 7;
Fl_Menu_Item* MeshToolsUI::Load_POS = MeshToolsUI::menu_File + 8;
Fl_Menu_Item* MeshToolsUI::Load_POS_Inv = MeshToolsUI::menu_File + 9;
Fl_Menu_Item* MeshToolsUI::Save_POS = MeshToolsUI::menu_File + 10;
Fl_Menu_Item* MeshToolsUI::Project_submenu = MeshToolsUI::menu_File + 12;
Fl_Menu_Item* MeshToolsUI::Open_NTW = MeshToolsUI::menu_File + 13;
Fl_Menu_Item* MeshToolsUI::Save_NTW = MeshToolsUI::menu_File + 14;
Fl_Menu_Item* MeshToolsUI::Landmarks_submenu = MeshToolsUI::menu_File + 16;
Fl_Menu_Item* MeshToolsUI::Open_VER = MeshToolsUI::menu_File + 17;
Fl_Menu_Item* MeshToolsUI::Open_VER1 = MeshToolsUI::menu_File + 18;
Fl_Menu_Item* MeshToolsUI::Save_VER = MeshToolsUI::menu_File + 19;
Fl_Menu_Item* MeshToolsUI::Save_VER1 = MeshToolsUI::menu_File + 20;
Fl_Menu_Item* MeshToolsUI::Open_VER2 = MeshToolsUI::menu_File + 21;
Fl_Menu_Item* MeshToolsUI::Save_VER3 = MeshToolsUI::menu_File + 22;
Fl_Menu_Item* MeshToolsUI::Curves_submenu = MeshToolsUI::menu_File + 24;
Fl_Menu_Item* MeshToolsUI::Open_CUR = MeshToolsUI::menu_File + 25;
Fl_Menu_Item* MeshToolsUI::Save_CUR = MeshToolsUI::menu_File + 26;
Fl_Menu_Item* MeshToolsUI::Save_CURLMK = MeshToolsUI::menu_File + 27;
Fl_Menu_Item* MeshToolsUI::Save_Curve_Infos = MeshToolsUI::menu_File + 28;
Fl_Menu_Item* MeshToolsUI::Tags_submenu = MeshToolsUI::menu_File + 30;
Fl_Menu_Item* MeshToolsUI::Open_TAG = MeshToolsUI::menu_File + 31;
Fl_Menu_Item* MeshToolsUI::Save_TAG = MeshToolsUI::menu_File + 32;
Fl_Menu_Item* MeshToolsUI::Open_FLG = MeshToolsUI::menu_File + 33;
Fl_Menu_Item* MeshToolsUI::Save_FLG = MeshToolsUI::menu_File + 34;
Fl_Menu_Item* MeshToolsUI::Save_Infos = MeshToolsUI::menu_File + 36;
Fl_Menu_Item* MeshToolsUI::Orientation_submenu = MeshToolsUI::menu_File + 37;
Fl_Menu_Item* MeshToolsUI::Open_ORI = MeshToolsUI::menu_File + 38;
Fl_Menu_Item* MeshToolsUI::Save_ORI = MeshToolsUI::menu_File + 39;

void MeshToolsUI::cb_SET_GENERAL_COLOUR_LIGHTNING_i(Fl_Menu_*, void*) {
  options_lc_show();
}
void MeshToolsUI::cb_SET_GENERAL_COLOUR_LIGHTNING(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SET_GENERAL_COLOUR_LIGHTNING_i(o,v);
}

void MeshToolsUI::cb_SET_GENERAL_RENDERING_i(Fl_Menu_*, void*) {
  options_rd_show();
}
void MeshToolsUI::cb_SET_GENERAL_RENDERING(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SET_GENERAL_RENDERING_i(o,v);
}

void MeshToolsUI::cb_SET_CAMERA_OPT_i(Fl_Menu_*, void*) {
  cam_show();
}
void MeshToolsUI::cb_SET_CAMERA_OPT(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SET_CAMERA_OPT_i(o,v);
}

void MeshToolsUI::cb_CAP0_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(-1);
MT->redraw();
}
void MeshToolsUI::cb_CAP0(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP0_i(o,v);
}

void MeshToolsUI::cb_CAPBAR_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(-2);
MT->redraw();
}
void MeshToolsUI::cb_CAPBAR(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAPBAR_i(o,v);
}

void MeshToolsUI::cb_CAP1_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(1);
MT->redraw();
}
void MeshToolsUI::cb_CAP1(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP1_i(o,v);
}

void MeshToolsUI::cb_CAP2_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(2);
MT->redraw();
}
void MeshToolsUI::cb_CAP2(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP2_i(o,v);
}

void MeshToolsUI::cb_CAP3_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(3);
MT->redraw();
}
void MeshToolsUI::cb_CAP3(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP3_i(o,v);
}

void MeshToolsUI::cb_CAP4_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(4);
MT->redraw();
}
void MeshToolsUI::cb_CAP4(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP4_i(o,v);
}

void MeshToolsUI::cb_CAP5_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(5);
MT->redraw();
}
void MeshToolsUI::cb_CAP5(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP5_i(o,v);
}

void MeshToolsUI::cb_CAP6_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(6);
MT->redraw();
}
void MeshToolsUI::cb_CAP6(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP6_i(o,v);
}

void MeshToolsUI::cb_CAP7_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(7);
MT->redraw();
}
void MeshToolsUI::cb_CAP7(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP7_i(o,v);
}

void MeshToolsUI::cb_CAP8_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(8);
MT->redraw();
}
void MeshToolsUI::cb_CAP8(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP8_i(o,v);
}

void MeshToolsUI::cb_CAP9_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(9);
MT->redraw();
}
void MeshToolsUI::cb_CAP9(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP9_i(o,v);
}

void MeshToolsUI::cb_CAP10_i(Fl_Menu_*, void*) {
  MT->Cam_Centre_At_Landmark(10);
MT->redraw();
}
void MeshToolsUI::cb_CAP10(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAP10_i(o,v);
}

void MeshToolsUI::cb_DISP_100PX_IN_MM_i(Fl_Menu_*, void*) {
  zoomScaleWindow_show();
}
void MeshToolsUI::cb_DISP_100PX_IN_MM(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_100PX_IN_MM_i(o,v);
}

void MeshToolsUI::cb_RESET_CAMERA_i(Fl_Menu_*, void*) {
  MT->Reset_Camera();
MT->redraw();
}
void MeshToolsUI::cb_RESET_CAMERA(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_RESET_CAMERA_i(o,v);
}

void MeshToolsUI::cb_CAMERA_PARAMS_i(Fl_Menu_*, void*) {
  int bool_cam=0;
if(CAMERA_PARAMS->value() != 0){
	cout<<"CAMERA PARAMS DISPLAYED"<<endl;
	bool_cam=1;
}
else{
	cout<<"CAMERA_PARAMS NOT DISPLAYED"<<endl;
	bool_cam=0;
}
MT->Set_Camera_Display(bool_cam);
MT->redraw();
}
void MeshToolsUI::cb_CAMERA_PARAMS(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_CAMERA_PARAMS_i(o,v);
}

void MeshToolsUI::cb_DISP_SURFACE_i(Fl_Menu_*, void*) {
  Displaymode(1);
}
void MeshToolsUI::cb_DISP_SURFACE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_SURFACE_i(o,v);
}

void MeshToolsUI::cb_DISP_WIREFRAME_i(Fl_Menu_*, void*) {
  Displaymode(0);
}
void MeshToolsUI::cb_DISP_WIREFRAME(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_WIREFRAME_i(o,v);
}

void MeshToolsUI::cb_DISP_SORT_i(Fl_Menu_*, void*) {
  Displaymode(4);
}
void MeshToolsUI::cb_DISP_SORT(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_SORT_i(o,v);
}

void MeshToolsUI::cb_DISP_SORT2_i(Fl_Menu_*, void*) {
  Displaymode(5);
}
void MeshToolsUI::cb_DISP_SORT2(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_SORT2_i(o,v);
}

void MeshToolsUI::cb_DISP_FLAT_i(Fl_Menu_*, void*) {
  Displaymode(2);
}
void MeshToolsUI::cb_DISP_FLAT(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_FLAT_i(o,v);
}

void MeshToolsUI::cb_DISP_TRI_GOU_i(Fl_Menu_*, void*) {
  Displaymode(3);
}
void MeshToolsUI::cb_DISP_TRI_GOU(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_TRI_GOU_i(o,v);
}

void MeshToolsUI::cb_DISP_CULLFACE_i(Fl_Menu_*, void*) {
  MT->Change_Cull_Face();
MT->redraw();
}
void MeshToolsUI::cb_DISP_CULLFACE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_CULLFACE_i(o,v);
}

void MeshToolsUI::cb_DISP_GRID_SIZE_i(Fl_Menu_*, void*) {
  grid_size_show();
}
void MeshToolsUI::cb_DISP_GRID_SIZE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_GRID_SIZE_i(o,v);
}

void MeshToolsUI::cb_SET_GENERAL_LANDMARK_RENDERING_i(Fl_Menu_*, void*) {
  options_lm_show();
}
void MeshToolsUI::cb_SET_GENERAL_LANDMARK_RENDERING(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SET_GENERAL_LANDMARK_RENDERING_i(o,v);
}

void MeshToolsUI::cb_DISP_LANDMARKNUM_i(Fl_Menu_*, void*) {
  MT->ChangeLandmarkMode();
MT->redraw();
}
void MeshToolsUI::cb_DISP_LANDMARKNUM(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_LANDMARKNUM_i(o,v);
}

void MeshToolsUI::cb_DISP_CURVE_i(Fl_Menu_*, void*) {
  MT->Change_Draw_Curve();
MT->redraw();
}
void MeshToolsUI::cb_DISP_CURVE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_CURVE_i(o,v);
}

void MeshToolsUI::cb_DISP_ORIENTATION_i(Fl_Menu_*, void*) {
  orientation_show();
}
void MeshToolsUI::cb_DISP_ORIENTATION(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DISP_ORIENTATION_i(o,v);
}

void MeshToolsUI::cb_VBO_ACTIVATED_i(Fl_Menu_*, void*) {
  bool bool_vbo=0;
if(VBO_ACTIVATED->value() != 0){
	cout<<"VBO ACTIVATED"<<endl;
	bool_vbo=1;
}
else{
	cout<<"NOT VBO ACTIVATED"<<endl;
	bool_vbo=0;
}
MT->VBO_activated(bool_vbo);
MT->redraw();
}
void MeshToolsUI::cb_VBO_ACTIVATED(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_VBO_ACTIVATED_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_Viewing_options[] = {
 {"General colour and lightning options", 0,  (Fl_Callback*)MeshToolsUI::cb_SET_GENERAL_COLOUR_LIGHTNING, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"General rendering options", 0,  (Fl_Callback*)MeshToolsUI::cb_SET_GENERAL_RENDERING, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Camera", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Camera options", 0,  (Fl_Callback*)MeshToolsUI::cb_SET_CAMERA_OPT, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Camera rotation center at ...", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Origin", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Centre of mass of all loaded meshes", 0,  (Fl_Callback*)MeshToolsUI::cb_CAPBAR, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 1", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 2", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 3", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 4", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 5", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 6", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 7", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 8", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 9", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"landmark 10", 0,  (Fl_Callback*)MeshToolsUI::cb_CAP10, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Set 100 pixels in mm", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_100PX_IN_MM, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reset Camera", 0,  (Fl_Callback*)MeshToolsUI::cb_RESET_CAMERA, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Display camera params", 0,  (Fl_Callback*)MeshToolsUI::cb_CAMERA_PARAMS, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Object rendering options", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Gouraud shading (smooth renreding) ", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_SURFACE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Draw wireframe", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_WIREFRAME, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sort vertices from back to front (beware: slow rendering!)", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_SORT, 0, 0, FL_NORMAL_LABEL, 0, 14, 56},
 {"Sort vertices from front to back (beware: slow rendering!)", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_SORT2, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Flat triangles", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_FLAT, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Wireframe and flat triangles", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_TRI_GOU, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Backface culling", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_CULLFACE, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Grid size", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_GRID_SIZE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Landmark and flag rendering options", 0,  (Fl_Callback*)MeshToolsUI::cb_SET_GENERAL_LANDMARK_RENDERING, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Display landmark numbers", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_LANDMARKNUM, 0, 6, FL_NORMAL_LABEL, 0, 14, 0},
 {"Draw curves", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_CURVE, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"Orientation labels", 0,  (Fl_Callback*)MeshToolsUI::cb_DISP_ORIENTATION, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"VBO activate", 0,  (Fl_Callback*)MeshToolsUI::cb_VBO_ACTIVATED, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::SET_GENERAL_COLOUR_LIGHTNING = MeshToolsUI::menu_Viewing_options + 0;
Fl_Menu_Item* MeshToolsUI::SET_GENERAL_RENDERING = MeshToolsUI::menu_Viewing_options + 1;
Fl_Menu_Item* MeshToolsUI::Camera_submenu = MeshToolsUI::menu_Viewing_options + 2;
Fl_Menu_Item* MeshToolsUI::SET_CAMERA_OPT = MeshToolsUI::menu_Viewing_options + 3;
Fl_Menu_Item* MeshToolsUI::Camera_center = MeshToolsUI::menu_Viewing_options + 4;
Fl_Menu_Item* MeshToolsUI::CAP0 = MeshToolsUI::menu_Viewing_options + 5;
Fl_Menu_Item* MeshToolsUI::CAPBAR = MeshToolsUI::menu_Viewing_options + 6;
Fl_Menu_Item* MeshToolsUI::CAP1 = MeshToolsUI::menu_Viewing_options + 7;
Fl_Menu_Item* MeshToolsUI::CAP2 = MeshToolsUI::menu_Viewing_options + 8;
Fl_Menu_Item* MeshToolsUI::CAP3 = MeshToolsUI::menu_Viewing_options + 9;
Fl_Menu_Item* MeshToolsUI::CAP4 = MeshToolsUI::menu_Viewing_options + 10;
Fl_Menu_Item* MeshToolsUI::CAP5 = MeshToolsUI::menu_Viewing_options + 11;
Fl_Menu_Item* MeshToolsUI::CAP6 = MeshToolsUI::menu_Viewing_options + 12;
Fl_Menu_Item* MeshToolsUI::CAP7 = MeshToolsUI::menu_Viewing_options + 13;
Fl_Menu_Item* MeshToolsUI::CAP8 = MeshToolsUI::menu_Viewing_options + 14;
Fl_Menu_Item* MeshToolsUI::CAP9 = MeshToolsUI::menu_Viewing_options + 15;
Fl_Menu_Item* MeshToolsUI::CAP10 = MeshToolsUI::menu_Viewing_options + 16;
Fl_Menu_Item* MeshToolsUI::DISP_100PX_IN_MM = MeshToolsUI::menu_Viewing_options + 18;
Fl_Menu_Item* MeshToolsUI::RESET_CAMERA = MeshToolsUI::menu_Viewing_options + 19;
Fl_Menu_Item* MeshToolsUI::CAMERA_PARAMS = MeshToolsUI::menu_Viewing_options + 20;
Fl_Menu_Item* MeshToolsUI::Display_Options = MeshToolsUI::menu_Viewing_options + 22;
Fl_Menu_Item* MeshToolsUI::DISP_SURFACE = MeshToolsUI::menu_Viewing_options + 23;
Fl_Menu_Item* MeshToolsUI::DISP_WIREFRAME = MeshToolsUI::menu_Viewing_options + 24;
Fl_Menu_Item* MeshToolsUI::DISP_SORT = MeshToolsUI::menu_Viewing_options + 25;
Fl_Menu_Item* MeshToolsUI::DISP_SORT2 = MeshToolsUI::menu_Viewing_options + 26;
Fl_Menu_Item* MeshToolsUI::DISP_FLAT = MeshToolsUI::menu_Viewing_options + 27;
Fl_Menu_Item* MeshToolsUI::DISP_TRI_GOU = MeshToolsUI::menu_Viewing_options + 28;
Fl_Menu_Item* MeshToolsUI::DISP_CULLFACE = MeshToolsUI::menu_Viewing_options + 29;
Fl_Menu_Item* MeshToolsUI::DISP_GRID_SIZE = MeshToolsUI::menu_Viewing_options + 31;
Fl_Menu_Item* MeshToolsUI::SET_GENERAL_LANDMARK_RENDERING = MeshToolsUI::menu_Viewing_options + 32;
Fl_Menu_Item* MeshToolsUI::DISP_LANDMARKNUM = MeshToolsUI::menu_Viewing_options + 33;
Fl_Menu_Item* MeshToolsUI::DISP_CURVE = MeshToolsUI::menu_Viewing_options + 34;
Fl_Menu_Item* MeshToolsUI::DISP_ORIENTATION = MeshToolsUI::menu_Viewing_options + 35;
Fl_Menu_Item* MeshToolsUI::VBO_ACTIVATED = MeshToolsUI::menu_Viewing_options + 36;

void MeshToolsUI::cb_INVERT_i(Fl_Menu_*, void*) {
  MT->Mesh_invert();
MT->redraw();
}
void MeshToolsUI::cb_INVERT(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_INVERT_i(o,v);
}

void MeshToolsUI::cb_MIRROR_ThroughY_i(Fl_Menu_*, void*) {
  MT->Mesh_Mirror_ThroughY();
MT->redraw();
}
void MeshToolsUI::cb_MIRROR_ThroughY(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_MIRROR_ThroughY_i(o,v);
}

void MeshToolsUI::cb_DECOMPOSE_REGIONS_i(Fl_Menu_*, void*) {
  decompose_show();
}
void MeshToolsUI::cb_DECOMPOSE_REGIONS(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DECOMPOSE_REGIONS_i(o,v);
}

void MeshToolsUI::cb_KEEP_LARGEST_REGION_i(Fl_Menu_*, void*) {
  MT->Mesh_Largest_Region();
MT->redraw();
}
void MeshToolsUI::cb_KEEP_LARGEST_REGION(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_KEEP_LARGEST_REGION_i(o,v);
}

void MeshToolsUI::cb_ACT_TOOL_i(Fl_Menu_*, void*) {
  MT->Set_Active_Scalar(5);
MT->SetModeTool(1);
}
void MeshToolsUI::cb_ACT_TOOL(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_ACT_TOOL_i(o,v);
}

void MeshToolsUI::cb_SMOOTH_i(Fl_Menu_*, void*) {
  smooth_show();
}
void MeshToolsUI::cb_SMOOTH(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SMOOTH_i(o,v);
}

void MeshToolsUI::cb_DEF_WINDOW_i(Fl_Menu_*, void*) {
  def_show();
}
void MeshToolsUI::cb_DEF_WINDOW(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DEF_WINDOW_i(o,v);
}

void MeshToolsUI::cb_DECIMATE_i(Fl_Menu_*, void*) {
  decimate_show();
}
void MeshToolsUI::cb_DECIMATE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DECIMATE_i(o,v);
}

void MeshToolsUI::cb_DENSIFY_i(Fl_Menu_*, void*) {
  densify_show();
}
void MeshToolsUI::cb_DENSIFY(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_DENSIFY_i(o,v);
}

void MeshToolsUI::cb_FILL_HOLES_i(Fl_Menu_*, void*) {
  fillholes_show();
}
void MeshToolsUI::cb_FILL_HOLES(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FILL_HOLES_i(o,v);
}

void MeshToolsUI::cb_REGISTRATION_ICP_i(Fl_Menu_*, void*) {
  registration_ICP_show();
}
void MeshToolsUI::cb_REGISTRATION_ICP(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_REGISTRATION_ICP_i(o,v);
}

void MeshToolsUI::cb_SET_ALPHA_VALUE_i(Fl_Menu_*, void*) {
  blend_show();
}
void MeshToolsUI::cb_SET_ALPHA_VALUE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SET_ALPHA_VALUE_i(o,v);
}

void MeshToolsUI::cb_Color_grey_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(150,150,150);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_grey(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_grey_i(o,v);
}

void MeshToolsUI::cb_Color_yellow_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(165,142,22);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_yellow(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_yellow_i(o,v);
}

void MeshToolsUI::cb_Color_red_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(186,37,37);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_red(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_red_i(o,v);
}

void MeshToolsUI::cb_Color_blue_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(64,123,126);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_blue(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_blue_i(o,v);
}

void MeshToolsUI::cb_Color_pink_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(173,120,95);
MT->save_ini_param();

MT->redraw();
}
void MeshToolsUI::cb_Color_pink(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_pink_i(o,v);
}

void MeshToolsUI::cb_Color_violet_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(120,51,145);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_violet(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_violet_i(o,v);
}

void MeshToolsUI::cb_Color_bone_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(161,146,95);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_bone(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_bone_i(o,v);
}

void MeshToolsUI::cb_Color_green_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(39,136,42);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_green(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_green_i(o,v);
}

void MeshToolsUI::cb_Color_darkred_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(115,8,15);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_darkred(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_darkred_i(o,v);
}

void MeshToolsUI::cb_Color_darkblue_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(52,52,160);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_darkblue(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_darkblue_i(o,v);
}

void MeshToolsUI::cb_Color_darkgreen_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(42,110,47);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_darkgreen(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_darkgreen_i(o,v);
}

void MeshToolsUI::cb_Color_orange_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(195,91,0);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_orange(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_orange_i(o,v);
}

void MeshToolsUI::cb_Color_brown_i(Fl_Menu_*, void*) {
  MT->color_setobjcolor(130,78,47);
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Color_brown(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_brown_i(o,v);
}

void MeshToolsUI::cb_Menu_Show_Matrices_i(Fl_Menu_*, void*) {
  mat_show();
}
void MeshToolsUI::cb_Menu_Show_Matrices(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Menu_Show_Matrices_i(o,v);
}

void MeshToolsUI::cb_GROUP_i(Fl_Menu_*, void*) {
  MT->Group();
MT->redraw();
}
void MeshToolsUI::cb_GROUP(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_GROUP_i(o,v);
}

void MeshToolsUI::cb_UNGROUP_i(Fl_Menu_*, void*) {
  MT->Ungroup();
MT->redraw();
}
void MeshToolsUI::cb_UNGROUP(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_UNGROUP_i(o,v);
}

void MeshToolsUI::cb_Obj_move_up_i(Fl_Menu_*, void*) {
  MT->Object_Move_Up();
MT->redraw();
}
void MeshToolsUI::cb_Obj_move_up(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Obj_move_up_i(o,v);
}

void MeshToolsUI::cb_Obj_move_down_i(Fl_Menu_*, void*) {
  MT->Object_Move_Down();
MT->redraw();
}
void MeshToolsUI::cb_Obj_move_down(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Obj_move_down_i(o,v);
}

void MeshToolsUI::cb_Delete_smaller_than_tri_i(Fl_Menu_*, void*) {
  delete_show();
}
void MeshToolsUI::cb_Delete_smaller_than_tri(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Delete_smaller_than_tri_i(o,v);
}

void MeshToolsUI::cb_Delete_smaller_than_vol_i(Fl_Menu_*, void*) {
  delete2_show();
}
void MeshToolsUI::cb_Delete_smaller_than_vol(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Delete_smaller_than_vol_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_Edit_obj[] = {
 {"Structure modification", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Invert", 0,  (Fl_Callback*)MeshToolsUI::cb_INVERT, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Mirror", 0,  (Fl_Callback*)MeshToolsUI::cb_MIRROR_ThroughY, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Connectivity : separate all non connected regions", 0,  (Fl_Callback*)MeshToolsUI::cb_DECOMPOSE_REGIONS, 0, 0, FL_NORMAL_LABEL, 0, 14, 56},
 {"Connectivity : keep largest region", 0,  (Fl_Callback*)MeshToolsUI::cb_KEEP_LARGEST_REGION, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Lasso cut", 0,  (Fl_Callback*)MeshToolsUI::cb_ACT_TOOL, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Smooth", 0,  (Fl_Callback*)MeshToolsUI::cb_SMOOTH, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"TPS Deformation", 0,  (Fl_Callback*)MeshToolsUI::cb_DEF_WINDOW, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Decimate", 0,  (Fl_Callback*)MeshToolsUI::cb_DECIMATE, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Densify", 0,  (Fl_Callback*)MeshToolsUI::cb_DENSIFY, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Fill holes", 0,  (Fl_Callback*)MeshToolsUI::cb_FILL_HOLES, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Registration ICP", 0,  (Fl_Callback*)MeshToolsUI::cb_REGISTRATION_ICP, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Rendering modification", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Set alpha value", 0,  (Fl_Callback*)MeshToolsUI::cb_SET_ALPHA_VALUE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Change object colour", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Grey", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_grey, 0, 0, FL_NORMAL_LABEL, 1, 14, 25},
 {"Yellow", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_yellow, 0, 0, FL_NORMAL_LABEL, 1, 14, 95},
 {"Red", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_red, 0, 0, FL_NORMAL_LABEL, 1, 14, 81},
 {"Blue", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_blue, 0, 0, FL_NORMAL_LABEL, 1, 14, 140},
 {"Pink", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_pink, 0, 0, FL_NORMAL_LABEL, 1, 14, 202},
 {"Violet", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_violet, 0, 0, FL_NORMAL_LABEL, 1, 14, 232},
 {"Bone", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_bone, 0, 0, FL_NORMAL_LABEL, 1, 14, 84},
 {"Green", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_green, 0, 0, FL_NORMAL_LABEL, 1, 14, 60},
 {"Dark red", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_darkred, 0, 0, FL_NORMAL_LABEL, 1, 14, 72},
 {"Dark blue", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_darkblue, 0, 0, FL_NORMAL_LABEL, 1, 14, 136},
 {"Dark green", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_darkgreen, 0, 0, FL_NORMAL_LABEL, 1, 14, 58},
 {"Orange", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_orange, 0, 0, FL_NORMAL_LABEL, 1, 14, 91},
 {"Brown", 0,  (Fl_Callback*)MeshToolsUI::cb_Color_brown, 0, 0, FL_NORMAL_LABEL, 1, 14, 74},
 {0,0,0,0,0,0,0,0,0},
 {"Edit first selected object position and aspect matrices", 0,  (Fl_Callback*)MeshToolsUI::cb_Menu_Show_Matrices, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Grouping actions", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Group", 0,  (Fl_Callback*)MeshToolsUI::cb_GROUP, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Ungroup", 0,  (Fl_Callback*)MeshToolsUI::cb_UNGROUP, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Object list order", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Move up", 0,  (Fl_Callback*)MeshToolsUI::cb_Obj_move_up, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Move down", 0,  (Fl_Callback*)MeshToolsUI::cb_Obj_move_down, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Delete small objects", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"threshold : a given number of triangles", 0,  (Fl_Callback*)MeshToolsUI::cb_Delete_smaller_than_tri, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"threshold : a given volume", 0,  (Fl_Callback*)MeshToolsUI::cb_Delete_smaller_than_vol, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::Object_structure_modification = MeshToolsUI::menu_Edit_obj + 0;
Fl_Menu_Item* MeshToolsUI::INVERT = MeshToolsUI::menu_Edit_obj + 1;
Fl_Menu_Item* MeshToolsUI::MIRROR_ThroughY = MeshToolsUI::menu_Edit_obj + 2;
Fl_Menu_Item* MeshToolsUI::DECOMPOSE_REGIONS = MeshToolsUI::menu_Edit_obj + 3;
Fl_Menu_Item* MeshToolsUI::KEEP_LARGEST_REGION = MeshToolsUI::menu_Edit_obj + 4;
Fl_Menu_Item* MeshToolsUI::ACT_TOOL = MeshToolsUI::menu_Edit_obj + 5;
Fl_Menu_Item* MeshToolsUI::SMOOTH = MeshToolsUI::menu_Edit_obj + 6;
Fl_Menu_Item* MeshToolsUI::DEF_WINDOW = MeshToolsUI::menu_Edit_obj + 7;
Fl_Menu_Item* MeshToolsUI::DECIMATE = MeshToolsUI::menu_Edit_obj + 8;
Fl_Menu_Item* MeshToolsUI::DENSIFY = MeshToolsUI::menu_Edit_obj + 9;
Fl_Menu_Item* MeshToolsUI::FILL_HOLES = MeshToolsUI::menu_Edit_obj + 10;
Fl_Menu_Item* MeshToolsUI::REGISTRATION_ICP = MeshToolsUI::menu_Edit_obj + 11;
Fl_Menu_Item* MeshToolsUI::Change_object_rendering_options = MeshToolsUI::menu_Edit_obj + 13;
Fl_Menu_Item* MeshToolsUI::SET_ALPHA_VALUE = MeshToolsUI::menu_Edit_obj + 14;
Fl_Menu_Item* MeshToolsUI::Set_Color = MeshToolsUI::menu_Edit_obj + 15;
Fl_Menu_Item* MeshToolsUI::Color_grey = MeshToolsUI::menu_Edit_obj + 16;
Fl_Menu_Item* MeshToolsUI::Color_yellow = MeshToolsUI::menu_Edit_obj + 17;
Fl_Menu_Item* MeshToolsUI::Color_red = MeshToolsUI::menu_Edit_obj + 18;
Fl_Menu_Item* MeshToolsUI::Color_blue = MeshToolsUI::menu_Edit_obj + 19;
Fl_Menu_Item* MeshToolsUI::Color_pink = MeshToolsUI::menu_Edit_obj + 20;
Fl_Menu_Item* MeshToolsUI::Color_violet = MeshToolsUI::menu_Edit_obj + 21;
Fl_Menu_Item* MeshToolsUI::Color_bone = MeshToolsUI::menu_Edit_obj + 22;
Fl_Menu_Item* MeshToolsUI::Color_green = MeshToolsUI::menu_Edit_obj + 23;
Fl_Menu_Item* MeshToolsUI::Color_darkred = MeshToolsUI::menu_Edit_obj + 24;
Fl_Menu_Item* MeshToolsUI::Color_darkblue = MeshToolsUI::menu_Edit_obj + 25;
Fl_Menu_Item* MeshToolsUI::Color_darkgreen = MeshToolsUI::menu_Edit_obj + 26;
Fl_Menu_Item* MeshToolsUI::Color_orange = MeshToolsUI::menu_Edit_obj + 27;
Fl_Menu_Item* MeshToolsUI::Color_brown = MeshToolsUI::menu_Edit_obj + 28;
Fl_Menu_Item* MeshToolsUI::Menu_Show_Matrices = MeshToolsUI::menu_Edit_obj + 30;
Fl_Menu_Item* MeshToolsUI::Object_group_submenu = MeshToolsUI::menu_Edit_obj + 32;
Fl_Menu_Item* MeshToolsUI::GROUP = MeshToolsUI::menu_Edit_obj + 33;
Fl_Menu_Item* MeshToolsUI::UNGROUP = MeshToolsUI::menu_Edit_obj + 34;
Fl_Menu_Item* MeshToolsUI::Object_rendering_list_submenu = MeshToolsUI::menu_Edit_obj + 36;
Fl_Menu_Item* MeshToolsUI::Obj_move_up = MeshToolsUI::menu_Edit_obj + 37;
Fl_Menu_Item* MeshToolsUI::Obj_move_down = MeshToolsUI::menu_Edit_obj + 38;
Fl_Menu_Item* MeshToolsUI::Edit_delete_submenu = MeshToolsUI::menu_Edit_obj + 40;
Fl_Menu_Item* MeshToolsUI::Delete_smaller_than_tri = MeshToolsUI::menu_Edit_obj + 41;
Fl_Menu_Item* MeshToolsUI::Delete_smaller_than_vol = MeshToolsUI::menu_Edit_obj + 42;

void MeshToolsUI::cb_SelectLandmark_i(Fl_Menu_*, void*) {
  lmkselect_show();
}
void MeshToolsUI::cb_SelectLandmark(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SelectLandmark_i(o,v);
}

void MeshToolsUI::cb_SelectLandmarkRange_i(Fl_Menu_*, void*) {
  lmkrangeselect_show();
}
void MeshToolsUI::cb_SelectLandmarkRange(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SelectLandmarkRange_i(o,v);
}

void MeshToolsUI::cb_SitckyLandmarks_i(Fl_Menu_*, void*) {
  MT->Stick_Selected_Landmarks_On_Surfaces();
MT->redraw();
}
void MeshToolsUI::cb_SitckyLandmarks(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SitckyLandmarks_i(o,v);
}

void MeshToolsUI::cb_AllFlagOptions_i(Fl_Menu_*, void*) {
  all_flag_show();
}
void MeshToolsUI::cb_AllFlagOptions(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_AllFlagOptions_i(o,v);
}

void MeshToolsUI::cb_LandmarkNormals_i(Fl_Menu_*, void*) {
  MT->Selected_Landmarks_Change_Orientation();
MT->redraw();
}
void MeshToolsUI::cb_LandmarkNormals(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_LandmarkNormals_i(o,v);
}

void MeshToolsUI::cb_Move_handles_option_i(Fl_Menu_*, void*) {
  movehandles_show();
}
void MeshToolsUI::cb_Move_handles_option(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Move_handles_option_i(o,v);
}

void MeshToolsUI::cb_StartCurve_i(Fl_Menu_*, void*) {
  MT->Curve_start(1);
MT->redraw();
}
void MeshToolsUI::cb_StartCurve(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_StartCurve_i(o,v);
}

void MeshToolsUI::cb_ConnectStartingPointCurve_i(Fl_Menu_*, void*) {
  MT->Curve_start(3);
MT->redraw();
}
void MeshToolsUI::cb_ConnectStartingPointCurve(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_ConnectStartingPointCurve_i(o,v);
}

void MeshToolsUI::cb_StartCurveConnection_i(Fl_Menu_*, void*) {
  MT->Curve_start(2);
MT->redraw();
}
void MeshToolsUI::cb_StartCurveConnection(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_StartCurveConnection_i(o,v);
}

void MeshToolsUI::cb_NoStartCurve_i(Fl_Menu_*, void*) {
  MT->Curve_start(0);
MT->redraw();
}
void MeshToolsUI::cb_NoStartCurve(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_NoStartCurve_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_Landmarks[] = {
 {"Select a given landmark", 0,  (Fl_Callback*)MeshToolsUI::cb_SelectLandmark, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Select a given range of landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_SelectLandmarkRange, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Push back selected landmarks on object surface", 0,  (Fl_Callback*)MeshToolsUI::cb_SitckyLandmarks, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Edit all selected flag landmarks", 0,  (Fl_Callback*)MeshToolsUI::cb_AllFlagOptions, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Change selected landmarks orientation according to surface normals", 0,  (Fl_Callback*)MeshToolsUI::cb_LandmarkNormals, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Selected landmarks involved into curves", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Move curve handles (selected target landmarks) semi-automatically", 0,  (Fl_Callback*)MeshToolsUI::cb_Move_handles_option, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal landmark (red) : define as curve starting point (green)", 0,  (Fl_Callback*)MeshToolsUI::cb_StartCurve, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal landmark (red) : connect to preceding starting point (violet)", 0,  (Fl_Callback*)MeshToolsUI::cb_ConnectStartingPointCurve, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal landmark (red) : define as curve milestone (blue)", 0,  (Fl_Callback*)MeshToolsUI::cb_StartCurveConnection, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Green, blue, violet landmark : set back to normal landmark (red)", 0,  (Fl_Callback*)MeshToolsUI::cb_NoStartCurve, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::SelectLandmark = MeshToolsUI::menu_Landmarks + 0;
Fl_Menu_Item* MeshToolsUI::SelectLandmarkRange = MeshToolsUI::menu_Landmarks + 1;
Fl_Menu_Item* MeshToolsUI::SitckyLandmarks = MeshToolsUI::menu_Landmarks + 2;
Fl_Menu_Item* MeshToolsUI::AllFlagOptions = MeshToolsUI::menu_Landmarks + 3;
Fl_Menu_Item* MeshToolsUI::LandmarkNormals = MeshToolsUI::menu_Landmarks + 4;
Fl_Menu_Item* MeshToolsUI::Curves_submenu_edition = MeshToolsUI::menu_Landmarks + 5;
Fl_Menu_Item* MeshToolsUI::Move_handles_option = MeshToolsUI::menu_Landmarks + 6;
Fl_Menu_Item* MeshToolsUI::StartCurve = MeshToolsUI::menu_Landmarks + 7;
Fl_Menu_Item* MeshToolsUI::ConnectStartingPointCurve = MeshToolsUI::menu_Landmarks + 8;
Fl_Menu_Item* MeshToolsUI::StartCurveConnection = MeshToolsUI::menu_Landmarks + 9;
Fl_Menu_Item* MeshToolsUI::NoStartCurve = MeshToolsUI::menu_Landmarks + 10;

void MeshToolsUI::cb_Scalars_SHOW_i(Fl_Menu_*, void*) {
  sc_show();
}
void MeshToolsUI::cb_Scalars_SHOW(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Scalars_SHOW_i(o,v);
}

void MeshToolsUI::cb_SCALAR_DISTANCE_i(Fl_Menu_*, void*) {
  MT->Set_Active_Scalar(0);
MT->SC_calc_depth();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_SCALAR_DISTANCE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SCALAR_DISTANCE_i(o,v);
}

void MeshToolsUI::cb_SCALAR_CURVATURE_i(Fl_Menu_*, void*) {
  curv_show();
}
void MeshToolsUI::cb_SCALAR_CURVATURE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SCALAR_CURVATURE_i(o,v);
}

void MeshToolsUI::cb_SCALAR_THICKNESS_i(Fl_Menu_*, void*) {
  thickness_show();
}
void MeshToolsUI::cb_SCALAR_THICKNESS(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SCALAR_THICKNESS_i(o,v);
}

void MeshToolsUI::cb_SCALAR_THICKNESS2_i(Fl_Menu_*, void*) {
  thickness2_show();
}
void MeshToolsUI::cb_SCALAR_THICKNESS2(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SCALAR_THICKNESS2_i(o,v);
}

void MeshToolsUI::cb_SCALAR_MEAN_i(Fl_Menu_*, void*) {
  MT->SC_calc_mean();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_SCALAR_MEAN(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SCALAR_MEAN_i(o,v);
}

void MeshToolsUI::cb_init_rgb_i(Fl_Menu_*, void*) {
  // active init_RGB
MT->Active_InitRGB();
MT->redraw();
}
void MeshToolsUI::cb_init_rgb(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_init_rgb_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_SC_options[] = {
 {"Show scalar rendering options window", 0,  (Fl_Callback*)MeshToolsUI::cb_Scalars_SHOW, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scalars : distance from camera", 0,  (Fl_Callback*)MeshToolsUI::cb_SCALAR_DISTANCE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scalars : compute vertice curvature", 0,  (Fl_Callback*)MeshToolsUI::cb_SCALAR_CURVATURE, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Scalars : compute thickness", 0,  (Fl_Callback*)MeshToolsUI::cb_SCALAR_THICKNESS, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Scalars : compute thickness between 2 objects", 0,  (Fl_Callback*)MeshToolsUI::cb_SCALAR_THICKNESS2, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Smooth active scalars (gaussian blur)", 0,  (Fl_Callback*)MeshToolsUI::cb_SCALAR_MEAN, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Init RGB ", 0,  (Fl_Callback*)MeshToolsUI::cb_init_rgb, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::Scalars_SHOW = MeshToolsUI::menu_SC_options + 0;
Fl_Menu_Item* MeshToolsUI::SCALAR_DISTANCE = MeshToolsUI::menu_SC_options + 1;
Fl_Menu_Item* MeshToolsUI::SCALAR_CURVATURE = MeshToolsUI::menu_SC_options + 2;
Fl_Menu_Item* MeshToolsUI::SCALAR_THICKNESS = MeshToolsUI::menu_SC_options + 3;
Fl_Menu_Item* MeshToolsUI::SCALAR_THICKNESS2 = MeshToolsUI::menu_SC_options + 4;
Fl_Menu_Item* MeshToolsUI::SCALAR_MEAN = MeshToolsUI::menu_SC_options + 5;
Fl_Menu_Item* MeshToolsUI::init_rgb = MeshToolsUI::menu_SC_options + 6;

void MeshToolsUI::cb_TAGS_SHOW_i(Fl_Menu_*, void*) {
  tags_show();
}
void MeshToolsUI::cb_TAGS_SHOW(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_SHOW_i(o,v);
}

void MeshToolsUI::cb_TAGS_CONVERT_i(Fl_Menu_*, void*) {
  tags_convert_show();
}
void MeshToolsUI::cb_TAGS_CONVERT(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_CONVERT_i(o,v);
}

void MeshToolsUI::cb_TAGS_MERGE_i(Fl_Menu_*, void*) {
  mergetags_show();
}
void MeshToolsUI::cb_TAGS_MERGE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_MERGE_i(o,v);
}

void MeshToolsUI::cb_TAGS_CONNECTIVITY_i(Fl_Menu_*, void*) {
  MT->Mesh_Tag_Connected_Regions();
MT->Set_Active_Scalar(-1);
MT->Activate_Tags_Display_Mode();
MT->SetColorScaleId(-1);
MT->redraw();
}
void MeshToolsUI::cb_TAGS_CONNECTIVITY(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_CONNECTIVITY_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE6_i(Fl_Menu_*, void*) {
  MT->Mesh_Extract_Active_Tag();
MT->redraw();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE6(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE6_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE2_i(Fl_Menu_*, void*) {
  extractallregions_show();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE2(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE2_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE_i(Fl_Menu_*, void*) {
  extractregion_show();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE_RANGE_i(Fl_Menu_*, void*) {
  extractrange_show();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE_RANGE(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE_RANGE_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE3_i(Fl_Menu_*, void*) {
  deleteregion_show();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE3(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE3_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE5_i(Fl_Menu_*, void*) {
  MT->Mesh_Delete_Active_Tag();
MT->redraw();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE5(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE5_i(o,v);
}

void MeshToolsUI::cb_TAGS_DECOMPOSE4_i(Fl_Menu_*, void*) {
  MT->Mesh_Delete_All_Non_Zero_Tags();
}
void MeshToolsUI::cb_TAGS_DECOMPOSE4(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TAGS_DECOMPOSE4_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_Tags_menu[] = {
 {"Show tag options window", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_SHOW, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Convert RGB colours to tags", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_CONVERT, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Merge Tags", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_MERGE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Tag connected regions", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_CONNECTIVITY, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Extract ...", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Extract active tag corresponding region", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Extract all tagged regions as several new objects", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Extract one tagged region as 1 new object", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Extract tag or other scalar range as 1 new object", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE_RANGE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Delete ...", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Delete one tagged region", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Delete active tag corresponding region", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Delete all tagged regions except TAG 00", 0,  (Fl_Callback*)MeshToolsUI::cb_TAGS_DECOMPOSE4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::TAGS_SHOW = MeshToolsUI::menu_Tags_menu + 0;
Fl_Menu_Item* MeshToolsUI::TAGS_CONVERT = MeshToolsUI::menu_Tags_menu + 1;
Fl_Menu_Item* MeshToolsUI::TAGS_MERGE = MeshToolsUI::menu_Tags_menu + 2;
Fl_Menu_Item* MeshToolsUI::TAGS_CONNECTIVITY = MeshToolsUI::menu_Tags_menu + 3;
Fl_Menu_Item* MeshToolsUI::TAGS_SUB_EXTRACT = MeshToolsUI::menu_Tags_menu + 4;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE6 = MeshToolsUI::menu_Tags_menu + 5;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE2 = MeshToolsUI::menu_Tags_menu + 6;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE = MeshToolsUI::menu_Tags_menu + 7;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE_RANGE = MeshToolsUI::menu_Tags_menu + 8;
Fl_Menu_Item* MeshToolsUI::TAGS_SUB_DELETE = MeshToolsUI::menu_Tags_menu + 10;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE3 = MeshToolsUI::menu_Tags_menu + 11;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE5 = MeshToolsUI::menu_Tags_menu + 12;
Fl_Menu_Item* MeshToolsUI::TAGS_DECOMPOSE4 = MeshToolsUI::menu_Tags_menu + 13;

void MeshToolsUI::cb_SET_WINDOW_OPTIONS_i(Fl_Menu_*, void*) {
  options_show();
}
void MeshToolsUI::cb_SET_WINDOW_OPTIONS(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_SET_WINDOW_OPTIONS_i(o,v);
}

void MeshToolsUI::cb_ShowViewHideObjects_i(Fl_Menu_*, void*) {
  view_hide_show();
}
void MeshToolsUI::cb_ShowViewHideObjects(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_ShowViewHideObjects_i(o,v);
}

void MeshToolsUI::cb_AREA_VOLUME_i(Fl_Menu_*, void*) {
  MT->Mesh_area_volume();
}
void MeshToolsUI::cb_AREA_VOLUME(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_AREA_VOLUME_i(o,v);
}

void MeshToolsUI::cb_PRINT_SCALAR_LIST_i(Fl_Menu_*, void*) {
  MT->Print_Global_Scalar_List();
}
void MeshToolsUI::cb_PRINT_SCALAR_LIST(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_PRINT_SCALAR_LIST_i(o,v);
}

void MeshToolsUI::cb_PRINT_NAME_LIST_i(Fl_Menu_*, void*) {
  MT->Print_Selected_Names_List();
}
void MeshToolsUI::cb_PRINT_NAME_LIST(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_PRINT_NAME_LIST_i(o,v);
}

void MeshToolsUI::cb_PRINT_NAME_LIST2_i(Fl_Menu_*, void*) {
  MT->Print_Distinct_Selected_Names_List();
}
void MeshToolsUI::cb_PRINT_NAME_LIST2(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_PRINT_NAME_LIST2_i(o,v);
}

void MeshToolsUI::cb_Hierarchy_i(Fl_Menu_*, void*) {
  MT->Hierachy();
}
void MeshToolsUI::cb_Hierarchy(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Hierarchy_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_Show[] = {
 {"General options", 0,  (Fl_Callback*)MeshToolsUI::cb_SET_WINDOW_OPTIONS, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show object view/hide window", 0,  (Fl_Callback*)MeshToolsUI::cb_ShowViewHideObjects, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Area and Volume of selected objects", 0,  (Fl_Callback*)MeshToolsUI::cb_AREA_VOLUME, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Print scalar list", 0,  (Fl_Callback*)MeshToolsUI::cb_PRINT_SCALAR_LIST, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Print list of selected objects", 0,  (Fl_Callback*)MeshToolsUI::cb_PRINT_NAME_LIST, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Print list of distinct selected objects", 0,  (Fl_Callback*)MeshToolsUI::cb_PRINT_NAME_LIST2, 0, 0, FL_NORMAL_LABEL, 0, 14, 32},
 {"Show object display order", 0,  (Fl_Callback*)MeshToolsUI::cb_Hierarchy, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::SET_WINDOW_OPTIONS = MeshToolsUI::menu_Show + 0;
Fl_Menu_Item* MeshToolsUI::ShowViewHideObjects = MeshToolsUI::menu_Show + 1;
Fl_Menu_Item* MeshToolsUI::AREA_VOLUME = MeshToolsUI::menu_Show + 2;
Fl_Menu_Item* MeshToolsUI::PRINT_SCALAR_LIST = MeshToolsUI::menu_Show + 3;
Fl_Menu_Item* MeshToolsUI::PRINT_NAME_LIST = MeshToolsUI::menu_Show + 4;
Fl_Menu_Item* MeshToolsUI::PRINT_NAME_LIST2 = MeshToolsUI::menu_Show + 5;
Fl_Menu_Item* MeshToolsUI::Hierarchy = MeshToolsUI::menu_Show + 6;

void MeshToolsUI::cb_GET_VERSION_i(Fl_Menu_*, void*) {
  version_show();
}
void MeshToolsUI::cb_GET_VERSION(Fl_Menu_* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_GET_VERSION_i(o,v);
}

Fl_Menu_Item MeshToolsUI::menu_About[] = {
 {"About", 0,  (Fl_Callback*)MeshToolsUI::cb_GET_VERSION, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MeshToolsUI::GET_VERSION = MeshToolsUI::menu_About + 0;

void MeshToolsUI::cb_Move_mode_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Camera_mode->value(0);
Landmark_mode->value(0);
MT->Mesh_Set_Select_Mode(0);
MT->redraw();
}
void MeshToolsUI::cb_Move_mode(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Move_mode_i(o,v);
}

static const char *idata_move[] = {
"20 20 -81 1",
" \377\377\377!\377\377\377\"212#a`a$\374\373\374%\373\372\373&\372\371\372\'\
\345\344\345(\330\327\330)\217\216\217*MLN+LKM,zy{-\245\244\246.\236\235\237/\
\224\223\225""0\200\177\201""1\370\367\371""2\362\361\363""3\272\271\274""4\
\251\250\253""5\355\354\360""6\340\337\343""7\333\332\336""8\6\6\7""9557:223;\
\266\266\271<\246\246\251=\342\342\345>\233\233\235?IIJ@CCDA\355\355\357""B\
\341\341\343""C\307\307\311""D\265\265\267""E\262\262\264""F\256\256\260GxxyHp\
pqIbbcJZZ[K\365\365\366L\322\322\323M\316\316\317N\313\313\314O\230\230\231P\
\202\202\203Q  \37R665S\332\332\331T\240\240\237U\211\211\210V\333]\tW\374y\"X\
\345\345\345Y\342\342\342Z\337\337\337[\333\333\333\\\324\324\324]\322\322\
\322^\314\314\314_\311\311\311`\303\303\303""a\277\277\277""b\213\213\213""c\
\206\206\206""dnnnemmmfbbbgPPPhAAAi888j***k&&&l\32\32\32m\26\26\26n\7\7\7o\1\
\1\1p\0\0\0",
"   %$AKD(           ",
"   pp\'p9p  ,        ",
"  pI#pl!]pcpp       ",
" pg!!.8d!pmY>p      ",
" ppo<!3pe +oZ4?    6",
"   Hp  Fp  pp!p@!   ",
"    p   p   nBMpL   ",
"Xb   R  Tp     pJ   ",
"fpj  \"         )p   ",
"p1p* h         2pO  ",
"i !ppp          pG  ",
" pN!p_          pU  ",
"p p!&!          Ep  ",
"Vp p!            p- ",
"VVp QkC          p. ",
"VWVp  :p         p  ",
"VWVVp  [p^       0p ",
"VWWVVp  \\pa       Pp",
"VWVpppp !Sp`       /",
"Vpp     =57p;      5"
};
static Fl_Pixmap image_move(idata_move);

void MeshToolsUI::cb_Camera_mode_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Move_mode->value(0);
Landmark_mode->value(0);
MT->Mesh_Set_Select_Mode(2);
Fl::focus(MT);
MT->redraw();
}
void MeshToolsUI::cb_Camera_mode(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Camera_mode_i(o,v);
}

static const char *idata_Move_mode2[] = {
"15 14 -4 1",
" \377\377\377!\346\273R\"\377\332\177#\0\0\0",
"#              ",
"!#             ",
"!!#            ",
"!\"!#           ",
"!\"\"!#          ",
"!\"\"\"!#    #    ",
"!\"!####  ###   ",
"!##       #    ",
"##     #  #  # ",
"#     #########",
"       #  #  # ",
"          #    ",
"         ###   ",
"          #    "
};
static Fl_Pixmap image_Move_mode2(idata_Move_mode2);

void MeshToolsUI::cb_Landmark_mode_i(Fl_Button* o, void*) {
  MT->Mesh_UnselectAll();
((Fl_Button *)o)->value(1);
Move_mode->value(0);
Camera_mode->value(0);
MT->Mesh_Set_Select_Mode(3);
MT->Landmark_Mode(0);
MT->redraw();
}
void MeshToolsUI::cb_Landmark_mode(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Landmark_mode_i(o,v);
}

static const char *idata_Landmarks2[] = {
"19 18 -42 1",
" \377\377\377!\310""eB\"\312iF#\315oM$\315pN%\320uS&\320vT\'\321wU(\322{Y)\
\300W6*\302Y8+\270J+,\250""5\32-\254""9\35.\256<\37/\260>!0\260?\"1\262""A#2\
\237*\23""3\241,\24""4\244/\26""5\243.\26""6\245""1\27""7\244""0\27""8\247""3\
\31""9\222\37\f:\224 \r;\227#\16<\226\"\16=\231%\17>\235(\22?\216\34\n@\220\
\35\13""A~\21\5""B\202\24\6""C\205\25\7""D\203\24\7""Ej\20\tF\206\202\202GVVVH\
444I\0\0\0",
"EE                 ",
" E.01              ",
"EEE./>             ",
" \'%*07D            ",
" &&\'(+?B           ",
" $#\"!)2AC          ",
"  -,8549DD         ",
"    35659BC        ",
"     4465@BC       ",
"       474:CD    FF",
"        477<CD FFGG",
"         476;CFFGGH",
"  III      76<6GHHH",
"  II         7=6HHH",
"  I          FHH6HH",
"            FGHHHHH",
"           FFHHHHHH",
"           FHHHHHHH"
};
static Fl_Pixmap image_Landmarks2(idata_Landmarks2);

void MeshToolsUI::cb_Source_mode_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Target_mode->value(0);
Flag_mode->value(0);
MT->Landmark_Mode(0);
MT->redraw();
}
void MeshToolsUI::cb_Source_mode(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Source_mode_i(o,v);
}

static const char *idata_Landmarks4[] = {
"19 19 -64 1",
" \377\377\377!\376\0\1\"oy:#nt9$nt:%ms:&ns:\'\217\225""1(tw9)ps9*pr9+qr9,qq9-\
|z7.sq8/rp80rq81qp82\202}43|n54}h45\246o\'6\216Z-7\244Y&8\232Q)9\242K%:\306?\
\25;\256?\37<\245;\36=\324:\23>\302""8\31?\270""9\34@\315(\24""A\354\33\tB\
\345\36\fC\351\21\bD\377\0\0""E\376\0\0""F\376\2\0G\375\0\0H\373\0\0I\366\0\0J\
\365\0\0K\364\0\0L\362\0\0M\360\0\0N\356\0\0O\355\0\0P\354\0\0Q\347\0\0R\345\
\0\0S\334\0\0T\332\0\0U\327\0\0V\326\0\0W\325\0\0X\324\0\0Y\376\1\1Z\376\3\1[\
\374\3\2\\\372\2\2]\365\7\3^\242\22\22_\241\22\22",
"     ^^            ",
"      ^            ",
"     ___           ",
"                   ",
"                   ",
"      XRLJKMV      ",
"     NDDDDDDDHS    ",
"   WEDDDDDDDDDDO   ",
"   GDDDDDDDDDDDDS  ",
"  ODDDDDDDDDDDDDD< ",
"  DDDDDDDDDDDDDD!;%",
" UDDDDDDDDDDDDDD\\9$",
" PDDDDDDDDDDDDDD]8&",
" IDDDDDDDDDDDDDD@4+",
" LDDDDDDDDDDDDDC6#/",
" QDDDDDDDDDDDDY?0,.",
" TDDDDDDDDDDD[>3*/.",
"  HDDDDDDDDFB7()//.",
" \':ZDDDDDA=52\"1//.-"
};
static Fl_Pixmap image_Landmarks4(idata_Landmarks4);

void MeshToolsUI::cb_Target_mode_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Source_mode->value(0);
Flag_mode->value(0);
MT->Landmark_Mode(1);
MT->redraw();
}
void MeshToolsUI::cb_Target_mode(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Target_mode_i(o,v);
}

static const char *idata_Landmarks6[] = {
"19 19 -24 1",
" \377\377\377!oy:\"nt9#nt:$ms:%ns:&\217\225""1\'tw9(ps9)pr9*qr9+qq9,|z7-sq8.r\
p8/rq80qp81\202}42|n53}h44\373\247\0""5\372\215\0""6\216Z-7\363p*",
"     44            ",
"      4            ",
"     444           ",
"                   ",
"                   ",
"      55555555     ",
"    544444444455   ",
"   5444444444445   ",
"  544444444444445  ",
"  5444444444444445 ",
" 54444444444444445$",
" 54444444444444445#",
" 54444444444444445%",
" 54444444444444453*",
" 5444444444444446\".",
" 544444444444445/+-",
"  44444444444452).-",
"  444444444457\'(..-",
" &54444444441!0..-,"
};
static Fl_Pixmap image_Landmarks6(idata_Landmarks6);

void MeshToolsUI::cb_Flag_mode_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Source_mode->value(0);
Target_mode->value(0);
MT->Landmark_Mode(2);
MT->redraw();
}
void MeshToolsUI::cb_Flag_mode(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Flag_mode_i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_Flag01[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,0,0,0,
0,255,0,0,231,255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,255,0,0,231,255,0,0,
231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,
0,0,0,0,255,0,0,231,0,0,0,0,255,0,0,231,255,255,255,255,255,0,0,231,0,0,0,0,
255,0,0,231,255,255,255,255,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,255,0,0,231,
255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,255,0,0,231,255,0,0,231,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,255,0,0,231,255,0,0,231,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,158,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,158,0,231,255,158,0,231,255,158,
0,231,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,104,0,255,255,
158,0,255,255,158,0,231,255,158,0,231,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,104,0,255,255,104,0,255,255,104,0,255,255,0,0,255,255,158,0,231,255,
158,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,15,0,255,255,15,0,255,255,0,0,255,255,
104,0,255,255,158,0,255,255,158,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,15,0,255,
254,15,0,255,255,15,0,255,255,104,0,255,255,104,0,255,255,158,0,231,255,158,0,
231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,254,15,0,255,254,15,0,255,254,15,0,255,255,15,0,255,255,
104,0,255,255,104,0,255,255,158,0,231,255,158,0,231,255,158,0,231,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,15,0,
255,254,15,0,255,254,15,0,255,255,15,0,255,255,104,0,255,255,104,0,255,255,158,
0,255,255,158,0,255,255,158,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Flag01(idata_Flag01, 19, 19, 4, 0);

void MeshToolsUI::cb_TRI_sort_0_i(Fl_Button*, void*) {
  Displaymode(4);
//MT->Mesh_Tri_Sort(0);
//MT->redraw();
}
void MeshToolsUI::cb_TRI_sort_0(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TRI_sort_0_i(o,v);
}

static const char *idata_Sort_vertices01[] = {
"19 19 -239 1",
" \377\377\377!\366&(\"\364&(#\345#&$\341#%%\334\"$&\326!#\'\325!#(\316 \")\
\310\37!*\307\37!+\301\36\37,\273\35\37-\260\33\34.\376(*/\361&(0\344$%1\323!#\
2\305\37 3\271\35\36""4\377)+5\377-/6\377""137\377\366\7""8\377\367\7""9\377\
\371\7:\377\373\7;\377\365\7<\376\355\6=\377\352\7>\377\356\7?\377\344\6@\377\
\351\7""A\376\340\5""B\377\336\6""C\377\337\6""D\377\340\6""E\377\342\6""F\
\376\340\6G\377\333\5H\377\334\6I\377\324\6J\377\326\6K\377\330\6L\377\320\6M\
\377\322\6N\377\322\7O\376\307\4P\377\307\5Q\377\314\6R\376\307\6S\377\301\5T\
\377\303\5U\377\305\5V\377\275\5W\377\300\5X\376\275\13Y\376\264\4Z\377\266\5[\
\377\267\5\\\377\260\4]\377\261\5^\377\263\5_\235i\0`\226""c\0""a\243l\1""b\
\240j\1""c\236i\1""d\235i\1""e\225""d\1""f\223""b\1g\217_\1h\216^\1i\212\\\1j\
\207Z\1k\206Z\1l\202W\1m\302\202\2n\262w\2o\255s\2p\255t\2q\254s\2r\200U\1s}S\
\1t|S\1u{R\1v{S\1wyQ\1xwO\1yvO\1zuO\1{rL\1|pJ\1}\335\224\3~\327\217\3\177\324\
\216\3\200\323\215\3\201\322\215\3\202\321\213\3\203\320\213\3\204\316\212\3\
\205\315\211\3\206\314\210\3\207\313\210\3\210\307\204\3\211\306\204\3\212\
\302\201\3\213\252r\2\214\251p\2\215\251q\2\216\246o\2\217\244n\2\220\243m\2\
\221\242m\2\222\237j\2\223\237k\2\224\236i\2\225\235i\2\226\233h\2\227\230""e\
\2\230\230""f\2\231\227""e\2\232\226""d\2\233\224""c\2\234\223""b\2\235\222""b\
\2\236\221""a\2\237\220`\2\240\217`\2\241\215^\2\242\214^\2\243\213]\2\244\
\212\\\2\245\211\\\2\246\206Z\2\247\204X\2\250\203W\2\251\202W\2\252\376\253\
\4\253\375\251\4\254\373\251\4\255\372\250\4\256\371\247\4\257\366\244\4\260\
\364\244\4\261\357\237\4\262\356\237\4\263\353\235\4\264\347\232\4\265\341\
\227\4\266\340\226\4\267\335\224\4\270\334\223\4\271\333\223\4\272\332\222\4\
\273\300\201\3\274\276~\3\275\276\177\3\276\275~\3\277\273}\3\300\272|\3\301\
\272}\3\302\271|\3\303\266y\3\304\266z\3\305\265y\3\306\264x\3\307\260u\3\310\
\252r\3\311\200V\2\312~T\2\313~U\2\314\205W\1\315\317\210\3\316\227""c\2\317\
\222`\2\320\202U\2\321\202V\2\322\323\213\4\323\264w\3\324\251o\3\325\337\222\
\5\326\306\202\4\327\270y\4\330\347\223\6\331\361\230\7\332uC\4\333q@\4\334o>\
\4\335\377\225\20\336\374\211\16\337\237U\b\340\223O\7\341zA\6\342x?\6\343\
\344z\f\344\275""e\n\345\270""a\n\346\252[\t\347\224O\b\350\207I\7\351\206G\7\
\352\303""f\13\353\264`\n\354\255[\n\355\241U\t\356\354\200\23\357\206""D\7\
\360\222K\b\361x>\7\362\343t\16\363\323j\r\364\311""f\f\365\264\\\13\366\251W\
\n\367\277""a\f\370\236Q\n\371\376\206\25\372\377\206\32\373\327l\21\374\325""\
b\22\375\311\\\21\376\300R\20\377\306L\23\0\272G\22\1\272""C\23\2\272""E\23\3\
\377""f%\4\326?\33\5\377Q%\6\366""D \7\316""4\35\b\354""6#\t\377@)\n\300)\34\
\13\265&\33\f\273!\35\r\256\34\34\16\377+*",
"      _i\332\334\333\314`      ",
"    btt\321\341\361\342\320vye    ",
"   kw\246\241\317\350\357\351\316\231\240\312r   ",
"  ju\244\235\230\224\340\360\347\324\213\216\223\242j  ",
" dx\245\234\226\220\214\337\370\355\327\277\300\304p\233""a ",
" z\247\236\226\217q\323\346\366\354\326\207\206\207\211\301\222 ",
"cy\243\227\221o\303\274\353\365\345\322\272\270\267\271\177\273m",
"rs\237\225\215\306\275\210\344\367\352\325\264\263\262\261\263\265\203",
"{\251\234\221\307\277\211\315\0\1\2\330\260\256\253\252\252\254\262",
"|\250\232\216\305\212\205~\13-\r\331\252\\^Z[[]",
"w\313\231\215\302\376\377\363\n,\f\362\374\375VSTUW",
"fy\232\213\276\364""2*)*2+3\373PQLIO",
" |\236\215\275\202\4\'&\'1(\7RMKHE ",
" h\311\216\275\200\343""0#0$%\356JB?>A ",
"  l\231\300\201\264\6!\"/\bND@;7  ",
"   g\310\204\264\336\16""4.\371""C=9:   ",
"    n\275\266\255\5""5\tK@8<    ",
"      }\257\335""6\372GF      ",
"        Y\3X        "
};
static Fl_Pixmap image_Sort_vertices01(idata_Sort_vertices01);

void MeshToolsUI::cb_TRI_sort_1_i(Fl_Button*, void*) {
  Displaymode(5);
//MT->Mesh_Tri_Sort(1);
//MT->redraw();
}
void MeshToolsUI::cb_TRI_sort_1(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_TRI_sort_1_i(o,v);
}

static const char *idata_Sort_vertices02[] = {
"19 19 -244 1",
" \377\377\377!\364&(\"\356%\'#\342#%$\335\"$%\317 \"&\302\36 \'\272\35\36(\
\267\34\36)\375(**\323!\"+\306\37 ,\377)+-\377+-.\377,./\377\366\7""0\377\367\
\7""1\377\371\7""2\377\373\7""3\377\365\7""4\376\355\6""5\377\352\7""6\377\
\356\7""7\377\344\6""8\377\351\7""9\376\340\5:\377\336\6;\377\337\6<\377\340\
\6=\377\342\6>\376\340\6?\377\334\6@\377\324\6""A\377\326\6""B\377\330\6""C\
\377\316\6""D\377\320\6""E\377\322\6""F\376\307\4G\377\307\5H\377\313\6I\377\
\314\6J\377\301\5K\377\302\5L\377\303\5M\377\305\5N\377\274\5O\377\275\5P\377\
\300\5Q\377\266\5R\377\267\5S\377\271\5T\377\261\5U\377\263\5V\377\264\5W\235i\
\0X\226""c\0Y\243l\1Z\240j\1[\236i\1\\\235i\1]\225""d\1^\223""b\1_\217_\1`\
\216^\1""a\213]\1""b\207Z\1""c\206Y\1""d\206Z\1""e\202W\1""f\302\202\2g\262w\
\2h\255s\2i\255t\2j\200U\1k~T\1l}S\1m|S\1n{R\1o{S\1pyQ\1qwO\1rvO\1suO\1trL\1up\
J\1v\335\224\3w\327\217\3x\324\216\3y\323\215\3z\322\215\3{\321\213\3|\320\
\213\3}\316\212\3~\315\211\3\177\314\210\3\200\313\210\3\201\310\206\3\202\
\306\204\3\203\252r\2\204\251q\2\205\246o\2\206\244n\2\207\243m\2\210\242m\2\
\211\237j\2\212\237k\2\213\235i\2\214\233h\2\215\231""f\2\216\230""e\2\217\
\230""f\2\220\227""e\2\221\226""d\2\222\224""c\2\223\223""b\2\224\222""a\2\
\225\222""b\2\226\221""a\2\227\220`\2\230\217`\2\231\215^\2\232\214^\2\233\
\213]\2\234\212\\\2\235\211\\\2\236\206Z\2\237\204X\2\240\203W\2\241\202W\2\
\242\376\253\4\243\375\251\4\244\374\254\4\245\373\247\4\246\373\251\4\247\
\372\250\4\250\371\245\4\251\366\244\4\252\364\242\4\253\357\237\4\254\356\
\237\4\255\355\236\4\256\353\235\4\257\347\232\4\260\346\231\4\261\344\231\4\
\262\341\227\4\263\340\226\4\264\337\224\4\265\335\224\4\266\334\223\4\267\
\333\223\4\270\332\222\4\271\300\201\3\272\276\177\3\273\275~\3\274\273}\3\
\275\272|\3\276\272}\3\277\271|\3\300\266z\3\301\265y\3\302\260u\3\303\252r\3\
\304\200V\2\305~T\2\306~U\2\307|Q\1\310\205W\2\311\252p\3\312\234g\3\313\366\
\241\5\314\304~\4\315\301~\4\316\263t\4\317\246j\3\320vK\2\321\341\220\5\322\
\205U\3\323\335\205\b\324\237^\5\325\265j\7\326\214S\5\327\213Q\5\330\330~\t\
\331\301q\b\332\255""e\7\333\246""a\7\334\303p\b\335\323x\n\336\220L\7\337yA\
\6\340\316m\13\341\270`\n\342\251Z\t\343\250X\t\344\324p\f\345\302""f\13\346\
\277""e\13\347\277""f\13\350\275""c\13\351\264_\n\352\241T\t\353\234R\t\354\
\221M\b\355\220K\b\356\204""D\7\357\263]\n\360\260[\n\361\256Z\n\362\255Y\n\
\363\233P\t\364\334r\r\365\311i\f\366\305""e\f\367\273`\13\370\266]\13\371\
\262Z\13\372\251V\n\373\246V\n\374\243T\n\375\230O\t\376\316i\r\377\312V\21\0\
\322X\23\1\331[\25\2\340_\26\3\350""c\30\4\363g\32\5\375k\34\6\377g\37\7\377V%\
\b\272""3\30\t\272""2\30\n\312$\37\13\275\"\35\f\370,\'\r\346)$\16\377/)\17\
\377""3-\20\377""60\21\377:1\22\326&\"\23\377""2/",
"      Wak\320\307""cX      ",
"    Zmm\241\310\337\322\237or]    ",
"   dp\236\231\224\326\356\327\215\220\230\305j   ",
"  bn\234\225\217\312\336\355\354\317\203\205\212\232""b  ",
" \\q\235\223\214\207\324\375\363\353\333\274\275\300i\222Y ",
" s\237\226\214\206\311\352\374\373\343\342\314\177\200\202\276\211 ",
"[r\233\216\210h\332\372\362\360\357\351\331\266\265\267x\271""f",
"jl\227\213\204\316\361\371\370\367\350\346\347\321\254\253\256\262|",
"t\241\223\210\302\325\341\334\345\366\365\330\335\323\243\242\242\246\254",
"u\240\221\205\301\315~w\340\376\344\313\242\244UQRRT",
"p\306\220\204\277\201x\264\377\t\b\364VSOJLMP",
"^r\221\203\273~\270\260\13\'(\0NKGID@F",
" u\226\204\272{\263\255\n+&\1MHEB?= ",
" `\304\205\272y\261\252\22*%\2""CA:769 ",
"  e\220\275z\257\250\r#$\3""A<83/  ",
"   _\303}\257\245\f!\"\4;512   ",
"    g\272\263\247\16,)\5""804    ",
"      v\251\17.-\6>      ",
"        \21\20\23\7       "
};
static Fl_Pixmap image_Sort_vertices02(idata_Sort_vertices02);

void MeshToolsUI::cb_Grid_i(Fl_Button*, void*) {
  MT->ShowGrid();
MT->redraw();
}
void MeshToolsUI::cb_Grid(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Grid_i(o,v);
}

static const char *idata_grid3[] = {
"20 20 -4 1",
"!\332\37!\"\363p*#\356N7$\0\0\0",
"$$$$$$!!!$$$$$\"$$$$$",
"$$$$$$$$!$$$$\"\"$$$$$",
"$$$$$$$!$$$$\"$\"$$$$$",
"$$$$$$!$$$$\"$$\"$$$$$",
"$$$$$$!!!$\"\"$\"\"$#$#$",
"$$$$$$$$$\"$\"\"$\"$#$#$",
"$$$$$$$$\"$$\"$$\"$$#$$",
"$$$$$$$\"\"$\"\"$$\"$$#$$",
"$$$$$$\"$\"\"$\"$\"\"$$#$$",
"$$$$$\"$$\"$$\"\"$\"$$$$$",
"$$$$$\"$\"\"$$\"$$\"$$$$$",
"$$$$$\"\"$\"$\"\"$$\"$$$$$",
"$$#$#\"$$\"\"$\"$\"$$$$$$",
"$$#$#\"$$\"$$\"\"$$$$$$$",
"$$$#$\"$\"\"$$\"$$$$$$$$",
"##$#$\"\"$\"$\"$!!!$$$$$",
"$$$#$\"$$\"\"$$$$!$$$$$",
"$$$$$\"$$\"$!!$!$$$$$$",
"$$$$$\"$\"$$$$!$$$$$$$",
"$$$$$\"\"$$$$$!!!$$$$$"
};
static Fl_Pixmap image_grid3(idata_grid3);

void MeshToolsUI::cb_Bt_move_up_i(Fl_Button*, void*) {
  MT->Object_Move_Up();
MT->Landmark_Move_Up();
MT->redraw();
}
void MeshToolsUI::cb_Bt_move_up(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_move_up_i(o,v);
}

static const char *idata_s_dessous_17[] = {
"16 16 -5 1",
" \377\377\377!))(\"\31\24\1#\373\247\0$~~~",
"                ",
"                ",
"                ",
"      !\"$       ",
"     !\"#\"$      ",
"    !\"###\"$     ",
"   !\"#####\"$    ",
"  !\"#######\"$   ",
" !\"#########\"$  ",
" \"###########\"  ",
" \"\"\"\"\"\"\"\"\"\"\"\"\"  ",
"                ",
"                ",
"                ",
"                ",
"                "
};
static Fl_Pixmap image_s_dessous_17(idata_s_dessous_17);

void MeshToolsUI::cb_Bt_move_down_i(Fl_Button*, void*) {
  MT->Object_Move_Down();
MT->Landmark_Move_Down();
MT->redraw();
}
void MeshToolsUI::cb_Bt_move_down(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_move_down_i(o,v);
}

static const char *idata_s_dessus_17[] = {
"16 16 -5 1",
" \377\377\377!))(\"\31\24\1#\373\247\0$~~~",
"                ",
"                ",
"                ",
"                ",
"                ",
"  \"\"\"\"\"\"\"\"\"\"\"\"\" ",
"  \"###########\" ",
"  $\"#########\"! ",
"   $\"#######\"!  ",
"    $\"#####\"!   ",
"     $\"###\"!    ",
"      $\"#\"!     ",
"       $\"!      ",
"                ",
"                ",
"                "
};
static Fl_Pixmap image_s_dessus_17(idata_s_dessus_17);

void MeshToolsUI::cb_Bt_light_right_i(Fl_Button*, void*) {
  MT->SetLightPosition(5);
MT->redraw();
}
void MeshToolsUI::cb_Bt_light_right(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_light_right_i(o,v);
}

static const char *idata_s_right_17[] = {
"20 13 -117 1",
" \377\377\377!./\0\"GF\0#88\0$77\0%66\0&22\0\'11\0(//\0)..\0*_^\1+]\\\1,LK\1-\
BA\1.qp\2/\217\215\3""0\216\214\3""1\213\211\3""2\211\207\3""3\246\244\4""4\
\236\234\4""5\230\227\4""6\353\350\7""7\347\344\7""8\343\340\7""9\333\330\6:\
\332\327\6;\327\324\6<\326\323\6=\324\321\6>\321\316\6?\314\311\6@\313\310\6""\
A\310\305\6""B\265\263\5""C\252\250\5""D\377\375\bE\377\376\bF\377\377\bG\376\
\373\bH\376\374\bI\375\372\bJ\374\372\bK\373\370\bL\372\367\bM\370\365\bN\377\
\377\tO54\0Pca\1Qb`\1RXV\1STR\1TKI\1Uwu\2Vhe\2W\337\327\5X\230\224\3Y\203\201\
\3Zeb\2[\345\337\6\\\340\333\6]\336\332\6^\324\315\5_\316\310\5`\306\300\5""a\
\304\301\5""b\300\275\5""c\272\267\5""d\251\246\4""e\225\221\4""f\177}\3g\362\
\356\7h\361\355\7i\360\354\7j\356\352\7k\355\346\7l\354\350\7m\353\344\7n\353\
\347\7o\347\337\7p\341\335\7q\331\325\6r\266\263\5s\263\260\5t\260\255\5u\257\
\254\5v\372\366\bw\367\362\bx\367\363\by\366\362\bz\361\355\b{\305\272\4|\227\
\216\3}\222\213\3~\344\331\6\177\323\307\5\200\306\276\5\201\326\315\6\202\
\320\305\6\203\205z\2\204\315\277\4\205}s\2\206\335\313\5\207\315\275\5\210\
\332\312\6\211\247\226\3\212\243\225\3\213\311\265\4\214\302\260\4\215\227\
\210\3\216\317\270\4\217\272\242\3\220\271\243\3\221\270\241\3\222\236\214\3\
\223\236\215\3\224\233\212\3",
"                    ",
"      \213\204^][~\206       ",
"    \212}Xu@pzKJk\177     ",
"  \215-,U4b9iGFFNNF\201   ",
" \205!&RYC?7vFNNNNNFM\217 ",
"\224()%*1s=jHFNNNNNNFm\220",
"Z()#P/r;hDNNNNNNNFH`",
"V()$Q0B<iDNNNNNNNFH\200",
"\222()O+2t>lIFNNNNNFFo\221",
" \203!\'Sf3A8xFFNNNNFg  ",
"  \223T\".5c<6LEFFFF\202   ",
"    \211|eda:nywo\207     ",
"      \214{_q\\W\210\216      "
};
static Fl_Pixmap image_s_right_17(idata_s_right_17);

void MeshToolsUI::cb_Bt_light_left_i(Fl_Button*, void*) {
  MT->SetLightPosition(6);
MT->redraw();
}
void MeshToolsUI::cb_Bt_light_left(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_light_left_i(o,v);
}

static const char *idata_s_left_17[] = {
"20 13 -107 1",
" \377\377\377!FE\0\"CB\0#<<\0$66\0%//\0&..\0\'a`\1(PO\1)ON\1*ML\1+KJ\1,rq\2-n\
m\2.\211\210\3/fe\2""0\335\332\6""1\277\275\5""2\247\245\4""3\246\244\4""4\
\243\241\4""5\241\237\4""6\233\231\4""7\227\225\4""8\377\374\7""9\353\350\7:\
\350\345\7;\345\342\7<\344\341\7=\343\340\7>\342\337\7?\331\326\6@\322\317\6""\
A\321\316\6""B\314\311\6""C\313\310\6""D\312\307\6""E\307\304\6""F\255\253\5G\
\217\215\4H\377\375\bI\377\377\bJ\376\373\bK\376\374\bL\374\371\bM\373\370\bN\
\331\326\7O\377\377\tPli\0Qkh\0RFD\0SB@\0T<;\0U98\0V0/\0W\310\301\3X\334\330\
\4Y\330\324\4Zzx\2[xv\2\\\364\353\5]\361\351\5^\353\347\5_\346\342\5`\373\362\
\6""a\373\363\6""b\300\275\5""c\273\270\5""d\271\266\5""e\244\240\4""f\237\
\234\4g~|\3h}{\3i\377\371\7j\377\373\7k\375\366\7l\360\354\7m\350\344\7n\347\
\343\7o\305\302\6p\263\260\5q\372\366\br\370\364\bs\365\361\bt\364\360\bu\362\
\356\bvb\\\0wYU\0x\315\304\3y\217\211\2z\367\351\5{\221\213\3|\377\364\6}\376\
\360\6~\213\201\1\177\211\200\1\200\300\260\2\201\272\254\3\202\372\352\5\203\
\375\352\6\204\377\346\5\205\377\350\5\206\375\343\5\207\375\347\5\210\373\
\344\5\211\373\340\5\212\372\335\5",
"                    ",
"       \202\\^Xx\200       ",
"    \205|jJr9Nbe{\177     ",
"  \204""8IOOIIq:ApG/#w   ",
" \203IIOOOOIHt016,!&$  ",
"\211IIOOOOOOIq<E4Z*%%S ",
"aIIOOOOOOILmC2g(V%%Q",
"`IIOOOOOOIMnD3h)%%%P",
"\212IIOOOOOOIr>o5[+&%R ",
" \207IIOOOOIJl?c7-\"&T  ",
"  \206iIIIIKs=BF.\'Uv   ",
"     }kqu;@dfy~     ",
"      \210z]_YW\201       "
};
static Fl_Pixmap image_s_left_17(idata_s_left_17);

void MeshToolsUI::cb_Bt_light_face_i(Fl_Button*, void*) {
  MT->SetLightPosition(1);
MT->redraw();
}
void MeshToolsUI::cb_Bt_light_face(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_light_face_i(o,v);
}

static const char *idata_s_face_17[] = {
"20 13 -119 1",
" \377\377\377!ik\0\"jk\0#\\]\0$\377\375\0%\377\377\0&\376\374\0\'\375\372\0(\
\371\366\0)\247\245\0*\245\243\0+\223\221\0,\222\220\0-\211\207\0.{z\0/zy\0""0\
kj\0""1ji\0""2\371\365\0""3\370\363\0""4\366\361\0""5\364\357\0""6\362\355\0""\
7\361\353\0""8\361\354\0""9\360\352\0:\357\352\0;\355\347\0<\352\343\0=\350\
\341\0>\350\342\0?\347\340\0@\343\334\0""A\340\330\0""B\340\332\0""C\334\325\
\0""D\333\323\0""E\332\322\0""F\327\320\0G\324\314\0H\321\313\0I\316\310\0J\
\305\276\0K\304\275\0L\303\274\0M\273\264\0N\272\263\0O\267\262\0P\264\261\0Q\
\260\252\0R\252\245\0S\251\244\0T\250\243\0U\234\227\0V\233\226\0W\230\223\0X\
\223\216\0Y\214\207\0Z\213\207\0[\211\205\0\\\211\206\0]\207\203\0^\207\204\0_\
{w\0`xt\0""awt\0""bro\0""col\0""ddb\0""eca\0""f^\\\0g\322\313\1h\316\305\0i\
\312\302\0j\307\277\0k\261\246\0l\231\223\0mxr\0n\340\327\1o\327\316\1p\240\
\227\2q\235\225\2r\272\256\0s\263\246\0t\256\242\0u\202w\0v\177w\0w\341\316\1x\
\306\266\1y\301\264\1z\342\323\2{zq\1|\241\220\0}ka\0~g^\0\177\342\313\1\200\
\315\267\1\201\251\231\1\202\201u\1\203\264\241\2\204\266\240\0\205\262\236\0\
\206\247\221\0\207\345\312\2\210\325\274\2\211\352\310\1\212\304\245\0\213\
\300\242\0\214\274\235\0\215\266\231\0\216\265\225\0\217\245\210\0\220\235\
\202\0\221\341\272\1\222\337\272\1\223\301\234\0\224\274\232\0\225\273\230\0\
\226\346\273\1",
"                    ",
"      \212\204sjow\207       ",
"    \215|kG<67@iy\200     ",
"  \216v+O@&%%%%3H)-\201   ",
" \220![RE$%%%%%%4JU.c\226 ",
"\225#`XM8%%%%%%%%CT]0{\222",
"~d_lJ(%%%%%%%%>QYbfq",
"}e_WK2%%%%%%%%=QZbfp",
"\223#aXN9%%%%%%%%DT]1\202\221",
" \217\"^SF&%%%%%%5LV/m  ",
"  \224u,PB\'%%%%4I*\\\203   ",
"    \214\206th?:;Aix\210     ",
"      \213\205rgnz\177\211      "
};
static Fl_Pixmap image_s_face_17(idata_s_face_17);

void MeshToolsUI::cb_Bt_light_back_i(Fl_Button*, void*) {
  MT->SetLightPosition(2);
MT->redraw();
}
void MeshToolsUI::cb_Bt_light_back(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_light_back_i(o,v);
}

static const char *idata_s_back_18[] = {
"20 13 -143 1",
" \377\377\377!\"$\0\"*,\0#(*\0$\')\0%$&\0&45\0\'-.\0(*+\0))*\0*\203\201\0+ji\
\0,ih\0-cb\0.ba\0/bb\0""0_^\0""1^]\0""2[Z\0""3XW\0""4WV\0""5VU\0""6SR\0""7QP\
\0""8LK\0""9KJ\0:JI\0;IH\0<HH\0=GF\0>CB\0?A@\0@99\0""A77\0""B55\0""C00\0""D//\
\0""E..\0""F,,\0G++\0H\240\236\1I\230\226\1J\227\225\1K\226\224\1L\223\221\1M\
\222\220\1N\216\216\1O\214\212\1P\213\211\1Q\212\210\1R\211\207\1S\211\211\1T\
\210\206\1U\204\202\1V\204\203\1W\325\322\2X\324\321\2Y\305\302\2Z\304\301\2[\
\303\300\2\\\271\267\2]\266\264\2^\265\263\2_\264\262\2`\263\261\2""a\257\255\
\2""b|{\1""c{z\1""dvu\1""eon\1""fnm\1g\252\251\2h\251\247\2i\246\244\2j\207\
\204\0kjh\0lig\0mfc\0ndb\0o^\\\0p][\0qXV\0rTR\0sB@\0t<;\0u21\0v10\0w\350\341\
\1x\346\341\1y\346\342\1z\247\244\1{\246\243\1|\245\242\1}\242\237\1~\234\231\
\1\177\232\227\1\200\201\177\1\201\326\322\2\202\324\315\2\203\323\317\2\204\
\320\314\2\205\313\307\2\206\301\276\2\207\277\274\2\210\261\256\2\211~|\1\
\212}{\1\213{y\1\214wu\1\215us\1\216pn\1\217\247\244\2\220\232\221\0\221\221\
\213\0\222\205\177\0\223}x\0\224xs\0\225qk\0\226ql\0\227kf\0\230SO\0\231KH\0\
\232\352\334\1\233\346\335\1\234\313\302\2\235\254\237\0\236\230\214\0\237\
\212\200\0\240\210~\0\241xp\0\242\\V\0\243\347\327\1\244\331\313\1\245\320\
\277\1\246\271\245\0\247\265\244\0\250\254\232\0\251\243\223\0\252\356\327\1\
\253\314\262\0\254\307\256\0\255\305\255\0\256\274\246\0",
"                    ",
"       \235\221*j\220\247       ",
"    \246\237m65q46r\226\236     ",
"  \256\231&<51.-.148@\"\241   ",
" \251!v=4/kf\216""f+-3;B$A  ",
"\254%E@7-e\214""c\212\213\214""en6tE)\230 ",
"\227""FE?p\216\212VRQTUb\216o>DD\'\224",
"\225GD:,\211PLJIKMQ\212l9CDE\223",
"\253%CrdO\177}{i|HIQ\215""6u$\242 ",
" \250#2U~h\210_^`azI\200""2(s  ",
"  \255\222Ng\\\206ZY[\207]\217S0\240   ",
"     \244\202\203W\201X\204\205\234\245     ",
"      \252\232wyx\233\243       "
};
static Fl_Pixmap image_s_back_18(idata_s_back_18);

void MeshToolsUI::cb_Bt_light_above_i(Fl_Button*, void*) {
  MT->SetLightPosition(4);
MT->redraw();
}
void MeshToolsUI::cb_Bt_light_above(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_light_above_i(o,v);
}

static const char *idata_s_dessus_18[] = {
"20 13 -106 1",
" \377\377\377!\"$\0\"#%\0#BC\0$78\0%12\0&,-\0\'LK\0(<<\0)77\0*55\0+\216\214\
\1,``\1-\206\204\2.\204\202\2/TT\1""0RQ\1""1\241\240\3""2\240\236\3""3uu\2""4l\
l\2""5\341\336\5""6\340\335\5""7\305\302\4""8\276\274\4""9\261\257\4:\222\220\
\3;\221\217\3<\211\207\3=\377\375\6>\375\373\6?\373\370\6@\372\370\6""A\370\
\365\6""B\370\366\6""C\365\362\6""D\362\357\6""E\357\356\6""F\356\353\6G\353\
\350\6H\314\311\5I\314\313\5J\377\374\7K\377\375\7L\377\376\7M\377\377\7N\375\
\373\7O\377\377\bP\377\376\tQ\377\377\tR\225\220\0Svr\0The\0U@?\0V\220\215\1Wq\
n\1X`^\1Y\251\246\3Z\200~\2[\177}\2\\{y\2]zx\2^xv\2_tr\2`\377\367\5""a\344\
\340\5""b\336\332\5""c\310\304\4""d\301\276\4""e\300\275\4""f\273\270\4g\270\
\265\4h\265\262\4i\256\253\4j\377\372\6k\375\371\6l\356\352\6m\323\317\5n\322\
\316\5o\320\314\5p\313\307\5q\247\244\4r\231\223\0s\177x\0t|v\0uoj\0vZU\0wXT\
\0xvp\1yup\1z\377\363\4{\376\360\4|\370\355\4}\253\236\0~\244\231\0\177\222\
\207\0\200\204{\0\201\376\353\3\202\272\247\0\203\243\224\0\204\316\274\1\205\
\362\332\2\206\314\262\0\207\311\260\0\210\304\254\0\211\255\232\0",
"                    ",
"       zjL=`{       ",
"    \201`JQQQQQPjz     ",
"  \205kOOQQQQQQQOOM|   ",
" \204I>OOQQQQQQQOOMEg  ",
"\207""4dCMOOQQQQQOOOMa1x ",
"T/q5LOOOQQQOOOMBH<(S",
"u*[eFMOOOOOOOMNbYX&t",
"\206!\':clKMOOOMM?6h^%v ",
" \211\"0;8bD@NNAGmi]$U  ",
"  \210w#32fpno79;,)\200   ",
"     \177y_Z-.\\Ws\203     ",
"      \202~R+Vr}       "
};
static Fl_Pixmap image_s_dessus_18(idata_s_dessus_18);

void MeshToolsUI::cb_Bt_light_below_i(Fl_Button*, void*) {
  MT->SetLightPosition(3);
MT->redraw();
}
void MeshToolsUI::cb_Bt_light_below(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_light_below_i(o,v);
}

static const char *idata_s_dessous_18[] = {
"20 13 -102 1",
" \377\377\377!!$\0\"!#\0#&(\0$=>\0%+,\0&\'(\0\'RQ\0(LK\0)KK\0*?\?\0+99\0,77\
\0-66\0.++\0/`_\1""0\222\220\2""1UT\1""2OO\1""3\200\177\2""4ts\2""5qp\2""6pp\
\2""7on\2""8\332\327\5""9\306\303\4:\305\302\4;\273\271\4<\231\227\3=\231\230\
\3>\222\220\3?\216\214\3@\377\375\6""A\376\375\6""B\375\375\6""C\371\367\6""D\
\367\364\6""E\356\353\6""F\322\320\5G\320\316\5H\310\305\5I\377\376\7J\377\
\377\7K\376\374\7L\376\376\7M\377\376\bN\377\377\bO\377\376\tP\377\377\tQ{x\0R\
zx\0Sie\0TOM\0UHF\0V`^\1WYW\1X\226\223\2Y\251\246\3Z\200~\2[rp\2\\pn\2]\377\
\370\5^\376\365\5_\376\370\5`\344\340\5""a\333\327\5""b\310\304\4""c\304\301\
\4""d\302\277\4""e\301\276\4""f\263\260\4g\217\214\3h\377\370\6i\377\373\6j\
\360\354\6k\356\352\6l\214\204\0m\210\202\0n|w\0oxs\0poi\0qd`\0rc_\0sSO\0t\
\377\360\3u\353\335\3v\377\363\4w\376\362\4x\241\225\0y\222\206\0z\200w\0{xp\
\0|_Y\0}\376\353\2~\264\241\0\177\252\232\0\200\243\223\0\201\325\300\1\202\
\316\263\0\203\307\256\0\204\274\246\0\205\365\332\1",
"                    ",
"       xmRQl\177       ",
"    ~zq/\\47VTry     ",
"  \204U$\\<fe9ef=[*&{   ",
" \200!2?;8EDCDEa;g\'#,  ",
"\203\")>bkAJJJJJAkH0(#s ",
"S-3djJJNNNNNJJjdZ+%o",
"p1Y`IJNNNNNNNJI`YW.n",
"\202""6cDJNNNPPPNNNJD:5| ",
" \201GBJNNPPPPPNNJKFX  ",
"  \205_NNNPPPPPNNNLu   ",
"     viOPPPOMht     ",
"      }^iI@]w       "
};
static Fl_Pixmap image_s_dessous_18(idata_s_dessous_18);

void MeshToolsUI::cb_Bt_pos_left_i(Fl_Button*, void*) {
  MT->Set_Grid_Plane(1);
MT->SetPosition(5);
MT->redraw();
}
void MeshToolsUI::cb_Bt_pos_left(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_pos_left_i(o,v);
}

static const char *idata_left2[] = {
"19 19 -182 1",
" \377\377\377!\332\36!\"\332\37!#\332 !$\334\30!%\333\32\"&\331\32!\'\336\33\
\"(\332\33!)\331\33!*\340\34\"+\333\34!,\327\24!-\332\27!.\377\277%/\377\300%0\
\377\303%1nO\f2\377\271$3\377\272$4\377\273$5\377\274$6\377\275%7\377\276%8\
\277\210\27""9\220""e\22:\340\235\35;\377\265\"<\377\264#=\377\265#>\377\266#?\
\377\267#@\377\267$A\201Y\17""B\312\212\31""C\262{\26""D\375\261 E\373\254 F\
\355\244\36G\354\243\36H\352\240\36I\344\236\35J\342\235\35K\337\230\34L\333\
\225\34M\323\223\33N\377\256!O\377\257!P\360\246\37Q\321\221\33R\377\257\"S\
\377\260\"T\377\261\"U\377\262\"V\377\263\"W\377\263#X\\=\nYU9\tZT8\t[S7\t\\jG\
\f][<\n^[=\n_P5\t`zR\16""axP\16""brL\rcqK\rdiF\fea@\13""f^?\13gX:\nhX;\niW:\nj\
M3\tk\225""d\22l\205Y\20m\200U\17n|S\17owO\16plI\rq\301\201\30r\272}\27s\271|\
\27t\243m\24u\234h\23v\233g\23w\232g\23x\231""f\23y\224""c\22z\222""b\22{\214]\
\21|\212]\21}\211\\\21~{R\17\177rL\16\200""cB\f\201\373\250 \202\372\250 \203\
\371\247 \204\365\245\37\205\364\243\37\206\363\242\37\207\361\242\37\210\355\
\236\36\211\355\237\36\212\353\236\36\213\352\235\36\214\345\232\35\215\344\
\231\35\216\342\230\35\217\341\227\35\220\336\225\34\221\334\224\34\222\333\
\223\34\223\325\217\33\224\320\214\32\225\317\213\32\226\315\212\32\227\314\
\211\32\230\313\210\32\231\307\206\31\232\305\205\31\233\303\203\31\234\300\
\201\30\235\267{\27\236\266z\27\237\264x\27\240\264y\27\241\257u\26\242\257v\
\26\243\255t\26\244\254t\26\245\250p\25\246\250q\25\247\237k\24\250\235i\24\
\251\230""e\23\252\220""a\22\253\216_\22\254\377\254!\255\377\255!\256\376\
\253!\257\375\252!\260\374\251!\261\367\245 \262\366\245 \263\357\240\37\264\
\356\237\37\265\356\240\37\266\346\232\36\267\337\225\35\270\335\224\35\271\
\321\215\33\272\377\255\"\273\323\211\33\274\305~\31\275\326\214\34\276\265r\
\27\277\370\235#\300\303u\31\301\321~\33\302\370\227\"\303\340{\36\304\313m\
\33\305\357y!\306\335""e\36\307\272N\31\310\355""f!\311\331^\36\312\335U\37\
\313\327O\36\314\342T \315\320G\35\316\256:\30\317\316""C\35\320\324.\37\321\
\313+\36\322\331* \323\323+\37\324\330\' \325\330# ",
"                   ",
"      _Zh^X]g[j    ",
"    Yedco`n~a\177\\fi  ",
"   \200""cnl\253yxvw\251z|mb  ",
"  p~}k\247\245\241\237\236\236\240\242\246\250\252m ",
" 1A9\247\244\235\234\231\227\225\224\225\230\233s\243u{",
" \316\321\307""Cq\227\223\221\217\215\214\215\217\222\271\232\236t",
" *\'+\304Q\270\266\264\206\262\261\261\205\265\266\222\227r",
" \325\"-\311:\212\205\201\256NON\272\257\261\210\267\226",
" \323$&\303G\262\256RU<=><UN\201\263\220",
" \320\322\306H\204\256SW?2333@<;DF",
"\276\274\275I\207\260RW?2466644\302\310 ",
"\317""BL\213\262\254T=246...0\277#, ",
"\324\301K\211\203\255V?357./.     ",
"\300\273\216\263\202N             ",
"8MJPE              ",
"\315\313\312\314\305              ",
"%(!)               ",
"                   "
};
static Fl_Pixmap image_left2(idata_left2);

void MeshToolsUI::cb_Bt_pos_right_i(Fl_Button*, void*) {
  MT->Set_Grid_Plane(1);
MT->SetPosition(6);
MT->redraw();
}
void MeshToolsUI::cb_Bt_pos_right(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_pos_right_i(o,v);
}

static const char *idata_right2[] = {
"19 19 -180 1",
" \377\377\377!\331\35!\"\332\36!#\333\37!$\332\37!%\331\30!&\335\32\"\'\334\
\32!(\331\32!)\331\33!*\332\34!+\330\25!,\333\27!-\377\302$.\377\277%/\377\
\300%0\377\301%1\377\272#2\377\273#3\377\275#4\377\271$5\377\272$6\377\273$7\
\377\274$8\377\274%9\377\275%:\377\276%;\371\257\37<\313\217\31=\272\202\27>\
\214""c\21?\376\263!@\377\266\"A\377\270\"B\377\264#C\377\265#D\377\266#E\377\
\267#F\377\270#G\377\270$H\240m\23I\376\261 J\361\245\37K\333\227\34L\323\222\
\33M\257z\26N\377\256!O\377\257!P\376\260!Q\377\260\"R\377\261\"S\377\262\"T\
\377\263#U]>\nV\\=\nWU8\tXT8\tYkG\fZbB\13[Z<\n\\Y;\n]I1\b^\203X\17_zQ\16`qK\ra\
pK\rbiF\fcaA\13""d`@\13""eV:\nfO4\tgN4\th\215^\21i\215_\21j\205Y\20k\200V\17l}\
S\17m|S\17nwO\16ouN\16ptN\16qlH\rr\301\201\30s\262x\26t\261w\26u\253s\25v\242l\
\24w\233h\23x\231""f\23y\224""b\22z\224""c\22{\223""c\22|\203W\20}{R\17~zQ\17\
\177\373\250 \200\372\250 \201\364\243\37\202\363\243\37\203\362\242\37\204\
\353\236\36\205\352\235\36\206\346\232\35\207\345\232\35\210\344\231\35\211\
\342\227\35\212\341\227\35\213\337\225\34\214\334\223\34\215\334\224\34\216\
\333\223\34\217\324\216\33\220\323\215\33\221\320\214\32\222\317\213\32\223\
\317\214\32\224\315\211\32\225\314\210\32\226\312\210\32\227\307\206\31\230\
\305\203\31\231\305\204\31\232\304\203\31\233\277\200\30\234\277\201\30\235\
\274~\30\236\267z\27\237\266y\27\240\266z\27\241\265y\27\242\264x\27\243\257u\
\26\244\247p\25\245\246n\25\246\244n\25\247\240k\24\250\237j\24\251\236j\24\
\252\220`\22\253\207[\21\254\377\255!\255\376\253!\256\376\254!\257\375\252!\
\260\367\245 \261\366\244 \262\365\243 \263\365\245 \264\357\242\37\265\355\
\237\37\266\350\234\36\267\337\226\35\270\321\214\33\271\252r\26\272\376\253\"\
\273\374\242!\274\366\237 \275\346\221\36\276\363\225 \277\371\225\"\300\345\
\204\36\301\364\215#\302\357\204 \303\341}\36\304\362}!\305\356s \306\316""b\
\34\307\352""c\"\310\326U\36\311\352^!\312\351^#\313\345T \314\344U \315\277""\
C\33\316\337/!\317\322/\37\320\334/!\321\331, \322\336.!\323\332#!",
"                   ",
"    ]fX\\VUV[e      ",
"  gWdb`n}lm_pqc[   ",
"  Za}jizxwwxzh|o   ",
" Y~\253z\250\244\243\242\236\236\241t\271\247{^  ",
" k\252\251u\240\234\227\224\223\221\222\225\231\235MH> ",
"|z\246s\233\226\217\216\212\210\206\207\211\215L\306\317\315 ",
"y\245\237\232\270\214\207\265\203\261\260\260\262J\300#\'& ",
"v\242\230\220\267\205\202\200\255\254OON?\305+$\323 ",
"\243r\270\213\204\263\257NRBCDCA\277\"+\321 ",
"=<K\266\201\257QTDG555G1\304\316\320 ",
" \310\303\264\177NTD46899642\256\274\275",
" ,*\302PQCG69:..:7GCI\314",
"     SD47:.//.95F\273\322",
"             .96E\272\276",
"              0-3@;",
"              \301\312\307\311\313",
"               (!)%",
"                   "
};
static Fl_Pixmap image_right2(idata_right2);

void MeshToolsUI::cb_Bt_pos_face_i(Fl_Button*, void*) {
  MT->Set_Grid_Plane(0);
MT->SetPosition(1);
MT->redraw();
}
void MeshToolsUI::cb_Bt_pos_face(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_pos_face_i(o,v);
}

static const char *idata_front2[] = {
"19 19 -188 1",
" \377\377\377!\333\35!\"\332\35!#\332\36!$\332\37!%\330\31!&\333\32\"\'\330\
\32!(\331\33!)\332\34!*\332\24!+\331\24!,\331\25!-\336\27\".\334\30\"/\330\27!\
0\333\30\"1\327\22!2\330\23!3\377\275 4\377\302+5\377\303+6\377\304+7\377\277+\
8\377\300+9\277\206\26:\275\205\26;\244s\23<\372\263\36=\312\215\30>\260{\25?\
\377\264\37@\377\265\37""A\377\267\37""B\377\263 C\377\264 D\377\265 E\377\
\267 F\377\264!G\377\266!H\377\267!I\377\270)J\377\271)K\377\272)LY<\tM\264{\
\25N\257w\24O\224""d\21P\352\237\34Q\337\230\33R\327\222\32S\324\222\31T\320\
\220\31U\263|\25V\262|\25W\252v\24X\251s\24Y\242n\23Z\225""e\22[\377\257\37\\\
\374\255\37]\366\247\36^\357\242\35_\265{\26`\377\256 a\377\261 b\377\262 c\
\375\254 d\377\262$e\377\263$f@*\6gE.\7ha@\niN3\bjD-\7kC,\7lnI\fmfC\13neC\13o^\
?\np\\=\nqU9\trS7\ts\216^\20t~S\16uvN\rvdB\13w\274~\26x\254q\24y\245n\23z\244m\
\23{\243l\23|\232""f\22}\223""b\21~\222""b\21\177\204W\17\200\201V\17\201zQ\
\16\202iE\f\203\372\247\36\204\360\241\35\205\350\234\34\206\337\225\33\207\
\330\220\32\210\320\214\31\211\313\207\30\212\311\206\30\213\301\200\27\214\
\300\200\27\215\276\177\27\216\270{\26\217\240k\23\220\240l\23\221\237k\23\
\222\235h\23\223\230""e\22\224\210[\20\225\207Z\20\226\206Y\20\227\205Y\20\
\230~T\17\231uN\16\232\377\254\37\233\376\252\37\234\366\245\36\235\363\243\
\36\236\356\237\35\237\347\233\34\240\347\234\34\241\344\227\34\242\344\230\
\34\243\333\222\33\244\326\220\32\245\324\216\32\246\305\205\30\247\376\253!\
\250\364\244 \251\375\252\"\252\360\241 \253\375\253#\254\351\226\35\255\333\
\215\33\256\373\244 \257\374\246!\260\373\245%\261\373\247%\262\310~\30\263\
\302z\27\264\275u\27\265\371\236%\266\315~\31\267\371\226 \270\370\224\37\271\
\365\220\37\272\370\224 \273\364\203 \274\361z \275\360v!\276\353m\37\277\333""\
e\35\300\313""a\33\301\355j \302\307R\33\303\353""e%\304\352""c%\305\335V\36\
\306\325T\35\307\317Q\34\310\347Y \311\350[$\312\326L\36\313\314H\34\314\350T!\
\315\347P!\316\343Q \317\346L \320\335K\37\321\346N$\322\340""F \323\344I#\
\324\343""B!\325\324""9\37\326\341:!\327\337""3 \330\332& \331\332\'!\332\332$\
!\333\332%!",
"       kjgkf       ",
"     rLhnmvoqi     ",
"    vl\201\200\227\226\177\230\231\202p    ",
"    ts\223\217zy{\222}\225u    ",
"   \224|XMw\214\213\215\216NY~\230   ",
"   \221V\263\266SR\207\244T\262\264WZ   ",
"  \220_\307\331\332\320\254P\205\305\330\333\313xO  ",
"  >\300.)\"2\310<\276+)!-\302;  ",
"  9\312""0$$%\326?\317/$$&\325U  ",
"  =\277,\"#1\314""3\301""1\"#*\306:  ",
"  \210\241\316$)\324\256""Ec\315##\322\255\246  ",
"  \245\240]\270\272""aHFGB\267\271^Q\212  ",
"   \237\234[CD\257\275\247""bb\\\204\206\211  ",
"   \242\235\233`A\274\327\273@\232\203\236\243   ",
"     \250\253""e\260\265\261""d\251\252     ",
"       J857I       ",
"       K564J       ",
"       \323\303\311\304\321       ",
"       ((\'((       "
};
static Fl_Pixmap image_front2(idata_front2);

void MeshToolsUI::cb_Bt_pos_back_i(Fl_Button*, void*) {
  MT->Set_Grid_Plane(0);
MT->SetPosition(2);
MT->redraw();
}
void MeshToolsUI::cb_Bt_pos_back(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_pos_back_i(o,v);
}

static const char *idata_back2[] = {
"19 19 -136 1",
" \377\377\377!\333\35!\"\333\37!#\333\34!$\334\35\"%\377\276$&\377\271$\'\
\377\272$(\377\273$)\377\274$*\377\275$+\230j\20,\300\207\25-\273\204\25.\264~\
\24/\377\265#0\377\266#1\377\267#2\377\270#3\246r\22""4\\>\n5lJ\f6hH\f7\377\
\256!8\377\256\"9\377\257\":\377\260\";\377\261\"<\377\262\"=\377\263\">jE\13?\
bA\13@[<\nAyQ\16""BxP\16""CgE\fD\246o\24""E\225""c\22""F\225""d\22G\220""a\21H\
\216_\21I\210Z\20JtN\16KfD\fL\361\241\36M\351\234\35N\341\227\34O\314\211\31P\
\311\207\31Q\303\202\30R\302\201\30S\272}\27T\271|\27U\262w\26V\261w\26W\254r\
\25X\252r\25Y\251q\25Z\243m\24[\241l\24\\\232g\23]\223""c\22^\211[\21_{R\17`sM\
\16""a\374\251 b\374\252 c\373\250 d\373\251 e\367\245\37""f\367\246\37g\366\
\245\37h\365\243\37i\365\244\37j\364\243\37k\363\243\37l\362\242\37m\356\237\
\36n\355\237\36o\354\236\36p\353\236\36q\352\235\36r\350\233\35s\346\232\35t\
\342\227\35u\341\227\35v\340\226\34w\336\225\34x\335\224\34y\334\223\34z\334\
\224\34{\333\222\34|\332\222\34}\327\220\33~\325\217\33\177\317\213\32\200\
\315\213\32\201\310\206\31\202\306\204\31\203\306\205\31\204\305\204\31\205\
\303\202\31\206\274~\30\207\260v\26\210\257v\26\211\255t\26\212\227""e\23\213\
\377\254!\214\377\255!\215\376\253!\216\375\252!\217\374\251!\220\374\252!\
\221\370\246 \222\357\240\37\223\350\234\36\224\340\226\35\225\331\221\34\226\
\321\214\33\227\301\201\31\230\255p\25\231\257q\26\232""a<\n\233\212S\20\234\
\206O\17\235\223U\21\236~C\20\237\331_\34\240\326^\34\241\335Z\35\242\224""7\
\24\243\324K\35\244\320""D\35\245\271""1\32\246\301,\34\247\305+\35",
"       pLlLo       ",
"     sl\217\214""7\214\220ks     ",
"    Nk\213</0/=\213ht    ",
"    p\216<1\'\'\'1<\215n    ",
"   {j80\')*)\'09iz   ",
"   we:1(*%*(2;\221v   ",
"  Rwg:1(*%*(1:fvQ  ",
"  S\225l\214/&)))&/7k{\206  ",
"  \207\177\223""c:02&2/;dq\226U  ",
"  [\227|ma9<=<9a\222y\205Z  ",
"  H\211\201zogdbdgnxP\210G  ",
"  BF\207\204~\224rMru}\203V\212""A  ",
"   A]YT\204O\200O\202SXE_?  ",
"   @`I\\D\230\231WD\\^J4   ",
"     K6\242\246\247\245\236""5C     ",
"       \232\234\235\233>       ",
"       +.,-3       ",
"       \244\240\241\237\243       ",
"       $\"#\"!       "
};
static Fl_Pixmap image_back2(idata_back2);

void MeshToolsUI::cb_Bt_pos_above_i(Fl_Button*, void*) {
  MT->Set_Grid_Plane(2);
MT->SetPosition(4);
MT->redraw();
}
void MeshToolsUI::cb_Bt_pos_above(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_pos_above_i(o,v);
}

static const char *idata_above2[] = {
"19 19 -162 1",
" \377\377\377!\327\20!\"\326\20!#\327\21!$\377\304$%\377\305%&\377\307%\'\
\377\300#(\377\301#)\377\277%*\377\300%+\377\302%,\377\275#-\377\271$.\377\
\272$/\377\273$0\377\274$1\377\275$2\377\275%3\377\276%4\377\264\"5\377\265\"6\
\377\266\"7\377\264#8\377\265#9\377\266#:\377\267#;\377\270#<D.\7=eD\13>\\>\n?\
Y<\n@\377\257\"A\377\260\"B\377\261\"C\377\262\"D\377\263#E\375\256$F\373\256%\
GH0\7HL2\bI^?\nJS7\tKA+\7LtN\rMlH\fNdC\13OcB\13PI0\bQI1\bRrL\rShE\fThF\fUgE\fV\
\225""d\22W\217_\21X\217`\21Y\210[\20Z\207[\20[\206Z\20\\\177U\17]~T\17^\332\
\222\33_\331\221\33`\321\214\32""a\303\203\30""b\302\202\30""c\301\201\30""d\
\255t\25""e\252r\25""f\242l\24g\242m\24h\233h\23i\231""f\23j\222""b\22k\204X\
\20l\203W\20m\202W\20n{R\17osM\16p\374\251 q\373\250 r\372\250 s\371\247 t\
\363\243\37u\361\242\37v\356\237\36w\355\237\36x\353\235\36y\353\236\36z\352\
\235\36{\344\230\35|\344\231\35}\343\230\35~\342\227\35\177\337\225\34\200\
\334\224\34\201\332\222\34\202\330\221\33\203\326\217\33\204\325\217\33\205\
\324\216\33\206\320\213\32\207\317\213\32\210\315\211\32\211\314\211\32\212\
\307\205\31\213\302\202\31\214\300\201\30\215\275~\30\216\275\177\30\217\273}\
\30\220\273~\30\221\267{\27\222\266z\27\223\264y\27\224\256u\26\225\247p\25\
\226\246o\25\227\245o\25\230\244n\25\231\240k\24\232\236j\24\233\377\254!\234\
\377\255!\235\376\253!\236\376\254!\237\375\252!\240\375\253!\241\374\251!\
\242\374\252!\243\370\246 \244\366\245 \245\364\244 \246\360\241\37\247\356\
\240\37\250\350\234\36\251\337\226\35\252\373\252#\253\373\253$\254\372\245$\
\255\372\246$\256\371\243$\257\372\235\"\260\370\236$\261\367\226#\262\367\
\230#\263\366\220\"\264\366\222#\265\366\223#\266\363\211#\267\362\203\"\270\
\362\203#\271\361\203#\272\351\\\"\273\347Q!\274\347S!\275\345N!\276\343""B!\
\277\343""C!\300\341<!\301\335*!",
"      PQQG<K       ",
"     INSTUO>JH     ",
"   ML]kZY[mnR=?    ",
"   [jhf\227\226\230\231iXlo    ",
"   g\224\221\216""cb\214\220\223""e\232W\\   ",
"  d\217\212\207\203_\201\202\205\210""a\222\225V   ",
"  \213`\200|zv\247w\250~\202\211\215""e   ",
"  \204}v\244r\242\237\241stz\177\206\216   ",
"  |uq\234""ACCB@\236\243w\251\210   ",
"  \246p@D9:;:8C\234sy^   ",
"  s@7;.///-:C\233\245{   ",
"  \235""B:.02320-9Arx   ",
"   4-03)))1/:C\237    ",
"   70$&%))+$\'6\240    ",
"   5\252\266\271\260""3*\256\270\267\257\240    ",
"    \272#\"\301""F*\300!\"\276     ",
"     \261\265\253\254\255""E\264\263      ",
"       (\262\262,        ",
"       \273\275\274\277        "
};
static Fl_Pixmap image_above2(idata_above2);

void MeshToolsUI::cb_Bt_pos_below_i(Fl_Button*, void*) {
  MT->Set_Grid_Plane(2);
MT->SetPosition(3);
MT->redraw();
}
void MeshToolsUI::cb_Bt_pos_below(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Bt_pos_below_i(o,v);
}

static const char *idata_below2[] = {
"13 19 -150 1",
" \377\377\377!\332\30!\"\334\34!#zU\16$\377\263!%pM\f&uQ\r\'{U\16(zT\16)\363\
\245\35*\331\223\32+\272~\26,\230g\22-\377\255\37.\374\253\37/\364\247\36""0\
\377\256 1\377\257 2\377\260 3\377\261 4\377\262!5\216^\20""6\206Y\17""7}R\16""\
8uN\r9\274}\26:\264x\25;\254s\24<\253r\24=\233g\22>\232""f\22?\225""c\21@\224""\
b\21""A\223""b\21""B\222""a\21""C\212\\\20""D\203W\17""E\202V\17""FqK\rG\370\
\245\36H\362\242\35I\360\240\35J\360\241\35K\352\234\34L\350\234\34M\343\227\
\33N\340\226\33O\337\225\33P\332\221\32Q\330\220\32R\322\214\31S\321\213\31T\
\320\213\31U\320\214\31V\317\212\31W\317\213\31X\313\210\30Y\311\206\30Z\310\
\206\30[\303\200\27\\\303\202\27]\301\200\27^\301\201\27_\277\200\27`\276~\27""\
a\276\177\27""b\273}\26""c\271{\26""d\270{\26""e\263x\25""f\262v\25g\256t\25h\
\256u\25i\252r\24j\251p\24k\251q\24l\250p\24m\247o\24n\246o\24o\241k\23p\241l\
\23q\240i\23r\237j\23s\236i\23t\231""f\22u\230""e\22v\227""d\22w\226""d\22x\
\221`\21y\221""b\21z\216^\21{\216_\21|\207Z\20}\206Y\20~\376\252\37\177\375\
\251\37\200\375\253\37\201\374\250\37\202\374\251\37\203\373\247\37\204\373\
\250\37\205\372\247\37\206\367\246\36\207\366\244\36\210\364\243\36\211\362\
\242\36\212\357\240\35\213\356\240\35\214\354\236\35\215\353\235\35\216\352\
\235\35\217\347\232\34\220\346\232\34\221\345\231\34\222\344\230\34\223\344\
\231\34\224\341\227\34\225\336\225\33\226\334\223\33\227\332\221\33\230\326\
\217\32\231\324\215\32\232\316\211\31\233\314\210\31\234\305\203\30\235\275~\
\27\236\265y\26\237\254r\25\240\254s\25\241\377\254 \242\377\255 \243\376\253 \
\244\376\254 \245\337\221\33\246\266u\26\247\364\234\36\250\357\224\36\251\
\330\206\33\252\351\204\35\253\260""d\26\254u?\16\255u@\16\256q>\16\257\331""9\
\37\260\320""7\36\261\330""0 \262\336/!\263\277#\34\264\303\"\35\265\307!\36",
"     \265\263\264     ",
"     \254\255\256     ",
"    #\'(&%    ",
"  CBwwAz67F  ",
" =n;g\240lptzE8 ",
" :a\\\\]beksxE ",
" X\231\230\230R\233\\d;s5 ",
"\231O\221\220\222OQW\234""dju|",
"\223\213HH\212KMPV^fo{",
"H\203\201\204G\211\215\224\230Ycm@",
"\204\241\242\241\177\206J\217\226\232\235iw",
"\241""221\241\201\210\216OT_;v",
"04$30~\207\214NS_<?",
"-4$30~\207\215\225V9mx",
"\202""132\242./L\227Z\236rC",
" \205\244\243\200\247\252\245U`kA ",
" \217I)\250\262!\257[h>D ",
"  \230*\251\261\"\260\237,}  ",
"    +\246\253qy    "
};
static Fl_Pixmap image_below2(idata_below2);

void MeshToolsUI::cb_Matrix_button_i(Fl_Button*, void*) {
  mat_show();
}
void MeshToolsUI::cb_Matrix_button(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Matrix_button_i(o,v);
}

static const char *idata_mat[] = {
"15 14 -8 1",
" \377\377\377!\346\273R\"\377\332\177#\210\210\210$WWW%QQQ&\3\3\3\'\0\0\0",
"$&&&&&&&&&&&&$ ",
"#############% ",
"#!\'\"#\'\'\"#\'\'\"#% ",
"#!\'\"#!\'!#\'\'\"#% ",
"#!\'!#\'\"!#\"\'!#% ",
"#!\'!#\'\'!#\'\'!#% ",
"#############% ",
"#!\'!#!\'\'#\'\'##% ",
"#\'\"!#!\'\"#!\'!#% ",
"#\'\'\'#!\"\'#!\'!#% ",
"#\"\'!#!\'\'#\'!!#% ",
"#############% ",
"#!\'!#!\'\"#!\'\"#% ",
"#\'\"\'#!\'\"#!!\'#% "
};
static Fl_Pixmap image_mat(idata_mat);

void MeshToolsUI::cb_Color_Scale_button_i(Fl_Button* o, void*) {
  //((Fl_Button *)o)->value(1);


if (((Fl_Button *)o)->value()==0)
{((Fl_Button *)o)->value(1);}
else
{((Fl_Button *)o)->value(0);}
MT->Change_Scalars_Display_Mode();
MT->SetColorScaleId(0);// calls update_rgb
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_Color_Scale_button(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_Scale_button_i(o,v);
}

static const char *idata_show_color_scale[] = {
"19 19 -255 1",
"!\377\377\377\"\366#$#\374\361\362$\376\373\374%\377\370\375&\356\355\361\'\
\0\2\353(\0\3\317)\t\t\n*\336\336\354+\0\b\377,\0\5\370-\0\6\341.\0\4\306/\0\
\3\275""0\0\7\273""1fk\351""2\242\244\346""3\271\272\346""4\0\n\332""5\0\b\
\304""6\0\13\270""7\36&\313""8HP\313""9\210\216\356:\302\304\357;\0\22\372<\1\
\n\203=\2\21\322>\2\20\310?\2\17\265@\3\23\352""A\3\22\326""B\1\6HC\2\tnD\4\
\21\300""E\1\4*F\31\'\360G/?\377H*5\306IKW\366JTa\373K-1cL\243\251\373M\267\
\274\371N\315\321\377O\306\311\364P\345\347\374Q\0\1\bR\347\355\374S\326\332\
\342T\334\337\343U(f\250V#\200\272W\25\214\276X\17\246\321Y\32\250\321Z\17\
\271\333[\31\263\325\\\27\253\305]\r\263\315^\b\234\254_\16\303\333`\24\236\
\255""a\n\257\273""b\3\216\221""ch\265\266""d\7\227\225""eD\261\254""f\t\212}g\
\b\231\206h\16\236~i\35\270\217j\25\237sk\16\240ol\356\361\360m+\266\204n\200\
\305\252o\26\233""cp\26\230\\q+\245mr\225\266\245s\16\217""Ft\22\224Ju\367\
\376\372v+\216Pw\13\210""5x}\271\217y\b\203\'z\27k*{\b{\37|\23_\"}\7j\26~\0s\
\17\177\1""a\r\200\nt\24\201\bv\16\202""5\205""9\203\0-\1\204\22""F\23\205U\
\235W\206\0s\0\207\1""9\1\210\3>\2\211\17x\f\212\26x\25\213\6Q\2\214\4@\2\215\
\bA\5\216\20}\n\217\2$\0\220\22s\f\221\b:\3\222\17""d\6\223""EhB\224\tM\0\225\
\13Y\1\226\335\355\333\227\33{\f\230\35s\20\231&v\31\232 j\21\233[yT\234\n.\1\
\235\17?\2\236\f5\2\237""C\206""1\240\32X\b\241\26""B\2\242)n\2\243\306\315\
\302\244\'Z\3\245-M\25\246J\205\27\247&L\1\250""9l\4\251""Ag\6\252""9S\2\253u\
\210O\254X}\5\255j\207\3\256\204\233\31\257hv\31\260KW\3\261w\205\3\262[e\3\
\263lv\2\264X_\0\265\261\276\3\266\205\213""3\267\231\236\3\270y~\25\271\262\
\264\1\272\271\275\2\273\247\254\2\274\211\214\2\275\377\377\367\276\375\375\
\374\277\271\262\0\300lh\3\301\235\231\23\302\242\230)\303\272\247\3\304\321\
\275\24\305\221\200\0\306\326\274\1\307}o\3\310\337\305\24\311\336\307\"\312\
\320\312\234\313\351\346\321\314\310\254\2\315\247\217\3\316\234\211\25\317\
\367\365\350\320\334\267\2\321\272\234\3\322\362\315\25\323\363\306\2\324\266\
\221\0\325\335\254\2\326\272\222\4\327\336\263\17\330\345\267\25\331\307\247,\
\332\352\265\2\333\365\330\177\334\342\252\2\335\301\217\2\336\327\237\4\337\
\330\240\13\340\312\253O\341\373\353\277\342\317\305\251\343\354\252\0\344\
\336\235\3\345\333\236\3\346\322\226\3\347\312\223\3\350\333\237\4\351\361\
\261\25\352\353\240\3\353\330\221\4\354\307\207\4\355\277\202\4\356\354\353\
\351\357\333\226\25\360\335\211\0\361\330\207\3\362\316\211\26\363\334\206\3\
\364\371\234\25\365\353\225\25\366\330\266\203\367\347\204\2\370\337\200\3\
\371\364\226\24\372\371\230\31\373\325\213+\374\373\215\1\375\363\211\2\376\
\377\225\22\377\362\202\3\0\352v\2\1\374\200\3\2\370\206\27\3\343\212-\4\367\
\315\243\5\365\364\363\6\342m\3\7\372q\2\b\373z\22\t\344r\25\n\335`\0\13\373""\
a\2\f\373l\24\r\372Z\0\16\377\375\374\17\367_\25\20\371""D\2\21\367?\2\22\366=\
\22\23\352\345\344\24\366(\2\25\365+\23\26\365\26\2\27\361\27\2\30\360\35\17\
\31\350\31\23\32\361\34\24\33\357\36\24\34\350\35\24\35\356\24\23\36\377\376\
\376\37\0\0\0",
"\"\30\25\f\2\t\351\322\330\310\304\316\270\256\246\245\204\231\202",
"\35\27\24\7\377\6\323\332\325\306\321\307\261\254\242\234\213\230z",
"\31\26\20\1\0\367\323\334\320\314\315\300\255\250\240\203\222\212|",
"\34\26\13\374\6\352\332\325\306\324\305\264\254\244\235\210\220\200z",
"\33\24\1\375\n\343\334\327\311\331\302\257\251\224\217\225\216\177v",
"\32\21\374\0\3\333\341\317OLMl\313r\233\230\206\177q",
"\33\r\372\4$!RI;++GN!!\226\205}m",
"\25\2\313!!!I\';FJ,FP!!!xi",
"\22\366R\276!O4@<)K@\'9!!!ue",
"\17\342T\5!2(AE\37QD-1!!!\16""c",
"\b\366S\23\275:5=C\37""B=(9!!\36\23""e",
"\376\3\243S\356\5""8/>?>.7P!$#r`",
"\364\367\373\342T&*86/0HO!%\23nf\\",
"\371\370\360\337\340\312\313\356""323&\317\243xvkb[",
"\365\363\344\346\335\277\301\266\253\253\233\223\237\211~sh^Y",
"\365\361\345\347\321\271\274\264\247\234\203\221\227\201yog]W",
"\357\353\346\335\303\273\261\260\244\236\207\240\227\200wjdZV",
"\357\350\354\326\272\267\263\252\247\221\207\232\220{thaXU",
"\362\336\355\303\265\274\262\252\241\214\215\230}ypg_WU"
};
static Fl_Pixmap image_show_color_scale(idata_show_color_scale);

void MeshToolsUI::cb_Color_Scale_Show_i(Fl_Button*, void*) {
  sc_show();
}
void MeshToolsUI::cb_Color_Scale_Show(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Color_Scale_Show_i(o,v);
}

static const char *idata_edit_color_scale[] = {
"19 19 -254 1",
"!\377\377\377\"\364\0\1#\250\246\247$\370\365\367%\274\275\303&\310\311\315\'\
\261\264\275(\30[\241)\252\260\266*\22v\265+\t\203\272,\20\214\274-\t\244\311.\
\f\252\321/\17\271\333""0\r\263\315""1\5\231\252""2\16\303\333""3\n\257\273""4\
D\255\264""5\5\217\222""6\7\227\225""70\254\243""8\7\220\201""9\t\237\213:\22\
\262\222;\7\225v<\16\236~=\271\343\330>\26\242u?\34\260|@\221\326\272""A\26\
\235""cB\26\230\\C\33\236""bD\16\221PE+\237""cF\23\223LG\24~@H\16\203=I\13\
\210""5J\13\206""5K\2X\30L\6l!M\b\203\'N\4z\34O\b{\37P\0_\17Q\1t\24R\bp\31S\bt\
\27T\th\24U\1""c\13VW\243^W\0g\7X\nw\21Y\ft\21Z\25r\32[\35] \\\0+\1]\2p\5^\1:\
\2_\1""8\1`\1""4\1""a\6{\6""b(M(c\357\365\357""d\373\374\373""e\1q\0""f\2>\1g\
\fx\nh\26x\25i\6Q\2j\4@\2k\5""5\3l\20}\nm\6""1\3n\nA\6o\22s\fp\264\314\262q\7;\
\2r\20|\5s\6-\2t\17""d\6u\rZ\3v\32}\16w w\25x\23p\5y\36r\20z\37N\27{\344\352\
\343|\16O\2}\t,\2~\24]\6\177\20""E\6\200!}\20\201\30W\r\202 l\21\203\27N\r\
\204""C\231""3\205\234\254\231\206\17?\2\207\f5\2\210(t\23\211\25V\2\212!^\17\
\213\33Y\2\214\27""F\2\215\24=\0\216\26""B\2\217&g\3\220\24""6\2\221 J\2\222\
\36""B\3\223<|\5\224)R\3\225+T\2\226\244\261\227\227""8h\2\230""4Z\2\231""Fq\
\2\232""4T\2\233Gj\3\234\264\300\236\235Z\200\7\236""6M\0\237W{\4\240?X\3\241=\
T\1\242\306\316\262\243j\207\3\244\266\270\257\245Ue\3\246{\223\7\247\245\252\
\213\250q\204\3\251KW\3\252[e\3\253NV\2\254kt\3\255Yb\3\256\261\276\3\257~\
\207\3\260nu\3\261nr\0\262\231\236\3\263^c\3\264\267\272\203\265\271\275\2\
\266\262\264\2\267\211\215\3\270\221\222\1\271\250\250\2\272\\[\3\273\373\373\
\372\274\273\266\2\275\234\226\2\276\263\255\17\277\276\274?\300\314\312\226\
\301\210\202\2\302mg\2\303\272\254\2\304\204z\3\305\277\256\0\306\237\220\0\
\307\326\277\2\310\275\272\235\311\315\266\1\312\335\301\2\313\271\242\4\314\
\226\205\3\315}o\3\316\330\272\2\317\306\253\2\320\265\232\2\321\247\217\3\
\322\224\200\3\323\362\307\2\324\334\267\2\325\325\264\3\326\250\213\2\327\
\272\234\3\330\242\206\3\331\277\240\22\332\300\261k\333\332\252\2\334\352\
\266\3\335\343\261\3\336\335\254\3\337\333\255\3\340\272\224\3\341\253\206\3\
\342\344\255\3\343\340\251\3\344\332\257%\345\320\230\0\346\354\257\3\347\303\
\223\3\350\301\217\3\351\330\237\4\352\313\253S\353\307\267\214\354\345\243\0\
\355\336\235\2\356\360\253\3\357\312\223\3\360\333\237\4\361\322\226\4\362\
\353\240\3\363\327\222\4\364\277\202\4\365\324\231\35\366\345\226\1\367\311\
\204\4\370\345\215\3\371\333\213\3\372\332\207\3\373\355\215\3\374\316\217""5\
\375\371\216\2\376\363\213\2\377\371\222\3\0\344\204\3\1\337\200\3\2\261\223i\
\3\375\216\1\4\335z\1\5\363\204\2\6\371\202\3\7\345\200\17\b\352y\3\t\375|\3\n\
\342m\3\13\313\202""A\f\372q\2\r\337h\3\16\363q\b\17\340""a\0\20\342""f\3\21\
\237\234\232\22\373""a\2\23\372^\3\24\350S\22\25\370""B\2\26\366""3\1\27\370-\
\2\30\366!\2\31\365\26\2\32\361\27\2\33\357\21\2\34\357\f\2\35\346\n\2\36\355\
\2\1",
"\"\33\30\22\6\20\356\323\335\312\311\322\260\246\223\222_\202Z",
"\36\32\27\f\5\n\323\334\336\307\327\315\250\235\217}iwT",
"\35\31\25\6\b\0\323\343\324\317\321\302\243\227\213\\thK",
"\35\31\22\375\n\362\334\336\316\340\314\263\237\217\206""foYK",
"\34\30\t\376\20\346\342\337\311\341\304\245\233\211sulUG",
"\34\25\3\b\r\346\343\325\317\330\302\233\224|mxaPC",
"\34\23\377\20\0\354\333\325\320\314\272\231\214""f\177r]L?",
"\32\t\5\17\366\344\344\311\326\301\253\227\203""b~eWH:",
"\26\3\7\13\353&\352\305\306\302\241\215[c\242VRD:",
"\24\2\21)%&\242\300\300\310\234\226pd!!{@7",
"\16\374\2#\'%\300\332\264\247\226\205\244$!!\273=4",
"\3\376\4\365\332\244\277\275\261\236\215\\b{pVE;1",
"\377\0\4\355\345\331\276\270\272\230\220_z\204]QA8-",
"\376\1\371\351\347\305\271\257\251\224\207`\212rQJ>5.",
"\373\372\355\361\347\274\275\254\240\222kk\210gNF<1-",
"\370\372\360\357\327\266\267\255\232\220_n\200XMA80+",
"\371\363\361\350\303\271\257\251\225\207_\201vSI>6/*",
"\363\360\367\340\265\262\254\241\221q^\202oOF<3.(",
"\367\351\364\313\256\267\252\232\216jnyTMB92,("
};
static Fl_Pixmap image_edit_color_scale(idata_edit_color_scale);

void MeshToolsUI::cb_Show_Tag_Window2_i(Fl_Button*, void*) {
  tags_show();
}
void MeshToolsUI::cb_Show_Tag_Window2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Show_Tag_Window2_i(o,v);
}

static const char *idata_Show_Tag_Window2[] = {
"19 19 -223 1",
"!\377\0\b\"\377\0\n#\377\0\f$\315g\312%\377\0\377&\377\4\377\'\377\5\377(\
\377\7\377)\377\n\377*\377\24\377+\377\34\377,\377\37\377-\377$\377.\377+\377/\
\377Q\377""0\377W\377""1\377g\377""2\377k\377""3\311\\\311""4\311^\311""5\377y\
\377""6\311""a\311""7\322l\377""8\323l\377""9\325p\377:\326v\377;z\0\377<{\0\
\377=|\0\377>}\0\377?~\2\377@\177\4\377""A\177\5\377""B\177\6\377""C\205\20\
\377""D\207\24\377""E\211\27\377""F\214\34\377G\216!\377H\233;\377I\235>\377J\
\250V\377K\273y\377Ly\0\377M|\5\377N|\6\377O~\n\377P\206L\317Q\177I\311R\200J\
\311S\b\0\377T\6\0\377U\13\4\377V\f\5\377W\f\6\377X\0\0\377Y\1\0\377Z\1\1\377[\
\5\5\377\\\6\6\377]\25\25\377^\32\32\377_\35\35\377`\37\37\377""a<<\377""bBB\
\377""cHH\377""daa\377""ebb\377""fed\377g5`\325h7a\325i>f\331j|\226\311kZ\200\
\257la\204\256m_\203\253n:|\267o4}\263p:\201\266q2|\262r:\201\263s\226\250\
\263t\0p\177u\0u\177v\0s}w\0{\200x\5\204\210y$\224\230z\0\377\377{\0ww|\2\377\
\377}\3\377\377~\5\377\377\177\7\377\377\200\4}}\201\n\377\377\202\16\377\377\
\203\21\377\377\204\22\377\377\205\23\377\377\206\25\377\377\207$\377\377\210%\
\377\377\211\24\207\207\212\'\377\377\213\25\206\206\214""2\377\377\215(\221\
\221\216L\377\377\217-\223\223\220W\377\377\221""5\230\230\222""c\377\377\223>\
\235\235\224s\377\377\225{\377\377\226\\\254\254\227\214\304\304\230\0{v\231\
\0}u\232\0{s\233\0}s\234)\227\215\235+\227\215\236\235\264\261\237\0~l\240""a\
\225\206\241Y\224~\242^\230\203\243`\230\203\244""a\231\200\245z\276\206\246\
\200\276\210\247}\301\203\250\0\377\0\251\1\377\1\252\2\377\2\253\7\377\7\254\
\b\377\b\255\f\377\f\256\16\377\16\257\17\377\17\260\20\377\20\261\36\377\36\
\262\'\377\'\263""8\377""8\264""A\377""A\265k\377k\266s\377s\267\17\377\2\270\
\17\377\3\271\21\377\4\272\21\377\5\273\254\303\240\274\377\377\0\275\377\377\
\1\276\377\377\3\277\377\377\6\300\377\377\24\301\377\377\33\302\377\377+\303\
\377\377""8\304\377\377H\305\377\377P\306\377\377W\307\377\377\\\310\377\377k\
\311\377\377s\312\350\323`\313\352\325""a\314\351\325""a\315\352\326""e\316\
\350\322_\317\377\311""5\320\377\311""6\321\377\314>\322\377\311:\323\325\260""\
a\324\325\257_\325\336\270h\326\377\212\13\327\377~\0\330\377\177\0\331\377\
\201\0\332\377\207\n\333\377\211\r\334\377\217\31\335\377\216\35\336\377\217 \
\337\377\224*\340\377\227/\341\377\231""4\342\377\232""5\343\377\233""7\344\
\377\242""F\345\377\251U\346\377\253X\347\377x\0\350\377|\0\351\377}\0\352\
\377\201\13\353\377\316\237\354\377s\0\355\377t\0\356\377v\0\357\344\210\177\
\360\344\211\200\361\377\f\0\362\377\16\0\363\353\216\210\364\377\0\0\365\377\
\4\4\366\377\5\5\367\377\f\f\370\377  \371\377\'\'\372\377**\373\377""44\374\
\377""99\375\377LL\376\377NN\377\377RR",
"\364\364\365\366\364\362RXX^[Xh\272\250\260\257\250\250",
"\364\364\373\375\364\362RX]edXh\271\252\263\266\253\250",
"\364\364\371\376\364\362RXZ[cXh\272\250\256\266\254\250",
"\364\364\372\377\364\362RX\\a`Yh\272\251\255\265\261\250",
"\364\364\370\374\364\361QX_fbXg\267\252\264\262\252\250",
"##\"!#\367PWUTSVi\270\250\250\250\250\250",
"\322\322\320\317\322\321\236npqorj$64366",
"\274\274\301\302\274\275\247{\233\234\235\237m%%%*%%",
"\274\276\306\305\274\277\246v\213\227\217\232l)\'2-%%",
"\274\303\311\310\274\277\246u\200\223\226\232l&.51+%",
"\274\300\304\307\274\277\246v\211\215\221\231l(+0/,%",
"\274\274\274\274\274\274\245txyw\230k%%)(%%",
"\313\313\312\316\314\315\273\240\242\241\243\244s:97899",
"A@DEBO\363\326\332\334\333\352\325\201|\205\203}~",
"<@JKCL\357\350\342\344\341\354\324z\206\216\220\202z",
">?<I@M\360\351\337\353\340\355\323z\210\222\224\212z",
"><EHLN\360\351\343\346\345\355\323~z\214\225\177z",
">;GF;N\360\330\336\341\335\356\323~}\207\204zz",
">>===N\360\331\351\327\351\347\323~zzzzz"
};
static Fl_Pixmap image_Show_Tag_Window2(idata_Show_Tag_Window2);

void MeshToolsUI::cb_Tag_mode_off_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Tag_mode_on->value(0);
MT->Set_Selection_Mode(0);
MT->Desactivate_Tags_Display_Mode();
//MT->SetColorScaleId(1);
MT->SetModeTool(0);
MT->redraw();
}
void MeshToolsUI::cb_Tag_mode_off(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_mode_off_i(o,v);
}

static const char *idata_Normal_select_mode[] = {
"19 19 -123 1",
" \377\377\377!\0\0\1\"))*#\227\227\230$\225\225\226%\223\223\224&\0\1\f\'\f\
\17\27(),4)\210\215\233*jny+\35\36!,\f\16\23-\211\216\232.\202\206\220/\215\
\221\233""0\212\216\230""1\215\217\224""2\221\223\230""3\211\216\231""4\220\
\225\240""5\213\217\230""6\214\217\225""7\212\214\220""8\222\226\235""9\2\3\3:\
233;\223\224\224<\377\316""F=\377\264\0>\377\265\0?\273\204\0@\377\266\5""A\
\246v\4""B\377\266\7""C\377\267\tD\377\270\nE\377\272\nF\377\270\rG\377\271\
\21H\377\271\22I\251{\fJ\377\272\23K\346\251\25L\377\274\32M\353\256\32N\352\
\256\33O\314\227\30P\377\275\37Q\357\262\35R\377\276!S\377\276\"T\377\301\"U\
\377\301,V\377\302,W\341\253(X\346\257+Y\337\252*Z\377\303""1[\377\307=\\\326\
\247""5]\332\253:^\322\247:_\321\245<`\320\245=a\377\262\0""b\377\263\0""c\
\307\212\0""d\377\265\te\377\266\13""f\341\242\17g\240t\16h\243w\20i\377\273\
\32j\377\273\33k\377\277(l\327\253""Cm\263\233""dn\221\220\220o\240\240\240p\
\233\233\233q\232\232\232r\231\231\231s\230\230\230t\226\226\226u\225\225\225v\
\224\224\224w\222\222\222x\221\221\221y\220\220\220z\217\217\217{\215\215\215|\
|||}bbb~___\177TTT\200III\201""FFF\202""EEE\203""BBB\204>>>\205:::\206""666\
\207""555\210""000\211---\212)))\213\'\'\'\214&&&\215%%%\216\37\37\37\217\36\
\36\36\220\31\31\31\221\22\22\22\222\17\17\17\223\t\t\t\224\b\b\b\225\7\7\7\
\226\5\5\5\227\4\4\4\230\2\2\2\231\1\1\1\232\0\0\0",
"                   ",
"LCCCCCCCCCCCBB     ",
"ek           jP    ",
"F            [i    ",
"G            <D    ",
"J          !\'OE    ",
"b         \232:(?A    ",
"a        \231\207$8XI&\226\210 ",
"=       9\";%5W].\200\226\214",
"@      ,+721)Y\\/o\177\225",
"dHSRRTfcKQMMN>^0r\203\220",
" UUUVZhgl````_m1#\210\212",
"       \232*4333-6nu\216\204",
"       \211\217%xyyyyxy\221 ",
"        \232~syywvqz\224 ",
"        \201\222xpt{|}\206\232 ",
"         \223\205\200\215\222\230\227\222\202 ",
"          \232\222\213      ",
"                   "
};
static Fl_Pixmap image_Normal_select_mode(idata_Normal_select_mode);

void MeshToolsUI::cb_Tag_mode_on_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Tag_mode_off->value(0);
MT->Set_Selection_Mode(1);
MT->Activate_Tags_Display_Mode();
MT->SetColorScaleId(-1);
MT->Set_Active_Scalar(-1);

//MT->SetModeTool(0);
MT->redraw();
}
void MeshToolsUI::cb_Tag_mode_on(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_mode_on_i(o,v);
}

static const char *idata_Tag_select_mode[] = {
"19 19 -145 1",
" \377\377\377!\373\0\5\"\200\0\2#\366\0\7$\352\0\30%\311\0\35&\227\0#\'\256\
\0;(\214\0S)s\0""f*j\0r+T\0\200,D\0\204-<\0\227.4\0\230/\1\0\3""0%\0\245""1\7\
\0 2\b\0/3\6\0>4\1\0?5\0\0=6\0\0\3""7\1\1\t8\n\n\26""9DDE:\n\f\26;\"$.<\7\b\f=\
9<E>#*1?CGK@\22\35\"A\20\25\27""B\17\23\24""C\1\r\17""D-34E\1\13\13""F)33G$((H\
\7\t\3I\5\7\0J\5\6\0K\377\376\0L\361\362\0M\257\257\0Ncc\0O\37\37\0P\23\23\0Q\
\1\1\0R\334\326\0S&$\0T\371\340\0UG@\0V\376\337\0W\377\335\0X\377\323\0Y\204i\
\0Z\377\302\0[<-\0\\\246{\6]\377\316""F^\377\264\0_\377\266\0`\377\267\0""a\
\377\270\0""b\310\215\0""c\375\270\1""d\377\266\5""e\377\266\7""f\377\267\tg\
\377\270\nh\377\272\ni\377\270\rj\377\271\21k\377\271\22l\377\272\23m\377\274\
\32n\243z\21o\314\230\30p\377\275\37q\377\276!r\377\276\"s\377\301\"t\377\301,\
u\377\302,v\377\303""1w\377\307=x\377\262\0y\377\263\0z\273\203\0{kK\0|\377\
\265\t}\377\266\13~\341\242\17\177\377\273\32\200\377\273\33\201\377\277(\202\
\326\225\27\203\256o\2\204\377\237\0\205\347\224\21\206\341\224\33\207\237""c\
\7\210\356\224\r\211\377\223\0\212\365\221\7\213\377\213\0\214\366\206\0\215\
\335\203\31\216\324\204%\217Z/\0\220\355\202\r\221\377z\0\222\377{\0\223\377u\
\0\224\377n\0\225\374q\2\226\360q\20\227\377k\0\230\377g\1\231\367h\6\232\352h\
\20\233\377""a\0\234\342h\36\235\377]\0\236\377W\0\237\377N\0\240\377J\0\241x$\
\0\242\377""B\0\243\377""8\0\244\377""5\0\245#\7\0\246\246\35\0\247\225\23\0\
\250\377\30\0\251\377\31\0\252\377\22\0\253\377\23\0\254\377\7\1\255""8\0\0\
\256\22\0\0\257\376\3\1\260\0\0\0",
"                   ",
"mfffffffffffee     ",
"}\201           \200p    ",
"i            w\177    ",
"j            ]g    ",
"l          JAoh    ",
"y         Q45z\\    ",
"x        I30-\216\203/ED ",
"^       H2.+)\215\226%\"\256G",
"d      B1,*(\'\220\225!\252\247""C",
"|krqqs~b\202\206\205\210\212""c\223\253\242\241@",
" tttuvn\207\234\232\231\230\227\223\235\240\222\217>",
"       \260&$#\257\251\243\233\213_[=",
"       F\255\254\250\244\236\221\204ZVS ",
"        \260\246\237\224\211""aWKLP ",
"        ?\245\214`XTRMN\260 ",
"         <{YUOJ789 ",
"          6:;      ",
"                   "
};
static Fl_Pixmap image_Tag_select_mode(idata_Tag_select_mode);

void MeshToolsUI::cb_Pencil_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Magic_Wand->value(0);
Flood_Fill->value(0);
MT->Set_Active_Scalar(-1);
MT->Activate_Tags_Display_Mode();
MT->SetColorScaleId(-1);
MT->Activate_Pencil();
MT->redraw();
}
void MeshToolsUI::cb_Pencil(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Pencil_i(o,v);
}

static const char *idata_pencil[] = {
"19 19 -91 1",
" \377\377\377!\377\377\377\"\212NS#\240""ej$\302|\202%\230V]&oRV\'pY](\5\1\7)\
))+*(()+\222\222\224,\204\206\214-\234\236\244.*/9/CEI0\203\206\212""1\25\36\
\36""2\27\37\37""3gyy4v\210\210""5s\203\203""6\200\221\221""7~\217\217""8\202\
\223\223""9\240\256\256:\241\256\256;\215\225\225<\217\226\226=\231\233\230>\
\216\212|?\377\302\0@\377\272\0""A\366\267\tB\355\261\13""C\345\263!D\377\266\
\0""E\334\235\0""F\241s\0G\366\261\tH\343\250\25I\232\203LJ\237\210QK\262{\0L\
\24\16\0MlL\5N\377\254\0O\36\35\33P\204\202~Q\252m\0R\20\16\fS\211\210\207T\
\306x<U\234rTVrZOWb:+X7\35\27Y|wvZ\n\1\0[\377\0\0\\\322\0\0]\316\0\0^\313\0\0_\
\312\0\0`\311\0\0""a\303\0\0""b\24\0\0""c\5\0\0""d\377\1\1""e\371\5\4""f\377\
\5\5g\365\b\bh\273\7\7i\234..j\234//k\240""11l\236""11m\233""11n\231""33o\233""\
66p\21\b\bq\16\b\br}JJs\234``t\25\r\ru\f\b\bv\220""ddw\25\20\20x\351\351\351y)\
))z\0\0\0",
"                   ",
"             0P,   ",
"            /MAHI- ",
"           +ZE@DGS ",
"          <Y\"WC?K* ",
"         3ms9$VFR  ",
"        5o[gv:&(   ",
"       4k[[[fr2    ",
"      7n[[[[]b     ",
"     6l[[[[^t      ",
"    8i[[[[_u       ",
"   ;j[[[[\\p        ",
"   \'d[[[ac         ",
"  =U%e[`w   !!z!x  ",
"  >NT#hq    !!z!!  ",
"  JBQX1     zzzzz  ",
" )LO.       !!z!!  ",
" y          !!z!!  ",
"                   "
};
static Fl_Pixmap image_pencil(idata_pencil);

void MeshToolsUI::cb_Magic_Wand_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Pencil->value(0);
Flood_Fill->value(0);
MT->Set_Active_Scalar(-1);
MT->Activate_Tags_Display_Mode();
MT->SetColorScaleId(-1);
MT->Activate_Magic_Wand();
MT->redraw();
}
void MeshToolsUI::cb_Magic_Wand(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Magic_Wand_i(o,v);
}

static const char *idata_magic_wand[] = {
"19 19 -64 1",
" \377\377\377!;\0\4\" \1\5#\24\13\17$\0\0\1%STX&(+5\'\'+7((,7),0;*236+%*6,(-8\
-).9.,/6//6<0\26\34 1-232\377\322Z3\377\271\21""4\377\273\27""5\377\273\31""6\
\377\276 7\377\276#8\377\303%9\377\306""6:\377\312G;\377\311I<\377\314Q=\300\
\206\0>\277\205\0?\276\205\0@\273\202\0""A\273\203\0""B\272\202\0""C\270\201\
\0""D[>\0""EY>\0""F\24\16\1G\377\270\24H\377\266\32I\377\273\36J\377\303""CKV:\
\0LT9\0MR7\0NP5\0OO4\0PO5\0QG0\0R\26\17\1S \25\0T\f\b\1U\16\t\1V\22\13\1W\20\n\
\1X\16\b\0Y\f\7\0Z\17\t\1[\16\b\1\\\322\0\0]\320\0\0^v\0\0_\24\0\0",
"             J 4   ",
"             H 3   ",
"           ; : < G7",
"           98      ",
"             #   I5",
"            !\\\"    ",
"           $]^/ 2  ",
"          RE_1  6  ",
"         X@D0      ",
"        [=P)       ",
"       WAN,        ",
"      T@K(         ",
"     U?P\'          ",
"    VBL-           ",
"   Y>M+            ",
"  Z?O(             ",
" FCL-              ",
"%SQ&               ",
" *.                "
};
static Fl_Pixmap image_magic_wand(idata_magic_wand);

void MeshToolsUI::cb_Flood_Fill_i(Fl_Button* o, void*) {
  ((Fl_Button *)o)->value(1);
Pencil->value(0);
Magic_Wand->value(0);
MT->Set_Active_Scalar(-1);
MT->Activate_Tags_Display_Mode();
MT->SetColorScaleId(-1);
MT->Activate_Flood_Fill();
MT->redraw();
}
void MeshToolsUI::cb_Flood_Fill(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Flood_Fill_i(o,v);
}

static const char *idata_Flood_fill[] = {
"19 19 -84 1",
" \377\377\377!\377\0\0\"\374\0\0#\371\0\0$\366\0\0%\347\0\0&\336\0\0\'\275\0\
\0(\264\0\0)\256\0\0*\245\0\0+\212\0\0,\207\0\0-\204\0\0.\203\0\0/\200\0\0""0}\
\0\0""1z\0\0""2r\0\0""3f\0\0""4Z\0\0""5T\0\0""6M\0\0""7J\0\0""8C\0\0""9B\0\0:A\
\0\0;<\0\0<:\0\0=0\0\0>-\0\0?)\0\0@ \0\0""A\36\0\0""B\30\0\0""C\25\0\0""D\16\
\0\0""E\6\0\0""FrrrGoooHeeeI\\\\\\JZZZKXXXLTTTMSSSNEEEOAAAP@@@Q<<<R;;;S222T---\
U,,,V+++W(((X$$$Y   Z\36\36\36[\35\35\35\\\34\34\34]\33\33\33^\27\27\27_\26\
\26\26`\25\25\25""a\24\24\24""b\22\22\22""c\21\21\21""d\20\20\20""e\17\17\17""\
f\16\16\16g\r\r\rh\f\f\fi\13\13\13j\t\t\tk\b\b\bl\7\7\7m\6\6\6n\5\5\5o\4\4\4p\
\3\3\3q\2\2\2r\1\1\1s\0\0\0",
"                   ",
"       kk          ",
"      jOKs         ",
"     Nc  Vo        ",
"     Vd HsnX       ",
"     JUIsDlb[F     ",
"     Kfs:;?_hrc    ",
"     ]s8!>4+]fs^   ",
"    Pr<!%B<$-ZmsL  ",
"   Rq7!\"AC@2!-\\r]  ",
"  Wq6!!#E.35!1rnM  ",
"  oo*!!!*=9&0rqdJ  ",
"  Tgk)!!!!!/qipfJ  ",
"   ]an(!!!.paGrgJ  ",
"    `Zm\'!,oe  shJ  ",
"     hXp+ng   srQ  ",
"      m`pk    sn   ",
"       SY     i    ",
"                   "
};
static Fl_Pixmap image_Flood_fill(idata_Flood_fill);

void MeshToolsUI::cb_Lasso_plus_i(Fl_Button*, void*) {
  MT->Set_Active_Scalar(-1);
MT->Activate_Tags_Display_Mode();
MT->SetColorScaleId(-1);
MT->SetModeTool(2);
MT->redraw();
}
void MeshToolsUI::cb_Lasso_plus(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Lasso_plus_i(o,v);
}

static const char *idata_Lasso_plus[] = {
"16 19 -90 1",
"!\0\0\0\"\4\4\4#\5\5\5$\r\r\r%\16\16\16&\20\20\20\'\25\25\25(\26\26\26)\27\
\27\27*\30\30\30+\37\37\37,###-\'\'\'.+++/---0...1///200036664;;;5<<<6>>>7?\?\
\?8@@@9AAA:CCC;DDD<GGG=OOO>PPP?QQQ@SSSATTTBVVVCWWWDZZZE[[[F___GbbbHgggIjjjJlll\
KmmmLpppMqqqNrrrOsssPyyyQ}}}R~~~S\200\200\200T\202\202\202U\210\210\210V\216\
\216\216W\225\225\225X\235\235\235Y\237\237\237Z\241\241\241[\242\242\242\\\
\244\244\244]\247\247\247^\260\260\260_\262\262\262`\265\265\265""a\277\277\
\277""b\300\300\300""c\303\303\303""d\312\312\312""e\317\317\317""f\322\322\
\322g\324\324\324h\327\327\327i\334\334\334j\335\335\335k\342\342\342l\345\
\345\345m\347\347\347n\351\351\351o\352\352\352p\354\354\354q\357\357\357r\
\361\361\361s\364\364\364t\365\365\365u\367\367\367v\371\371\371w\373\373\373x\
\374\374\374y\375\375\375z\377\377\377",
"zzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzxLJ",
"zzzzzzzzzzzzj5*D",
"tzzzzzzzzzz[(Va>",
"2IhzzzzzztG-bzc<",
"52,Ffzzze/?rzzd;",
"MSnN+@eZ\'Wzzzzg:",
"^6zznT,2ezzzzzi8",
"m.ozzzsvzzzzzzl7",
"z6`zzzzzzzzzzzo9",
"zLOzzzzzzzzzzzq9",
"z^6zzzzzzzzzzzu;",
"zk%1]wzzzzzzzyp4",
"zL\'Q#C_XUKA\\\\\\03",
"zB=\'\"\'@HP\\zz!znv",
"zi$&Eizzzzzz!zzz",
"zY)dzzzzzz!!!!!z",
"zR\\zzzzzzzzz!zzz",
"zzzzzzzzzzzz!zzz"
};
static Fl_Pixmap image_Lasso_plus(idata_Lasso_plus);

void MeshToolsUI::cb_Edit_flag_i(Fl_Button*, void*) {
  flag_show();
}
void MeshToolsUI::cb_Edit_flag(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Edit_flag_i(o,v);
}

static unsigned char idata_Flag02[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,0,0,0,
0,255,0,0,231,255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,255,0,0,231,255,0,0,
231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,
0,0,0,0,255,0,0,231,0,0,0,0,255,0,0,231,255,255,255,255,255,0,0,231,0,0,0,0,
255,0,0,231,255,255,255,255,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,255,0,0,231,
255,0,0,231,255,0,0,231,0,0,0,0,255,0,0,231,255,0,0,231,255,0,0,231,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,255,0,0,231,255,0,0,231,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,158,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,255,158,0,231,255,158,0,
231,255,158,0,231,240,161,29,14,223,149,27,32,255,0,0,231,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,0,255,104,0,255,0,0,0,255,0,0,0,255,0,0,0,255,249,22,4,234,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,254,107,2,255,0,0,0,
255,0,0,0,255,255,158,0,231,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,255,158,0,231,0,0,0,255,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,255,15,0,255,255,104,0,255,255,104,0,255,
255,158,0,231,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,252,21,3,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,255,104,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,
0,0,248,17,5,255,254,15,0,255,254,15,0,255,255,15,0,255,255,104,0,255,255,104,
0,255,255,158,0,255,255,158,0,255,255,158,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Flag02(idata_Flag02, 19, 19, 4, 0);

void MeshToolsUI::cb_Show_Tag_Window_i(Fl_Button* o, void*) {
  if (((Fl_Button *)o)->value()==0)
{((Fl_Button *)o)->value(1);}
else
{((Fl_Button *)o)->value(0);}

MT->Set_Active_Scalar(-1);//may call update_rgb

MT->SetColorScaleId(-1);//may call update_rgb
MT->Change_Tags_Display_Mode();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_Show_Tag_Window(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Show_Tag_Window_i(o,v);
}

static const char *idata_Show_Tag_Window[] = {
"19 19 -233 1",
"!\377\377\377\"\377\24\377#\365 \365$\366""3\366%\375i\375&\370k\370\'\353h\
\352(\377y\377)\357\231\356*\376\346\376+\377\374\377,\357N\375-\336\217\345.\
\304\264\320/\236@\346""0\246Q\350""1\245Y\337""2z\0\377""3}\0\377""4\204\r\
\377""5\205\20\377""6\203\22\377""7\206\22\377""8\217#\377""9\225""3\377:\227""\
3\377;\240""D\377<\233N\357=\272w\377>\302\210\377?~\16\377@\203\30\375""A\
\210\37\377""B\235""D\377""C\203J\306""D\214V\311""E\236q\322""F\274\233\342G\
\352\342\365H\0\0\377I\0\0\376J\0\1\317K\0\3\316L\0\1\274M\0\2\270N\f\f\377O\r\
\r\377P\21\21\377Q\22\22\377R\"\"\377SAA\377TDD\377UUU\377Vff\377W\6\6\16Xww\
\377Y{{\377Z\215\215\377[\230\230\377\\\237\237\377]\363\363\377^\344\344\351_\
\375\375\377`\0\6\376""a\0\b\374""b\0\6\352""c\0\4\351""d\0\6\341""e\0\7\305""\
f\0\3\270g\0\6\266h\255\260\377i\247\250\330j\275\276\337k\0\13\367l\0\n\332m\
\0\b\304n!-\377o*1\304p?J\371qGN\306r\306\310\360s\307\310\337t\351\352\376u\
\2\24\367v\2\21\323w\1\nyx\3\23\352y\3\24\352z\3\22\324{\3\22\323|\3\22\315}\
\3\21\312~\3\20\301\177\1\6""C\200\3\20\273\201\2\tl\202\20\37\367\203\24#\
\361\204\27#\312\205<H\354\206""CM\314\207ht\377\210""en\351\211\210\217\364\
\212\213\222\351\213\245\252\355\214\301\305\377\215\307\313\377\216\304\310\
\365\217\317\322\377\220\321\323\357\221\346\350\376\222\353\354\373\223\0\2\
\24\224\0\1\n\225%)S\226\371\372\377\227\354\360\372\230""7k\313\231""Eu\317\
\232u\231\333\233<\360\377\234M\362\377\235\214\344\352\236\0\377\377\237\r\
\377\377\240\20\377\377\241\21\377\377\242\22\377\377\243\"\377\377\244#\377\
\377\245""1\372\372\246""3\377\377\247""8\373\373\250""D\377\377\251U\377\377\
\252""f\377\377\253w\377\377\254t\357\357\255\306\352\351\256\344\346\345\257\
\0\377\0\260\r\377\r\261\20\377\20\262\21\377\21\263\22\377\22\264\"\377\"\
\265#\377#\266*\377*\267""2\377""2\270""3\377""3\271""6\344""6\272""9\345""9\
\273<\345<\274G\347G\275""f\377""f\276w\377w\277x\355x\300\210\377\210\301\
\302\371\277\302\377\377\22\303\374\374\22\304\315\315\201\305\336\335\221\
\306\307\307\260\307\362\362\337\310\351\351\345\311\375\375\374\312\363\363\
\362\313\352\352\351\314\332\332\331\315\322\322\321\316\372\366""9\317\357\
\353<\320\377\357!\321\377\361""4\322\376\360""A\323\377\372\271\324\360\357\
\346\325\310\307\277\326\375\374\366\327\371\370\363\330\362\361\355\331\313\
\264k\332\317\272u\333\324\305\226\334\375\374\371\335\361\357\352\336\377\
\205\0\337\377\213\f\340\361\255""c\341\366\314\234\342\364\323\255\343\367\
\336\301\344\377\210\22\345\377\231""3\346\377\252U\347\377\262""f\350\377\
\273w\351\372\371\370\352\362\361\360\353\351\350\347\354\347\346\345\355\377y\
\0\356\377\200\r\357\364\262v\360\341\334\331\361\377""1!\362\377""4%\363\377""\
B4\364\377SF\365\377\237\230\366\342\207\203\367\344\217\214\370\337\235\232\
\371\377\0\0\372\377\r\r\373\377\16\16\374\377\20\20\375\377\22\22\376\377\37\
\37\377\377\"\"\0\377##\1\377""DD\2\377""ff\3\375\374\374\4\371\370\370\5\350\
\347\347\6\346\345\345\7\336\335\335\b\332\331\331\t\0\0\0",
"\0\372\377\377\374\376""DNQSRO\231\264\261\267\267\260\265",
"\375\371\2\1\371\373""CHPPXH\230\262\257\270\276\257\263",
"\375\371\1\1\371\373""CHHPTH\230\262\257\270\300\257\263",
"\375\371\2\2\371\373""CHPXUH\230\262\257\275\276\257\263",
"\375\371\371\371\371\375""EVZ\\[Y\232\266\257\257\257\257\263",
"\363\361\362\362\364\365G]\217h\214\226\227\301\277\273\272\271\274",
"\321\320\322\323!!tpa`In\215!!*&#$",
"\302\303\307!!_\205""bu\203\207k\202\221!!!(\"",
"\302\305\5\311!\216lywW\225xc\211!!!+%",
"\302\306\7\312!\213Kz\223\t\t\200""d\210!!!\4)",
"\302\304\315\354\326rmv\201\224\177{J\212!!\3\6\'",
"\316\317\325\314\353\327\206L}~|e\204\222!\351\313-,",
"0/1.\b\310^qgMfo\220\334\352\256\235\233\234",
"629B<F\360\324sij\330\335\255\254\247\243\236\242",
"73;>3@\370\340\342\341\343\357\333\245\236\253\251\243\242",
"733=3?\366\336\345\350\347\355\331\241\236\252\253\246\242",
"73::3?\366\336\346\346\350\355\331\241\236\250\251\236\242",
"84775A\367\337\344\344\344\356\332\243\240\242\242\237\244",
"84775A\367\337\344\344\344\356\332\243\240\242\242\237\244"
};
static Fl_Pixmap image_Show_Tag_Window(idata_Show_Tag_Window);

void MeshToolsUI::cb_Edit_name_i(Fl_Button*, void*) {
  name_show();
}
void MeshToolsUI::cb_Edit_name(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Edit_name_i(o,v);
}

static unsigned char idata_name[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,44,7,255,68,45,
7,255,69,46,7,255,67,44,7,255,64,42,6,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,55,9,255,89,60,
9,255,97,64,10,255,101,67,11,255,102,67,11,255,100,66,11,255,94,63,10,255,85,
57,9,255,78,51,8,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,122,81,14,255,0,0,0,255,133,89,16,255,134,
89,16,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,92,61,10,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,165,110,19,255,163,108,19,255,157,104,19,255,147,98,17,
255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
136,91,16,255,0,0,0,255,0,0,0,255,180,123,21,255,0,0,0,255,0,0,0,255,193,128,23,
255,190,127,23,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,126,84,15,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,107,19,255,0,0,0,255,0,0,0,255,
205,126,25,255,0,0,0,255,0,0,0,255,216,144,26,255,0,0,0,255,0,0,0,255,200,126,
24,255,0,0,0,255,0,0,0,255,149,101,18,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,160,108,19,255,181,123,22,255,0,0,0,255,0,0,0,255,218,36,33,255,0,0,0,255,
0,0,0,255,234,159,28,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
172,113,20,255,148,100,17,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,123,21,255,
203,97,27,255,220,24,34,255,218,28,33,255,218,29,33,255,216,19,33,255,231,89,32,
255,250,179,30,255,235,109,31,255,217,20,33,255,218,28,33,255,219,29,33,255,222,
23,34,255,199,82,27,255,164,115,19,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,134,
22,255,214,76,30,255,219,24,34,255,218,31,33,255,218,31,33,255,216,25,33,255,
225,58,33,255,255,180,31,255,230,76,32,255,216,23,33,255,218,31,33,255,218,31,
33,255,219,26,34,255,212,57,31,255,179,124,21,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,202,141,24,255,219,101,29,255,217,21,33,255,218,29,33,255,218,30,33,255,
215,18,33,255,232,84,33,255,255,189,32,255,237,106,32,255,215,18,33,255,218,29,
33,255,218,30,33,255,218,20,33,255,213,84,29,255,189,133,22,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,208,140,25,255,228,151,28,255,227,81,32,255,218,31,33,255,
218,28,33,255,227,66,33,255,251,164,32,255,255,183,32,255,253,172,32,255,231,80,
33,255,218,30,33,255,218,30,33,255,224,70,32,255,219,141,27,255,197,133,24,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,142,26,255,231,156,28,255,246,167,30,255,
248,148,31,255,248,148,32,255,255,177,32,255,255,183,33,255,255,180,33,255,255,
182,33,255,255,179,32,255,249,150,32,255,245,144,31,255,239,162,29,255,223,152,
27,255,201,134,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,155,28,255,
246,165,30,255,255,175,31,255,255,180,32,255,255,181,32,255,252,166,33,255,240,
118,33,255,254,171,33,255,255,178,32,255,255,178,32,255,252,173,31,255,240,161,
29,255,223,149,27,255,203,135,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
0,0,0,255,243,163,30,255,0,0,0,255,255,174,32,255,0,0,0,255,0,0,0,255,223,51,
32,255,244,131,32,255,255,181,31,255,0,0,0,255,0,0,0,255,0,0,0,255,219,146,27,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,251,167,37,255,0,0,0,255,0,0,0,255,
240,161,32,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,164,164,164,1,202,
141,24,9,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,255,185,41,255,0,0,0,
255,0,0,0,255,255,191,43,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,
0,0,0,255,255,186,41,255,0,0,0,255,0,0,0,255,255,194,43,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,
0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,228,73,35,255,0,0,0,255,0,0,0,255,234,99,
37,255,230,78,36,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,164,164,29,0,0,0,0,0,0,0,0,0,0,0,0,217,27,
33,255,217,27,33,255,216,26,33,255,217,27,33,255,217,27,33,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_name(idata_name, 19, 19, 4, 0);

void MeshToolsUI::cb_Orientation_i(Fl_Button*, void*) {
  MT->ShowOrientation();
MT->redraw();
}
void MeshToolsUI::cb_Orientation(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Orientation_i(o,v);
}

static const char *idata_grid2[] = {
"20 20 -5 1",
"!\332\37!\"\373\247\0#\363p*$\356N7%\0\0\0",
"%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%!!!%%%%%%",
"%%%%%%%%%%%%%!%%%%%%",
"%%%%%%%%%%#%!%%%%%%%",
"%%%%%%%%%%#!%%%%%%%%",
"%%%%%%%%%%#!!!%%%%%%",
"%%%%%%%%%%#%%%%%%%%%",
"%%%%%%%%%%#%%%%%%%%%",
"%%%%%%%%%%#%%%%%%%%%",
"%%%%%%%%%%#%%%%%%%%%",
"%%%%%%%%%%#%%%%%%%%%",
"%%%%%%%%%%#%%%%%%%%%",
"%%%%%%%%%#%#%%%%$%$%",
"%%%%%%%%#%%%#%%%$%$%",
"%\"%\"%%%#%%%%%#%%%$%%",
"%\"%\"%%#%%%%%%%#%%$%%",
"%%\"%%#%%%%%%%%%#%$%%",
"%\"%\"%%%%%%%%%%%%%%%%",
"%\"%\"%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%"
};
static Fl_Pixmap image_grid2(idata_grid2);

void MeshToolsUI::cb_Move_cam_centre_of_mass_i(Fl_Button* o, void*) {
  if (((Fl_Button *)o)->value()==0)
{
((Fl_Button *)o)->value(1);

//MT->Cam_Centre_At_Landmark(-2);
MT->Compute_Global_Mean(0);
MT->Cam_Centre_At_Landmark(-2);

}
else
{
((Fl_Button *)o)->value(0);
MT->Cam_Centre_At_Landmark(-1);
}
MT->save_ini_param();
MT->redraw();
}
void MeshToolsUI::cb_Move_cam_centre_of_mass(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Move_cam_centre_of_mass_i(o,v);
}

static const char *idata_Move_cam[] = {
"15 14 -5 1",
" \377\377\377!\377\377\377\"\363u\17#\333]\t$\0\0\0",
"$              ",
"$$             ",
"$             $",
"  $$$$$$$$   $ ",
"  $\"\"\"\"\"\"$$ $  ",
"  $\"\"\"\"\"$##$   ",
"  $\"\"\"\"\"$##  $$",
"  $\"\"\"\"\"\"$$$   ",
"  $$$$$$$$! $  ",
"      $      $ ",
"     $$$      $",
"    $ $ $      ",
"    $  $$      ",
"   $   $ $     "
};
static Fl_Pixmap image_Move_cam(idata_Move_cam);

void MeshToolsUI::cb_zpan1_i(SpecialSlider2* o, void*) {
  MT->panz2(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_zpan1(SpecialSlider2* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zpan1_i(o,v);
}

void MeshToolsUI::cb_zroll1_i(SpecialRoller4* o, void*) {
  MT->rollz2(((Fl_Roller *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_zroll1(SpecialRoller4* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zroll1_i(o,v);
}

void MeshToolsUI::cb_ypan1_i(SpecialSlider2* o, void*) {
  MT->pany2(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_ypan1(SpecialSlider2* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ypan1_i(o,v);
}

void MeshToolsUI::cb_yroll1_i(SpecialRoller4* o, void*) {
  MT->rolly2(((Fl_Roller *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_yroll1(SpecialRoller4* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_yroll1_i(o,v);
}

void MeshToolsUI::cb_zpan_i(SpecialSlider2* o, void*) {
  MT->panz(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_zpan(SpecialSlider2* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zpan_i(o,v);
}

void MeshToolsUI::cb_zroll_i(SpecialSlider2* o, void*) {
  MT->rollz(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_zroll(SpecialSlider2* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zroll_i(o,v);
}

void MeshToolsUI::cb_zoom_i(SpecialRoller4* o, void*) {
  MT->SetZoom(((Fl_Roller *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_zoom(SpecialRoller4* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_zoom_i(o,v);
}

void MeshToolsUI::cb_CP_cut_half2_i(Fl_Button*, void*) {
  float tz = 0;
int dispmode = MT->Get_mode_cam_centre_of_mass();
if (dispmode ==1)
{
	tz = 	-1*MT->get_objects_centre_of_mass(2);
}

MT->cam_validate(
	MT->cam_getnear(),
	MT->cam_getfar(),
	MT->cam_getaz(),
	MT->cam_getel(),
	MT->cam_gettw(),
	MT->cam_gettx(),
	MT->cam_getty(),
	tz
);

MT->redraw();
}
void MeshToolsUI::cb_CP_cut_half2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CP_cut_half2_i(o,v);
}

static unsigned char idata_Clipping_plane_z0[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,167,81,10,181,153,74,87,194,
166,81,165,210,187,92,211,221,201,102,233,225,206,105,234,223,202,102,212,217,
191,93,167,209,178,86,91,214,181,88,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,149,72,85,188,162,79,211,230,213,109,255,
237,229,127,255,181,174,95,255,142,131,66,255,132,120,58,255,148,138,72,255,193,
187,105,255,240,230,129,255,228,206,104,215,211,180,86,91,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,130,64,137,205,181,89,255,248,241,131,
255,152,142,74,255,77,59,6,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,
70,52,0,255,85,69,16,255,178,171,98,255,243,231,125,255,204,176,85,144,221,188,
91,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,142,69,138,203,179,89,255,240,239,132,
255,106,92,34,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,
70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,134,122,62,255,244,235,129,255,
211,181,87,148,0,0,0,0,0,0,0,0,0,0,0,0,187,160,78,81,179,153,75,255,255,251,135,
255,115,101,41,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,
70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,150,
140,76,255,235,221,116,255,212,180,87,91,0,0,0,0,218,186,90,10,149,126,62,218,
242,223,113,255,177,170,92,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,
70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,
0,255,70,52,0,255,70,52,0,255,214,210,123,255,208,183,90,225,222,188,91,15,
166,141,69,89,181,156,77,255,238,235,124,255,97,81,25,255,70,52,0,255,70,52,0,
255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,130,118,58,255,213,
199,101,255,190,160,77,99,147,124,61,166,220,195,97,255,188,181,94,255,70,52,0,
255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,
255,82,65,12,255,179,168,83,255,186,159,77,176,137,115,57,212,241,220,110,255,
152,142,68,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,
255,70,52,0,255,70,52,0,255,70,52,0,255,150,140,65,255,185,161,78,217,135,114,
56,235,249,229,116,255,140,129,59,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,
255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,140,129,59,255,
183,161,79,235,135,113,56,235,248,226,114,255,155,145,70,255,70,52,0,255,70,52,
0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,
70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,
0,255,153,143,67,255,177,154,75,235,137,116,57,214,237,212,106,255,193,187,97,
255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,
255,70,52,0,255,85,69,15,255,186,176,87,255,167,143,69,218,148,126,62,168,212,
184,91,255,243,241,128,255,104,89,30,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,
255,70,52,0,255,70,52,0,255,70,52,0,255,139,128,62,255,227,211,106,255,159,134,
65,179,170,145,71,92,171,145,72,255,255,240,122,255,189,183,97,255,70,52,0,255,
70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,
0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,71,54,1,255,223,220,123,
255,203,180,89,255,166,140,68,103,219,187,91,12,145,123,61,222,227,198,99,255,
255,255,135,255,129,117,50,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,
70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,
0,255,165,156,81,255,248,234,120,255,157,133,65,229,211,181,87,17,0,0,0,0,189,
161,78,88,161,136,68,255,248,224,112,255,249,249,135,255,124,111,46,255,70,52,0,
255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,153,144,71,255,255,248,130,255,182,156,77,255,180,153,75,
98,0,0,0,0,0,0,0,0,0,0,0,0,165,141,69,146,177,150,75,255,250,226,113,255,254,
254,135,255,174,167,85,255,89,73,16,255,70,52,0,255,70,52,0,255,70,52,0,255,70,
52,0,255,70,52,0,255,101,86,27,255,199,194,105,255,255,246,127,255,195,168,83,
255,158,134,66,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,186,90,2,149,127,63,147,
172,145,73,255,234,206,103,255,255,243,124,255,237,235,124,255,181,174,88,255,
148,137,63,255,139,128,57,255,153,143,68,255,192,186,96,255,246,242,126,255,244,
223,112,255,183,156,77,255,142,121,59,154,208,178,86,5,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,171,146,72,95,155,132,65,219,189,161,80,255,226,198,
98,255,245,222,111,255,252,233,118,255,253,235,119,255,248,227,114,255,231,206,
103,255,196,169,83,255,157,132,65,223,164,139,68,100,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,168,82,15,164,140,69,98,155,
132,65,174,159,135,67,215,163,138,68,234,164,138,69,234,159,134,66,216,154,130,
64,177,158,135,66,102,188,160,78,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Clipping_plane_z0(idata_Clipping_plane_z0, 20, 20, 4, 0);

void MeshToolsUI::cb_CP_normal_cp2_i(Fl_Button*, void*) {
  float tz = -5*MT->cam_getzoom();
int dispmode = MT->Get_mode_cam_centre_of_mass();
if (dispmode ==1)
{
	tz += 	-1*MT->get_objects_centre_of_mass(2);
}


MT->cam_validate(
	MT->cam_getnear(),
	MT->cam_getfar(),
	MT->cam_getaz(),
	MT->cam_getel(),
	MT->cam_gettw(),
	MT->cam_gettx(),
	MT->cam_getty(),
        tz
       );

MT->redraw();
}
void MeshToolsUI::cb_CP_normal_cp2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CP_normal_cp2_i(o,v);
}

static unsigned char idata_Clipping_plane_normal[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,167,81,10,181,153,74,87,194,
166,81,165,210,187,92,211,221,201,102,233,225,206,105,234,223,202,102,212,217,
191,93,167,209,178,86,91,214,181,88,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,149,72,85,188,162,79,211,230,213,109,255,
254,247,140,255,255,255,159,255,255,255,170,255,255,255,174,255,255,255,170,255,
255,255,158,255,248,239,135,255,228,206,104,215,211,180,86,91,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,130,64,137,205,181,89,255,255,248,
136,255,255,255,166,255,255,255,183,255,255,255,194,255,255,255,200,255,255,255,
203,255,255,255,203,255,255,255,199,255,255,255,190,255,255,255,168,255,243,231,
125,255,204,176,85,144,221,188,91,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,142,69,
138,203,179,89,255,255,255,143,255,255,255,172,255,255,255,190,255,255,255,201,
255,255,255,208,255,255,255,213,255,255,255,215,255,255,255,216,255,255,255,215,
255,255,255,210,255,255,255,200,255,255,255,179,255,245,236,130,255,211,181,87,
148,0,0,0,0,0,0,0,0,0,0,0,0,187,160,78,81,179,153,75,255,255,251,135,255,255,
255,169,255,255,255,189,255,255,255,201,255,255,255,209,255,255,255,215,255,255,
255,220,255,255,255,223,255,255,255,224,255,255,255,223,255,255,255,219,255,255,
255,213,255,255,255,201,255,255,255,176,255,235,221,116,255,212,180,87,91,0,0,0,
0,218,186,90,10,149,126,62,218,242,223,113,255,255,255,158,255,255,255,182,
255,255,255,197,255,255,255,207,255,255,255,215,255,255,255,220,255,255,255,225,
255,255,255,228,255,255,255,229,255,255,255,228,255,255,255,225,255,255,255,220,
255,255,255,211,255,255,255,195,255,255,255,158,255,208,183,90,225,222,188,91,
15,166,141,69,89,181,156,77,255,255,254,137,255,255,255,170,255,255,255,189,
255,255,255,201,255,255,255,210,255,255,255,217,255,255,255,224,255,255,255,229,
255,255,255,232,255,255,255,232,255,255,255,231,255,255,255,229,255,255,255,223,
255,255,255,216,255,255,255,204,255,255,255,179,255,234,220,116,255,190,160,77,
99,147,124,61,166,220,195,97,255,255,255,148,255,255,255,176,255,255,255,192,
255,255,255,202,255,255,255,211,255,255,255,218,255,255,255,225,255,255,255,230,
255,255,255,233,255,255,255,234,255,255,255,233,255,255,255,230,255,255,255,225,
255,255,255,218,255,255,255,208,255,255,255,188,255,252,246,139,255,186,159,77,
176,137,115,57,212,241,220,110,255,255,255,154,255,255,255,178,255,255,255,192,
255,255,255,202,255,255,255,210,255,255,255,218,255,255,255,224,255,255,255,230,
255,255,255,233,255,255,255,234,255,255,255,232,255,255,255,229,255,255,255,224,
255,255,255,218,255,255,255,208,255,255,255,191,255,255,255,151,255,185,161,78,
217,135,114,56,235,249,229,116,255,255,255,155,255,255,255,177,255,255,255,191,
255,255,255,200,255,255,255,208,255,255,255,216,255,255,255,222,255,255,255,227,
255,255,255,230,255,255,255,231,255,255,255,230,255,255,255,227,255,255,255,222,
255,255,255,215,255,255,255,206,255,255,255,191,255,255,255,154,255,183,161,79,
235,135,113,56,235,248,226,114,255,255,255,152,255,255,255,175,255,255,255,189,
255,255,255,198,255,255,255,206,255,255,255,212,255,255,255,218,255,255,255,222,
255,255,255,225,255,255,255,226,255,255,255,225,255,255,255,222,255,255,255,218,
255,255,255,212,255,255,255,203,255,255,255,186,255,255,255,150,255,177,154,75,
235,137,116,57,214,237,212,106,255,255,255,146,255,255,255,169,255,255,255,184,
255,255,255,193,255,255,255,201,255,255,255,207,255,255,255,213,255,255,255,217,
255,255,255,220,255,255,255,220,255,255,255,219,255,255,255,217,255,255,255,212,
255,255,255,206,255,255,255,197,255,255,255,179,255,255,250,138,255,167,143,69,
218,148,126,62,168,212,184,91,255,255,255,137,255,255,255,162,255,255,255,178,
255,255,255,188,255,255,255,195,255,255,255,201,255,255,255,206,255,255,255,210,
255,255,255,212,255,255,255,213,255,255,255,212,255,255,255,210,255,255,255,206,
255,255,255,199,255,255,255,189,255,255,255,167,255,243,228,117,255,159,134,65,
179,170,145,71,92,171,145,72,255,255,240,122,255,255,255,151,255,255,255,169,
255,255,255,180,255,255,255,188,255,255,255,194,255,255,255,199,255,255,255,202,
255,255,255,205,255,255,255,205,255,255,255,204,255,255,255,202,255,255,255,198,
255,255,255,191,255,255,255,177,255,255,255,149,255,203,180,89,255,166,140,68,
103,219,187,91,12,145,123,61,222,227,198,99,255,255,255,135,255,255,255,157,255,
255,255,171,255,255,255,180,255,255,255,186,255,255,255,191,255,255,255,194,255,
255,255,196,255,255,255,197,255,255,255,196,255,255,255,193,255,255,255,188,255,
255,255,178,255,255,255,158,255,248,234,120,255,157,133,65,229,211,181,87,17,0,
0,0,0,189,161,78,88,161,136,68,255,248,224,112,255,255,255,139,255,255,255,
157,255,255,255,168,255,255,255,176,255,255,255,181,255,255,255,185,255,255,255,
187,255,255,255,187,255,255,255,185,255,255,255,181,255,255,255,173,255,255,255,
158,255,255,248,130,255,182,156,77,255,180,153,75,98,0,0,0,0,0,0,0,0,0,0,0,0,
165,141,69,146,177,150,75,255,250,226,113,255,255,255,136,255,255,255,151,255,
255,255,161,255,255,255,167,255,255,255,171,255,255,255,173,255,255,255,172,255,
255,255,170,255,255,255,162,255,255,255,150,255,255,246,127,255,195,168,83,255,
158,134,66,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,186,90,2,149,127,63,147,172,
145,73,255,234,206,103,255,255,243,124,255,255,255,137,255,255,255,146,255,255,
255,151,255,255,255,152,255,255,255,151,255,255,255,145,255,255,252,133,255,244,
223,112,255,183,156,77,255,142,121,59,154,208,178,86,5,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,171,146,72,95,155,132,65,219,189,161,80,255,226,198,
98,255,245,222,111,255,252,233,118,255,253,235,119,255,248,227,114,255,231,206,
103,255,196,169,83,255,157,132,65,223,164,139,68,100,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,168,82,15,164,140,69,98,155,
132,65,174,159,135,67,215,163,138,68,234,164,138,69,234,159,134,66,216,154,130,
64,177,158,135,66,102,188,160,78,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Clipping_plane_normal(idata_Clipping_plane_normal, 20, 20, 4, 0);

void MeshToolsUI::cb_xpan1_i(SpecialSlider2* o, void*) {
  MT->panx2(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_xpan1(SpecialSlider2* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_xpan1_i(o,v);
}

void MeshToolsUI::cb_xroll1_i(SpecialRoller4* o, void*) {
  MT->rollx2(((Fl_Roller *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_xroll1(SpecialRoller4* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_xroll1_i(o,v);
}

void MeshToolsUI::cb_Ok_cam_i(Fl_Button*, void*) {
  MT->cam_validate(
Cam_near->value(),
Cam_far->value(),
Cam_az->value(),
Cam_el->value(),
Cam_tw->value(),
Cam_tx->value(),
Cam_ty->value(),
Cam_tz->value()
);
MT->redraw();
}
void MeshToolsUI::cb_Ok_cam(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_cam_i(o,v);
}

void MeshToolsUI::cb_CP_cut_half_i(Fl_Button*, void*) {
  Cam_near->value(MT->cam_getnear());
Cam_far->value(MT->cam_getfar());
Cam_tx->value(MT->cam_gettx());
Cam_ty->value(MT->cam_getty());
Cam_tz->value(MT->cam_gettz());
Cam_az->value(MT->cam_getaz());
Cam_el->value(MT->cam_getel());
Cam_tw->value(MT->cam_gettw());
//MT->panz(0);

float tz = 0;
int dispmode = MT->Get_mode_cam_centre_of_mass();
if (dispmode ==1)
{
	tz = 	-1*MT->get_objects_centre_of_mass(2);
}

Cam_tz->value(tz);
MT->cam_validate(
Cam_near->value(),
Cam_far->value(),
Cam_az->value(),
Cam_el->value(),
Cam_tw->value(),
Cam_tx->value(),
Cam_ty->value(),
Cam_tz->value()
);

MT->redraw();
}
void MeshToolsUI::cb_CP_cut_half(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CP_cut_half_i(o,v);
}

void MeshToolsUI::cb_CP_normal_cp_i(Fl_Button*, void*) {
  Cam_near->value(MT->cam_getnear());
Cam_far->value(MT->cam_getfar());
Cam_tx->value(MT->cam_gettx());
Cam_ty->value(MT->cam_getty());
Cam_tz->value(MT->cam_gettz());
Cam_az->value(MT->cam_getaz());
Cam_el->value(MT->cam_getel());
Cam_tw->value(MT->cam_gettw());
//MT->panz(-0.5*Cam_far->value());
float tz = -0.5*MT->cam_getzoom();
int dispmode = MT->Get_mode_cam_centre_of_mass();
if (dispmode ==1)
{
	tz += 	-1*MT->get_objects_centre_of_mass(2);
}
Cam_tz->value(tz);
MT->cam_validate(
Cam_near->value(),
Cam_far->value(),
Cam_az->value(),
Cam_el->value(),
Cam_tw->value(),
Cam_tx->value(),
Cam_ty->value(),
Cam_tz->value()
);
MT->redraw();
}
void MeshToolsUI::cb_CP_normal_cp(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CP_normal_cp_i(o,v);
}

void MeshToolsUI::cb_Ok_scc_i(Fl_Button*, void*) {
  MT->Mesh_SetOpeningBehaviour(
rb_cm->value()
);


MT->Mesh_SetZoomBehaviour(
rb_cam->value()
);

MT->Mesh_SetAutoDelete(
rb_delete_orig->value()
);



MT->save_ini_param();

MT->redraw();
options_hide();
}
void MeshToolsUI::cb_Ok_scc(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_scc_i(o,v);
}

void MeshToolsUI::cb_Back_Color_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
r=255;
g=0;
b=0;
Fl::get_color(c,r,g,b);
std::cout<<r<<g<<b<<std::endl;
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->color_setbackcolor(r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Back_Color(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Back_Color_i(o,v);
}

void MeshToolsUI::cb_Grid_Color_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->color_setgridcolor(r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Grid_Color(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Grid_Color_i(o,v);
}

void MeshToolsUI::cb_Obj_Color_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->color_setobjcolor(r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Obj_Color(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Obj_Color_i(o,v);
}

void MeshToolsUI::cb_LightRoll1_i(Fl_Roller* o, void*) {
  MT->lightroll1(((Fl_Roller *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_LightRoll1(Fl_Roller* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_LightRoll1_i(o,v);
}

void MeshToolsUI::cb_LightRoll2_i(Fl_Roller* o, void*) {
  MT->lightroll2(((Fl_Roller *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_LightRoll2(Fl_Roller* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_LightRoll2_i(o,v);
}

void MeshToolsUI::cb_Specular_i(Fl_Value_Slider* o, void*) {
  MT->SetSpecular(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Specular(Fl_Value_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Specular_i(o,v);
}

void MeshToolsUI::cb_Diffuse_i(Fl_Value_Slider* o, void*) {
  MT->SetDiffuse(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Diffuse(Fl_Value_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Diffuse_i(o,v);
}

void MeshToolsUI::cb_Ambiant_i(Fl_Value_Slider* o, void*) {
  MT->SetAmbiant(((Fl_Slider *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Ambiant(Fl_Value_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Ambiant_i(o,v);
}

void MeshToolsUI::cb_Ok_scc_lightning_colour_i(Fl_Button*, void*) {
  MT->SetLightPosition2();

MT->Mesh_Set2SidesLightning(
cb_enable_2sides->value()
);


MT->save_ini_param();

MT->redraw();
options_lc_hide();
}
void MeshToolsUI::cb_Ok_scc_lightning_colour(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_scc_lightning_colour_i(o,v);
}

void MeshToolsUI::cb_Reinit_general_options_i(Fl_Button*, void*) {
  MT->Init_Colour_Lightning_Options();
this->options_lc_update();
}
void MeshToolsUI::cb_Reinit_general_options(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Reinit_general_options_i(o,v);
}

void MeshToolsUI::cb_auto_landmark_size_i(Fl_Check_Button* o, void*) {
  if (((Fl_Button *)o)->value()==1)
{

	Landmark_Size2->deactivate();
}
else
{

	Landmark_Size2->activate();
};
}
void MeshToolsUI::cb_auto_landmark_size(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_auto_landmark_size_i(o,v);
}

void MeshToolsUI::cb_Ok_scc_lm_i(Fl_Button*, void*) {
  MT->Mesh_SetLandmarkType(
pt_sphere->value()
);



MT->Mesh_SetLandmarkSize(
Landmark_Size2->value()
);

MT->set_g_landmark_auto_rendering_size(
auto_landmark_size->value()
);

MT->set_g_flag_length(
Flag_g_length->value()
);




MT->save_ini_param();

MT->redraw();
options_lm_hide();
}
void MeshToolsUI::cb_Ok_scc_lm(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_scc_lm_i(o,v);
}

void MeshToolsUI::cb_Flag_g_colour_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_g_flag_colour(r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Flag_g_colour(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Flag_g_colour_i(o,v);
}

void MeshToolsUI::cb_rb_show_all_i(Fl_Round_Button*, void*) {
  MT->Set_Display_All(1);
}
void MeshToolsUI::cb_rb_show_all(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_rb_show_all_i(o,v);
}

void MeshToolsUI::cb_rb_show_point_cloud_i(Fl_Round_Button*, void*) {
  MT->Set_Display_All(0);
}
void MeshToolsUI::cb_rb_show_point_cloud(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_rb_show_point_cloud_i(o,v);
}

void MeshToolsUI::cb_Ok_scc_rd_i(Fl_Button*, void*) {
  MT->Set_Display_All(rb_show_all->value());

MT->Set_fov_adapt(
zm_adapt->value()
);


MT->save_ini_param();

MT->redraw();
options_lm_hide();
}
void MeshToolsUI::cb_Ok_scc_rd(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_scc_rd_i(o,v);
}

void MeshToolsUI::cb_Ok_mat_i(Fl_Button*, void*) {
  float m1[16];
float m2[16];
int ok;
m2[0] = M2_00->value();
m2[1] = M2_01->value();
m2[2] = M2_02->value();
m2[3] = M2_03->value();
m2[4] = M2_10->value();
m2[5] = M2_11->value();
m2[6] = M2_12->value();
m2[7] = M2_13->value();
m2[8] = M2_20->value();
m2[9] = M2_21->value();
m2[10] = M2_22->value();
m2[11] = M2_23->value();
m2[12] = M2_30->value();
m2[13] = M2_31->value();
m2[14] = M2_32->value();
m2[15] = M2_33->value();

m1[0] = M1_00->value();
m1[1] = M1_01->value();
m1[2] = M1_02->value();
m1[3] = M1_03->value();
m1[4] = M1_10->value();
m1[5] = M1_11->value();
m1[6] = M1_12->value();
m1[7] = M1_13->value();
m1[8] = M1_20->value();
m1[9] = M1_21->value();
m1[10] = M1_22->value();
m1[11] = M1_23->value();
m1[12] = M1_30->value();
m1[13] = M1_31->value();
m1[14] = M1_32->value();
m1[15] = M1_33->value();



ok = MT->set_matrix(m1,m2,0);
MT->redraw();
}
void MeshToolsUI::cb_Ok_mat(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_mat_i(o,v);
}

void MeshToolsUI::cb_Init_mat_i(Fl_Button*, void*) {
  M2_00->value(1);
M2_01->value(0);
M2_02->value(0);
M2_03->value(0);
M2_10->value(0);
M2_11->value(1);
M2_12->value(0);
M2_13->value(0);
M2_20->value(0);
M2_21->value(0);
M2_22->value(1);
M2_23->value(0);
M2_30->value(0);
M2_31->value(0);
M2_32->value(0);
M2_33->value(1);

M1_00->value(1);
M1_01->value(0);
M1_02->value(0);
M1_03->value(0);
M1_10->value(0);
M1_11->value(1);
M1_12->value(0);
M1_13->value(0);
M1_20->value(0);
M1_21->value(0);
M1_22->value(1);
M1_23->value(0);
M1_30->value(0);
M1_31->value(0);
M1_32->value(0);
M1_33->value(1);
}
void MeshToolsUI::cb_Init_mat(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Init_mat_i(o,v);
}

void MeshToolsUI::cb_conv_mat_i(Fl_Button*, void*) {
  float m1_30 =M1_30->value();
float m1_31 =M1_31->value();
float m1_32 = M1_32->value();

float m2_30 =M2_30->value();
float m2_31 =M2_31->value();
float m2_32 = M2_32->value();


float m2_30n = M2_30->value() +M2_00->value()*M1_30->value() + M2_10->value()*M1_31->value() + M2_20->value()*M1_32->value();
float m2_31n = M2_31->value() +M2_01->value()*M1_30->value() + M2_11->value()*M1_31->value() + M2_21->value()*M1_32->value();
float m2_32n = M2_32->value() +M2_02->value()*M1_30->value() + M2_12->value()*M1_31->value() + M2_22->value()*M1_32->value();

M2_32->value(m2_32n);
M2_31->value(m2_31n);
M2_30->value(m2_30n);

M1_32->value(0);
M1_31->value(0);
M1_30->value(0);
}
void MeshToolsUI::cb_conv_mat(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_conv_mat_i(o,v);
}

void MeshToolsUI::cb_Ok_mat2_i(Fl_Button*, void*) {
  float m1[16];
float m2[16];
int ok;
m2[0] = M2_00->value();
m2[1] = M2_01->value();
m2[2] = M2_02->value();
m2[3] = M2_03->value();
m2[4] = M2_10->value();
m2[5] = M2_11->value();
m2[6] = M2_12->value();
m2[7] = M2_13->value();
m2[8] = M2_20->value();
m2[9] = M2_21->value();
m2[10] = M2_22->value();
m2[11] = M2_23->value();
m2[12] = M2_30->value();
m2[13] = M2_31->value();
m2[14] = M2_32->value();
m2[15] = M2_33->value();

m1[0] = M1_00->value();
m1[1] = M1_01->value();
m1[2] = M1_02->value();
m1[3] = M1_03->value();
m1[4] = M1_10->value();
m1[5] = M1_11->value();
m1[6] = M1_12->value();
m1[7] = M1_13->value();
m1[8] = M1_20->value();
m1[9] = M1_21->value();
m1[10] = M1_22->value();
m1[11] = M1_23->value();
m1[12] = M1_30->value();
m1[13] = M1_31->value();
m1[14] = M1_32->value();
m1[15] = M1_33->value();



ok = MT->set_matrix(m1,m2,1);
MT->redraw();
}
void MeshToolsUI::cb_Ok_mat2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_mat2_i(o,v);
}

void MeshToolsUI::cb_Refresh_mat_i(Fl_Button*, void*) {
  float m1[16];
float m2[16];
std::string Name;
int ok;
Name = MT->get_matrix(m1,m2);
if (Name.length()>0)
{
	M2_00->value(m2[0]);
	M2_01->value(m2[1]);
	M2_02->value(m2[2]);
	M2_03->value(m2[3]);
	M2_10->value(m2[4]);
	M2_11->value(m2[5]);
	M2_12->value(m2[6]);
	M2_13->value(m2[7]);
	M2_20->value(m2[8]);
	M2_21->value(m2[9]);
	M2_22->value(m2[10]);
	M2_23->value(m2[11]);
	M2_30->value(m2[12]);
	M2_31->value(m2[13]);
	M2_32->value(m2[14]);
	M2_33->value(m2[15]);

	M1_00->value(m1[0]);
	M1_01->value(m1[1]);
	M1_02->value(m1[2]);
	M1_03->value(m1[3]);
	M1_10->value(m1[4]);
	M1_11->value(m1[5]);
	M1_12->value(m1[6]);
	M1_13->value(m1[7]);
	M1_20->value(m1[8]);
	M1_21->value(m1[9]);
	M1_22->value(m1[10]);
	M1_23->value(m1[11]);
	M1_30->value(m1[12]);
	M1_31->value(m1[13]);
	M1_32->value(m1[14]);
	M1_33->value(m1[15]);
}
//MyName->insert_position(0);
//MyName->insert(Name);
//MyName->buffer(Name);
MyName->value(Name.c_str());
}
void MeshToolsUI::cb_Refresh_mat(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Refresh_mat_i(o,v);
}

void MeshToolsUI::cb_Ok_Version_i(Fl_Button*, void*) {
  version_hide();
}
void MeshToolsUI::cb_Ok_Version(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_Version_i(o,v);
}

static unsigned char idata_Mesh_Tools_Icon[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,145,145,145,39,144,144,144,174,138,138,138,198,141,
141,141,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,170,17,153,153,153,131,178,178,
178,240,241,241,241,255,253,253,253,255,194,194,194,252,148,148,148,161,138,138,
138,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,163,163,163,4,151,151,151,94,161,161,161,219,226,226,226,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,240,240,240,255,173,173,173,
239,151,151,151,126,160,160,160,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,155,155,155,60,148,148,148,189,207,207,207,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,226,226,226,255,156,156,156,217,148,148,148,89,201,201,
201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,142,142,142,34,146,146,146,158,192,192,192,252,249,249,
249,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,248,
248,255,254,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,209,209,209,255,153,153,153,190,144,144,144,56,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,156,156,
14,152,152,152,121,173,173,173,237,238,238,238,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,255,236,183,183,255,208,73,73,
255,217,105,105,255,245,219,219,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,246,246,246,255,189,189,189,249,152,152,152,
155,160,160,160,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,186,186,3,152,
152,152,84,158,158,158,214,224,224,224,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,242,207,207,255,214,96,96,255,197,
27,27,255,197,29,29,255,196,25,25,255,201,42,42,255,224,135,135,255,249,231,
231,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,237,237,237,255,168,168,168,236,144,144,144,119,191,191,191,12,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,150,150,150,57,152,152,152,187,207,207,207,255,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,227,227,255,219,
118,118,255,198,33,33,255,196,25,25,255,197,28,28,255,200,37,37,255,200,40,40,
255,200,36,36,255,195,18,18,255,205,59,59,255,250,238,238,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
222,222,222,255,166,166,166,213,144,144,144,84,197,197,197,2,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,133,133,31,130,130,130,155,
191,191,191,250,247,247,247,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,251,241,241,255,225,140,140,255,201,44,44,255,196,25,25,255,197,
27,27,255,197,29,29,255,216,105,105,255,208,76,76,255,199,34,34,255,200,38,38,
255,197,27,27,255,230,160,160,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,255,207,207,207,255,154,154,154,186,156,156,156,53,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,174,174,174,13,157,157,157,115,172,172,172,236,237,
237,237,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,
251,251,255,232,168,168,255,205,60,60,255,196,24,24,255,197,28,28,255,196,23,23,
255,208,73,73,255,240,196,196,255,241,202,202,255,201,45,45,255,199,36,36,255,
196,23,23,255,222,127,127,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,246,246,246,255,188,188,188,249,
148,148,148,152,183,183,183,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,164,164,1,156,156,156,82,154,154,154,
215,222,222,222,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,238,190,190,255,210,79,79,255,196,26,26,255,197,28,28,255,
196,24,24,255,204,56,56,255,230,157,157,255,254,254,254,255,248,226,226,255,202,
49,49,255,198,32,32,255,196,24,24,255,213,92,92,255,254,253,253,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,236,236,236,255,169,169,169,235,148,148,
148,114,176,176,176,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,146,146,146,51,144,144,144,181,205,205,205,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,244,213,213,255,216,102,
102,255,197,29,29,255,197,27,27,255,196,25,25,255,200,41,41,255,223,133,133,255,
251,238,238,255,255,255,255,255,251,241,241,255,209,75,75,255,197,28,28,255,197,
30,30,255,205,62,62,255,249,234,234,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,220,220,220,255,159,
159,159,209,145,145,145,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,171,171,27,
150,150,150,149,185,185,185,249,248,248,248,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,248,230,230,255,223,130,130,255,200,38,38,255,
196,25,25,255,197,27,27,255,198,32,32,255,217,106,106,255,246,221,221,255,255,
255,255,255,255,255,255,255,255,255,255,255,218,110,110,255,196,22,22,255,199,
34,34,255,200,40,40,255,242,206,206,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,203,203,203,255,155,155,155,181,151,151,151,48,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
163,163,163,9,150,150,150,112,166,166,166,235,234,234,234,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,252,245,245,255,230,158,158,255,
203,50,50,255,196,24,24,255,197,29,29,255,197,26,26,255,211,85,85,255,241,201,
201,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,226,142,
142,255,196,21,21,255,199,37,37,255,197,28,28,255,234,177,177,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,244,244,244,255,184,184,184,247,152,152,152,145,177,177,177,22,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,144,144,76,154,154,154,207,
219,219,219,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,253,253,255,236,184,184,255,207,70,70,255,197,25,25,255,197,29,29,255,196,
24,24,255,205,63,63,255,234,175,175,255,254,251,251,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,234,176,176,255,198,29,29,255,199,
37,37,255,196,22,22,255,226,146,146,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,254,255,250,237,237,255,254,250,250,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,234,234,234,255,162,162,162,231,149,149,149,107,161,
161,161,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,145,145,45,154,154,154,177,202,202,202,
255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
255,241,202,202,255,213,89,89,255,197,28,28,255,197,28,28,255,196,24,24,255,202,
48,48,255,227,148,148,255,251,241,241,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,243,211,211,255,200,41,41,255,199,
33,33,255,196,23,23,255,216,107,107,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,250,236,236,255,239,195,195,255,226,
143,143,255,212,90,90,255,202,49,49,255,214,95,95,255,244,212,212,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,221,221,
221,255,150,150,150,204,140,140,140,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,201,201,23,142,142,142,144,188,
188,188,246,244,244,244,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,235,179,179,255,197,27,27,255,194,16,16,255,197,26,
26,255,199,35,35,255,220,119,119,255,248,227,227,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,237,
237,255,206,64,64,255,197,29,29,255,197,28,28,255,208,73,73,255,251,242,242,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,250,237,237,255,240,196,196,255,226,143,143,255,212,88,88,255,
201,43,43,255,196,22,22,255,196,23,23,255,197,29,29,255,199,35,35,255,197,27,27,
255,200,38,38,255,219,112,112,255,244,214,214,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,253,253,253,255,206,206,206,254,149,149,149,
173,199,199,199,45,233,233,233,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,146,146,146,113,116,116,116,255,227,227,227,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
251,251,255,238,190,190,255,210,78,78,255,212,89,89,255,242,206,206,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,253,253,255,214,95,95,255,196,24,24,255,198,32,32,
255,202,48,48,255,246,221,221,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,251,241,241,255,241,202,202,255,228,150,150,255,214,95,95,255,201,44,44,255,
194,16,16,255,193,10,10,255,198,31,31,255,210,79,79,255,212,95,95,255,203,55,55,
255,200,37,37,255,200,39,39,255,199,35,35,255,195,20,20,255,202,49,49,255,236,
182,182,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,241,241,241,255,133,133,133,255,107,107,107,171,178,178,178,79,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,159,159,111,195,195,
195,255,192,192,192,255,176,176,176,255,229,229,229,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,248,
248,255,254,250,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,223,132,
132,255,196,23,23,255,199,35,35,255,198,31,31,255,238,191,191,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,243,243,
255,242,204,204,255,229,153,153,255,215,97,97,255,203,50,50,255,195,18,18,255,
192,10,10,255,197,26,26,255,207,67,67,255,221,122,122,255,236,181,181,255,247,
226,226,255,239,194,194,255,209,80,80,255,199,37,37,255,200,37,37,255,197,25,25,
255,201,43,43,255,225,140,140,255,251,242,242,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,244,244,244,255,180,180,180,255,149,149,149,
255,164,164,164,255,133,133,133,168,184,184,184,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,156,156,110,199,199,199,255,255,255,255,255,
224,224,224,255,177,177,177,255,191,191,191,255,241,241,241,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,233,172,172,255,196,26,26,255,199,36,36,255,198,
30,30,255,231,163,163,255,255,255,255,255,255,255,255,255,252,244,244,255,243,
206,206,255,229,155,155,255,215,101,101,255,203,52,52,255,195,19,19,255,193,10,
10,255,197,26,26,255,205,59,59,255,218,110,110,255,233,170,170,255,245,217,217,
255,254,251,251,255,255,255,255,255,248,228,228,255,218,111,111,255,198,34,34,
255,198,30,30,255,197,28,28,255,198,31,31,255,218,114,114,255,247,226,226,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,252,252,255,
199,199,199,255,146,146,146,255,172,172,172,255,202,202,202,255,177,177,177,255,
130,130,130,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,246,246,246,255,249,
249,249,255,211,211,211,255,169,169,169,255,202,202,202,255,251,251,251,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,243,
207,207,255,199,37,37,255,199,34,34,255,198,29,29,255,217,109,109,255,246,223,
223,255,231,161,161,255,216,102,102,255,203,53,53,255,195,20,20,255,193,10,10,
255,197,25,25,255,206,61,61,255,218,112,112,255,233,168,168,255,245,215,215,255,
253,247,247,255,255,255,255,255,255,255,255,255,255,255,255,255,251,240,240,255,
224,133,133,255,200,41,41,255,196,25,25,255,198,30,30,255,197,26,26,255,212,88,
88,255,241,203,203,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,218,218,218,255,152,152,152,255,159,159,159,255,195,195,
195,255,199,199,199,255,198,198,198,255,175,175,175,255,131,131,131,168,183,183,
183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,
198,198,198,255,249,249,249,255,242,242,242,255,242,242,242,255,248,248,248,255,
244,244,244,255,196,196,196,255,172,172,172,255,216,216,216,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,250,238,238,255,203,52,52,255,196,22,22,255,200,
40,40,255,200,38,38,255,202,46,46,255,196,25,25,255,192,9,9,255,196,24,24,255,
206,61,61,255,218,111,111,255,232,166,166,255,244,214,214,255,253,246,246,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,250,250,255,231,163,163,255,205,57,57,255,196,24,24,255,198,31,31,255,196,
24,24,255,206,65,65,255,235,178,178,255,254,251,251,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,234,234,234,255,166,166,166,255,150,
150,150,255,188,188,188,255,201,201,201,255,195,195,195,255,195,195,195,255,198,
198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,
249,255,242,242,242,255,242,242,242,255,242,242,242,255,243,243,243,255,250,250,
250,255,235,235,235,255,180,180,180,255,176,176,176,255,235,235,235,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,253,248,248,255,231,163,163,255,205,61,61,255,196,24,24,255,199,34,34,
255,205,59,59,255,218,110,110,255,230,160,160,255,244,213,213,255,253,246,246,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,239,192,192,255,210,79,79,
255,196,24,24,255,198,31,31,255,197,25,25,255,201,45,45,255,227,150,150,255,251,
242,242,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,246,
246,246,255,184,184,184,255,144,144,144,255,177,177,177,255,201,201,201,255,197,
197,197,255,195,195,195,255,195,195,195,255,195,195,195,255,198,198,198,255,175,
175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,
242,255,242,242,242,255,242,241,241,255,241,245,251,255,241,244,247,255,244,244,
243,255,251,251,251,255,224,224,224,255,179,179,179,255,187,187,187,255,244,244,
244,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,250,234,234,255,235,177,177,255,242,206,206,255,252,245,
245,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,245,217,217,255,216,105,105,255,197,29,29,255,197,28,28,255,197,27,27,
255,198,33,33,255,220,120,120,255,247,226,226,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,253,253,253,255,204,204,204,255,148,148,148,
255,166,166,166,255,199,199,199,255,198,198,198,255,195,195,195,255,195,195,195,
255,195,195,195,255,195,195,195,255,195,195,195,255,198,198,198,255,175,175,175,
255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,
242,244,247,255,243,233,215,255,246,198,106,255,242,237,227,255,241,247,255,255,
242,242,242,255,246,246,246,255,248,248,248,255,207,207,207,255,171,171,171,255,
204,204,204,255,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,250,234,234,255,223,133,133,255,
200,41,41,255,196,25,25,255,198,30,30,255,196,25,25,255,213,91,91,255,242,205,
205,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,220,220,220,255,154,153,153,255,155,155,155,255,194,194,194,255,200,200,
200,255,195,195,195,255,195,195,195,255,195,196,197,255,195,201,202,255,195,195,
195,255,195,195,195,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,
131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,
243,235,219,255,251,165,10,255,250,173,31,255,244,221,177,255,241,247,255,255,
242,243,245,255,242,242,242,255,248,248,248,255,243,243,243,255,194,194,194,255,
174,174,174,255,218,218,218,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
253,248,248,255,231,162,162,255,203,53,53,255,196,24,24,255,198,31,31,255,196,
23,23,255,207,66,66,255,235,178,178,255,254,252,252,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,237,237,237,255,168,168,168,255,147,
147,147,255,186,185,185,255,201,201,201,255,196,196,196,255,195,195,195,255,195,
195,195,255,195,201,202,255,195,196,197,255,195,162,156,255,195,193,192,255,195,
196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,183,
183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,
110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,
255,250,171,15,255,251,163,0,255,251,163,2,255,246,199,108,255,242,242,241,255,
242,243,244,255,242,242,242,255,243,243,243,255,250,250,250,255,232,232,232,255,
182,182,182,255,181,181,181,255,234,234,234,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,253,248,248,255,237,185,185,255,209,75,75,255,
196,24,24,255,198,31,31,255,196,24,24,255,202,46,46,255,228,148,148,255,251,242,
242,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,248,
248,255,185,185,185,255,145,145,145,255,175,175,175,255,201,201,201,255,197,197,
197,255,195,195,195,255,195,195,195,255,195,195,195,255,195,203,205,255,195,174,
170,255,195,91,71,255,195,83,62,255,195,196,197,255,195,196,196,255,195,195,195,
255,198,198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,
249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,
251,166,0,255,251,166,0,255,252,161,0,255,244,222,181,255,242,246,254,255,242,
242,242,255,242,242,242,255,242,242,242,255,244,244,244,255,251,251,251,255,220,
220,220,255,175,175,175,255,191,191,191,255,245,245,245,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,240,197,197,255,200,38,38,255,194,15,15,255,197,26,26,255,198,33,33,
255,220,119,119,255,247,225,225,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,255,203,203,203,255,146,146,146,255,164,164,164,
255,197,197,197,255,199,199,199,255,195,195,195,255,195,195,195,255,195,195,195,
255,195,195,195,255,195,200,201,255,195,135,124,255,195,61,35,255,195,48,21,255,
195,89,69,255,195,197,198,255,195,196,196,255,195,195,195,255,198,198,198,255,
175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,
242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,251,166,0,255,251,
167,0,255,252,161,0,255,246,205,127,255,241,247,255,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,247,247,247,255,248,248,
248,255,205,205,205,255,166,166,166,255,208,208,208,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,247,224,224,255,218,113,113,255,212,88,88,255,241,202,202,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,222,222,
222,255,156,156,156,255,152,152,152,255,192,192,192,255,200,200,200,255,195,195,
195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,198,
198,255,195,189,189,255,195,69,45,255,195,56,30,255,195,57,31,255,195,89,69,255,
195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,
131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,
244,248,255,243,235,219,255,250,171,15,255,251,165,0,255,251,169,10,255,251,163,
0,255,249,188,71,255,242,245,251,255,242,242,243,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,249,249,
249,255,241,241,241,255,194,194,194,255,178,178,178,255,220,220,220,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,253,253,255,254,252,252,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,236,237,237,255,168,168,168,255,145,145,145,255,184,184,
184,255,202,202,202,255,196,196,196,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,201,202,255,195,165,
160,255,195,58,33,255,195,61,36,255,195,56,30,255,195,89,69,255,195,197,197,255,
195,196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,
183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,
157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,235,
219,255,250,171,15,255,251,163,0,255,248,184,61,255,251,170,15,255,250,173,23,
255,242,238,229,255,242,243,246,255,242,242,242,255,242,242,242,255,242,242,242,
255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,243,243,243,
255,250,250,250,255,230,230,230,255,180,180,180,255,182,182,182,255,238,238,238,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,248,248,248,255,187,187,187,
255,142,142,142,255,172,172,172,255,201,201,201,255,197,197,197,255,195,195,195,
255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,
255,195,195,195,255,195,195,195,255,195,204,206,255,195,135,123,255,195,52,25,
255,195,62,37,255,195,56,30,255,195,89,69,255,195,197,197,255,195,196,196,255,
195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,
198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,
171,15,255,252,162,0,255,247,195,95,255,249,181,52,255,252,163,0,255,244,226,
193,255,242,245,252,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,
242,255,245,245,245,255,250,250,250,255,218,218,218,255,179,179,179,255,194,194,
194,255,247,247,247,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,254,254,254,255,206,205,205,255,145,145,145,255,161,161,161,255,197,197,
197,255,199,199,199,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,195,195,255,195,202,204,255,195,100,83,255,195,61,35,255,195,78,56,
255,195,54,28,255,195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,255,
198,198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,
249,249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,252,
161,0,255,247,200,108,255,248,197,99,255,252,158,0,255,246,209,142,255,241,247,
255,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,
242,255,242,242,242,255,247,247,247,255,246,246,246,255,204,204,204,255,172,172,
172,255,209,209,209,255,253,253,253,255,255,255,255,255,223,223,223,255,153,153,
153,255,149,149,149,255,191,191,191,255,201,201,201,255,195,195,195,255,195,195,
195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,197,
198,255,195,190,190,255,195,70,47,255,195,86,65,255,195,99,81,255,195,50,23,255,
195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,
175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,
242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,252,161,0,255,247,
201,109,255,245,214,152,255,252,158,0,255,248,191,83,255,241,246,254,255,242,
242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,
242,242,255,242,242,242,255,242,243,243,255,241,246,253,255,242,243,244,255,242,
242,242,255,242,242,242,255,242,242,242,255,249,249,249,255,240,240,240,255,187,
187,187,255,172,172,172,255,163,163,163,255,144,143,143,255,182,182,182,255,201,
201,201,255,196,196,196,255,195,195,195,255,195,195,195,255,195,195,195,255,195,
200,202,255,195,197,198,255,195,195,195,255,195,195,195,255,195,195,195,255,195,
195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,201,202,255,195,
167,163,255,195,51,24,255,195,116,102,255,195,105,89,255,195,49,22,255,195,89,
70,255,195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,
175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,
255,242,244,248,255,243,235,219,255,250,171,15,255,252,161,0,255,247,199,104,
255,243,231,206,255,252,163,0,255,250,176,34,255,242,240,234,255,242,243,245,
255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,
255,242,243,244,255,243,239,235,255,245,216,164,255,241,243,242,255,242,245,252,
255,242,242,242,255,242,242,242,255,242,242,242,255,243,243,243,255,255,255,255,
255,181,181,181,255,114,114,114,255,208,207,207,255,197,197,197,255,195,195,195,
255,195,195,195,255,195,195,195,255,195,198,199,255,195,204,205,255,195,167,161,
255,195,183,181,255,195,198,198,255,195,195,195,255,195,195,195,255,195,195,195,
255,195,195,195,255,195,195,195,255,195,195,195,255,195,204,206,255,195,136,125,
255,195,45,16,255,195,151,143,255,195,105,89,255,195,49,22,255,195,89,70,255,
195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,
131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,
244,248,255,243,235,219,255,250,171,15,255,252,161,0,255,247,197,99,255,242,244,
243,255,250,174,30,255,251,165,0,255,244,229,203,255,242,245,251,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,242,242,255,242,245,
252,255,244,227,194,255,251,162,0,255,248,185,66,255,243,233,212,255,242,245,
253,255,242,242,241,255,242,242,242,255,242,242,242,255,250,250,250,255,194,194,
194,255,129,129,129,255,204,205,205,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,203,204,255,195,190,189,255,194,120,106,255,195,52,26,255,195,141,
131,255,195,204,206,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,195,195,255,195,195,195,255,195,203,204,255,195,102,85,255,195,54,
28,255,195,180,178,255,195,102,85,255,195,49,22,255,195,89,70,255,195,197,197,
255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,
168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,
157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,
235,219,255,250,171,15,255,252,161,0,255,247,196,96,255,241,250,255,255,248,189,
77,255,252,158,0,255,245,213,155,255,242,247,255,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,241,247,255,255,247,203,
121,255,252,161,0,255,251,162,0,255,250,168,17,255,244,223,186,255,242,245,252,
255,242,242,242,255,242,242,242,255,250,250,250,255,194,193,193,255,128,127,127,
255,204,204,204,255,195,195,195,255,195,195,195,255,195,199,200,255,194,155,148,
255,195,75,52,255,195,52,25,255,195,52,26,255,195,99,81,255,195,201,202,255,195,
195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,
197,197,255,195,191,190,255,195,72,49,255,195,79,57,255,195,200,201,255,195,99,
81,255,195,49,22,255,195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,
255,198,198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,
249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,
252,161,0,255,247,196,95,255,241,252,255,255,246,207,134,255,252,157,0,255,247,
196,99,255,242,247,255,255,242,242,242,255,242,242,242,255,242,242,242,255,242,
242,242,255,242,243,245,255,242,242,242,255,250,179,50,255,251,164,0,255,251,
167,0,255,252,161,0,255,246,208,139,255,242,247,255,255,242,242,242,255,242,242,
242,255,250,250,250,255,194,194,194,255,128,128,128,255,204,204,204,255,195,195,
195,255,195,195,195,255,195,200,202,255,195,92,73,255,195,51,23,255,195,62,37,
255,195,60,34,255,195,66,42,255,195,181,178,255,195,199,199,255,195,195,195,255,
195,195,195,255,195,195,195,255,195,195,195,255,195,201,202,255,195,169,164,255,
195,51,24,255,195,111,96,255,195,208,211,255,195,97,79,255,195,49,22,255,195,89,
70,255,195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,
175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,
255,242,244,248,255,243,235,219,255,250,171,15,255,252,161,0,255,247,196,95,255,
241,250,255,255,244,224,188,255,251,162,0,255,249,180,46,255,242,242,242,255,
242,243,244,255,242,242,242,255,242,242,242,255,242,242,242,255,242,245,252,255,
243,226,194,255,251,165,3,255,251,166,0,255,251,167,1,255,251,162,0,255,246,210,
143,255,242,247,255,255,242,242,242,255,242,242,242,255,250,250,250,255,195,195,
195,255,128,128,128,255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,
201,255,195,98,80,255,195,55,29,255,195,62,38,255,195,61,36,255,195,53,26,255,
195,142,133,255,195,204,205,255,195,195,195,255,195,195,195,255,195,195,195,255,
195,195,195,255,195,204,206,255,195,138,128,255,195,44,16,255,195,145,136,255,
195,208,211,255,195,97,79,255,195,49,22,255,195,89,70,255,195,197,197,255,195,
196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,183,
183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,
110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,
255,250,171,15,255,252,161,0,255,247,196,95,255,241,248,255,255,243,238,228,255,
251,172,22,255,251,167,6,255,243,233,213,255,242,244,249,255,242,242,242,255,
242,242,242,255,242,242,242,255,242,247,255,255,246,202,120,255,252,159,0,255,
250,177,41,255,249,178,38,255,252,161,0,255,246,210,143,255,242,247,255,255,242,
242,242,255,242,242,242,255,250,250,250,255,195,195,195,255,128,128,128,255,204,
204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,
52,24,255,195,89,70,255,195,72,50,255,195,52,26,255,195,98,81,255,195,201,202,
255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,195,255,195,202,204,
255,195,104,87,255,195,54,27,255,195,176,172,255,195,205,207,255,195,97,79,255,
195,49,22,255,195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,255,198,
198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,
249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,252,161,
0,255,247,196,95,255,241,247,255,255,242,245,250,255,248,187,67,255,252,159,0,
255,244,218,170,255,242,246,255,255,242,242,242,255,242,242,242,255,242,243,244,
255,242,242,242,255,249,180,49,255,252,160,0,255,247,199,113,255,248,185,62,255,
252,159,0,255,246,210,143,255,242,247,255,255,242,242,242,255,242,242,242,255,
250,250,250,255,196,196,196,255,128,128,128,255,204,204,204,255,195,195,195,255,
195,195,196,255,195,200,201,255,195,98,80,255,195,48,20,255,195,111,96,255,194,
104,86,255,195,53,26,255,195,66,42,255,195,181,178,255,195,199,200,255,195,195,
195,255,195,195,195,255,195,197,197,255,195,192,192,255,195,73,50,255,195,78,56,
255,195,195,195,255,195,201,203,255,195,97,79,255,195,49,22,255,195,89,70,255,
195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,
131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,
244,248,255,243,235,219,255,250,171,15,255,252,161,0,255,247,196,95,255,241,246,
254,255,241,247,255,255,246,205,123,255,252,157,0,255,247,200,115,255,242,247,
255,255,242,242,242,255,242,242,242,255,242,245,252,255,244,227,194,255,251,165,
0,255,251,164,0,255,244,224,182,255,248,184,56,255,252,160,0,255,246,210,143,
255,242,247,255,255,242,242,242,255,242,242,242,255,250,250,250,255,196,196,196,
255,129,129,129,255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,
255,195,98,80,255,195,47,19,255,195,114,99,255,194,147,139,255,195,53,27,255,
195,53,26,255,195,143,133,255,195,204,205,255,195,195,195,255,195,195,195,255,
195,200,201,255,195,170,166,255,195,52,25,255,195,111,95,255,195,204,205,255,
195,200,202,255,195,97,79,255,195,49,22,255,195,89,70,255,195,197,197,255,195,
196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,183,
183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,
110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,
255,250,171,15,255,252,161,0,255,247,196,95,255,241,247,254,255,242,246,254,255,
244,222,180,255,252,161,0,255,249,183,59,255,242,244,247,255,242,242,243,255,
242,242,242,255,241,247,255,255,246,203,120,255,252,159,0,255,250,178,42,255,
242,241,235,255,249,181,49,255,252,160,0,255,246,210,143,255,242,247,255,255,
242,242,242,255,242,242,242,255,250,250,250,255,197,197,197,255,129,129,129,255,
204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,
195,47,19,255,195,110,93,255,195,187,186,255,195,66,41,255,195,52,25,255,195,99,
81,255,195,201,202,255,195,195,195,255,195,195,195,255,195,204,205,255,195,140,
130,255,195,45,16,255,195,144,135,255,195,204,205,255,195,200,201,255,195,97,79,
255,195,49,22,255,195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,255,
198,198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,
249,249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,252,
161,0,255,247,196,95,255,241,247,254,255,242,244,248,255,243,236,224,255,250,
170,16,255,251,170,15,255,243,236,222,255,242,244,248,255,242,243,244,255,242,
243,243,255,249,180,48,255,252,159,0,255,247,201,113,255,241,247,255,255,249,
180,45,255,252,160,0,255,246,210,143,255,242,247,255,255,242,242,242,255,242,
242,242,255,250,250,250,255,198,198,198,255,129,129,129,255,204,204,204,255,195,
195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,47,19,255,195,106,
89,255,195,208,211,255,195,98,80,255,195,53,26,255,195,67,43,255,195,181,179,
255,195,199,199,255,195,195,195,255,195,203,204,255,195,105,89,255,195,53,27,
255,195,175,171,255,195,200,201,255,195,200,202,255,195,97,79,255,195,49,22,255,
195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,
175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,
242,242,255,242,244,248,255,243,235,219,255,250,171,15,255,252,161,0,255,247,
196,95,255,241,247,254,255,242,242,244,255,242,245,247,255,248,184,60,255,252,
160,0,255,245,223,183,255,242,246,253,255,242,245,252,255,244,227,195,255,251,
165,0,255,251,164,0,255,243,225,188,255,241,246,254,255,249,180,45,255,252,160,
0,255,246,210,143,255,242,247,255,255,242,242,242,255,242,242,242,255,250,250,
250,255,198,198,198,255,129,129,129,255,204,204,204,255,195,195,195,255,195,195,
196,255,195,200,201,255,195,98,80,255,195,47,19,255,195,105,88,255,195,211,214,
255,195,143,133,255,195,53,26,255,195,53,27,255,195,144,134,255,195,203,205,255,
195,197,197,255,195,193,192,255,195,74,52,255,195,77,56,255,195,194,194,255,195,
197,197,255,195,200,202,255,195,97,79,255,195,49,22,255,195,89,70,255,195,197,
197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,
131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,
243,235,219,255,250,171,15,255,252,161,0,255,247,196,95,255,241,247,254,255,242,
242,242,255,242,247,255,255,247,202,113,255,252,156,0,255,246,205,130,255,241,
247,255,255,241,247,255,255,246,203,118,255,252,159,0,255,249,178,40,255,242,
243,240,255,242,243,246,255,249,180,46,255,252,160,0,255,246,210,143,255,242,
247,255,255,242,242,242,255,242,242,242,255,249,249,249,255,199,199,199,255,129,
129,129,255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,
98,80,255,195,47,19,255,195,106,89,255,195,206,208,255,195,181,179,255,195,67,
42,255,195,52,25,255,195,100,82,255,195,201,202,255,195,201,201,255,195,172,
167,255,195,52,26,255,195,110,94,255,195,203,205,255,195,196,196,255,195,200,
202,255,195,97,79,255,195,49,22,255,195,89,70,255,195,197,197,255,195,196,196,
255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,183,183,183,
76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,
198,198,255,249,249,249,255,242,242,242,255,242,244,248,255,243,235,219,255,250,
171,15,255,252,161,0,255,247,196,95,255,241,247,254,255,242,242,242,255,242,246,
255,255,245,219,171,255,252,159,0,255,248,188,74,255,241,246,253,255,242,243,
243,255,249,180,48,255,252,159,0,255,247,201,113,255,241,248,255,255,242,242,
242,255,249,180,45,255,252,160,0,255,246,210,143,255,242,247,255,255,242,242,
242,255,242,242,242,255,249,249,249,255,200,200,200,255,130,129,129,255,204,204,
204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,47,19,
255,195,106,89,255,195,202,204,255,195,202,203,255,195,100,82,255,195,52,26,255,
195,67,44,255,195,181,179,255,195,207,210,255,195,141,132,255,195,45,16,255,195,
144,135,255,195,204,205,255,195,195,195,255,195,200,202,255,195,97,79,255,195,
49,22,255,195,89,70,255,195,197,197,255,195,196,196,255,195,195,195,255,198,
198,198,255,175,175,175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,
249,255,242,242,242,255,242,244,248,255,243,234,218,255,250,170,14,255,252,161,
0,255,247,196,95,255,241,247,254,255,242,242,242,255,242,244,249,255,243,234,
218,255,251,168,10,255,250,173,24,255,242,242,242,255,243,228,197,255,251,165,0,
255,251,164,0,255,244,225,186,255,241,246,255,255,242,242,242,255,249,180,45,
255,252,160,0,255,246,210,143,255,242,247,255,255,242,242,242,255,242,242,242,
255,249,249,249,255,200,200,200,255,130,129,129,255,204,204,204,255,195,195,195,
255,195,195,196,255,195,200,201,255,195,98,80,255,195,47,19,255,195,106,89,255,
195,202,203,255,195,204,206,255,195,144,134,255,195,53,27,255,195,53,27,255,195,
144,135,255,195,212,215,255,195,107,91,255,195,54,27,255,195,174,170,255,195,
200,201,255,195,195,196,255,195,200,202,255,195,97,79,255,195,49,22,255,195,89,
69,255,195,197,197,255,195,196,196,255,195,195,195,255,198,198,198,255,175,175,
175,255,131,131,131,168,183,183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,157,157,157,110,198,198,198,255,249,249,249,255,242,242,242,
255,242,244,247,255,243,236,224,255,250,172,25,255,252,156,0,255,247,195,95,255,
241,247,254,255,242,242,242,255,242,243,244,255,242,244,246,255,249,182,51,255,
252,162,0,255,243,232,209,255,246,206,127,255,252,159,0,255,249,178,40,255,242,
242,239,255,242,244,247,255,242,242,243,255,249,180,45,255,252,160,0,255,246,
210,143,255,242,247,255,255,242,242,242,255,242,242,242,255,249,249,249,255,201,
201,201,255,130,130,130,255,204,204,204,255,195,195,195,255,195,195,196,255,195,
200,201,255,195,98,80,255,195,47,19,255,195,106,89,255,195,202,203,255,195,199,
200,255,195,182,180,255,195,67,44,255,195,52,25,255,195,102,85,255,195,199,201,
255,195,77,54,255,195,77,55,255,195,194,194,255,195,196,197,255,195,196,196,255,
195,200,202,255,195,97,79,255,195,44,16,255,195,84,63,255,195,198,198,255,195,
196,196,255,195,195,195,255,198,198,198,255,175,175,175,255,131,131,131,168,183,
183,183,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,156,156,
112,202,202,202,255,250,250,250,255,242,242,242,255,242,242,242,255,242,244,247,
255,243,230,204,255,248,185,64,255,247,194,91,255,241,246,252,255,242,242,242,
255,242,242,242,255,242,247,255,255,247,199,104,255,252,158,0,255,246,212,150,
255,248,185,63,255,252,159,0,255,247,201,113,255,242,247,255,255,242,243,244,
255,242,242,243,255,249,180,45,255,252,160,0,255,246,210,143,255,242,247,255,
255,242,242,242,255,242,242,242,255,249,249,249,255,202,202,202,255,130,130,130,
255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,
255,195,47,19,255,195,106,89,255,195,202,203,255,195,195,196,255,195,202,203,
255,195,101,83,255,195,52,25,255,195,73,50,255,195,161,155,255,195,57,31,255,
195,109,94,255,195,203,205,255,195,195,195,255,195,196,196,255,195,200,202,255,
195,90,70,255,195,72,49,255,195,155,147,255,195,199,199,255,195,195,195,255,195,
195,195,255,198,198,198,255,179,179,179,255,130,130,130,169,182,182,182,77,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,159,159,101,165,165,
165,255,255,255,255,255,248,248,248,255,242,242,242,255,242,242,242,255,242,245,
252,255,241,244,246,255,243,234,213,255,242,243,243,255,242,242,242,255,242,242,
242,255,241,246,255,255,245,217,162,255,251,161,0,255,249,181,48,255,250,170,15,
255,251,164,0,255,244,224,186,255,242,246,253,255,242,243,244,255,242,242,243,
255,249,180,45,255,252,160,0,255,246,210,143,255,242,247,255,255,242,242,242,
255,242,242,242,255,249,249,249,255,202,202,202,255,130,130,130,255,204,204,204,
255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,47,19,255,
195,106,89,255,195,202,203,255,195,195,195,255,195,204,206,255,195,145,136,255,
195,53,27,255,195,62,37,255,195,99,81,255,195,53,26,255,195,144,135,255,195,204,
205,255,195,195,195,255,195,195,195,255,195,195,195,255,195,156,148,255,195,188,
187,255,195,203,204,255,195,195,195,255,195,195,195,255,198,198,198,255,206,206,
206,255,152,152,152,255,128,128,128,159,188,188,188,69,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,218,218,7,122,122,122,115,132,132,132,236,
217,217,217,255,254,254,254,255,245,245,245,255,242,242,241,255,242,243,244,255,
242,244,248,255,242,242,242,255,242,242,242,255,242,242,242,255,242,244,250,255,
243,232,212,255,251,168,10,255,251,165,0,255,251,164,0,255,249,178,41,255,242,
241,237,255,242,243,245,255,242,243,244,255,242,242,243,255,249,180,45,255,252,
160,0,255,246,210,143,255,242,247,255,255,242,242,242,255,242,242,242,255,249,
249,249,255,202,202,202,255,130,130,130,255,204,204,204,255,195,195,195,255,195,
195,196,255,195,200,201,255,195,98,80,255,195,47,19,255,195,106,89,255,195,202,
203,255,195,195,195,255,195,199,199,255,194,183,180,255,195,68,45,255,195,59,34,
255,195,59,33,255,195,61,37,255,195,174,170,255,195,200,201,255,195,195,195,255,
195,195,195,255,195,195,195,255,195,201,202,255,195,197,198,255,195,195,195,255,
196,196,196,255,204,204,204,255,185,185,185,255,125,125,125,248,110,110,110,147,
206,206,206,22,236,236,236,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,133,133,133,26,126,126,126,152,153,153,153,250,233,233,
233,255,254,254,254,255,243,243,243,255,242,242,242,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,243,244,255,242,243,242,255,249,178,45,255,251,164,
0,255,252,162,0,255,247,200,114,255,242,247,255,255,242,242,242,255,242,243,
244,255,242,242,243,255,249,180,45,255,252,160,0,255,246,210,143,255,242,247,
255,255,242,242,242,255,242,242,242,255,249,249,249,255,202,202,202,255,130,130,
130,255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,
80,255,195,47,19,255,195,106,89,255,195,202,203,255,195,195,195,255,195,195,
195,255,195,202,203,255,194,102,85,255,195,54,28,255,195,57,31,255,195,80,58,
255,195,194,194,255,195,196,197,255,195,195,195,255,195,195,195,255,195,195,195,
255,195,195,195,255,195,195,195,255,203,203,203,255,195,195,195,255,138,137,137,
255,113,113,113,182,151,151,151,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,142,
142,53,126,126,126,186,177,177,177,255,244,244,244,255,251,251,251,255,242,242,
242,255,242,242,242,255,242,242,242,255,242,242,242,255,241,246,253,255,246,205,
126,255,251,162,0,255,252,161,0,255,244,224,187,255,242,245,253,255,242,242,242,
255,242,243,244,255,242,242,243,255,249,180,45,255,252,160,0,255,246,210,143,
255,242,247,255,255,242,242,242,255,242,242,242,255,249,249,249,255,203,203,203,
255,131,130,130,255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,
255,195,98,80,255,195,47,19,255,195,106,89,255,195,202,203,255,195,195,195,255,
195,195,195,255,195,204,205,255,195,147,138,255,195,51,24,255,195,47,20,255,195,
116,102,255,195,203,204,255,195,195,195,255,195,195,195,255,195,195,195,255,195,
195,195,255,200,200,200,255,201,201,201,255,157,157,157,255,115,115,115,212,149,
149,149,81,178,178,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,
183,183,2,124,124,124,86,131,131,131,218,200,200,200,255,251,251,251,255,248,
248,248,255,242,242,242,255,242,242,242,255,242,242,243,255,242,245,250,255,244,
221,174,255,248,193,89,255,243,239,231,255,242,243,245,255,242,242,242,255,242,
243,244,255,242,242,243,255,249,180,45,255,252,160,0,255,246,210,143,255,242,
247,255,255,242,242,242,255,242,242,242,255,249,249,249,255,203,203,203,255,131,
130,130,255,204,204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,
98,80,255,195,47,19,255,195,106,89,255,195,202,203,255,195,195,195,255,195,195,
195,255,195,198,199,255,195,182,179,255,195,80,59,255,195,134,123,255,195,194,
193,255,195,197,197,255,195,195,195,255,195,195,195,255,198,198,198,255,204,204,
204,255,173,173,173,255,121,121,121,237,123,123,123,119,181,181,181,10,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,
177,177,13,123,123,123,122,144,144,144,239,220,220,220,255,255,255,255,255,245,
245,245,255,242,242,241,255,242,242,243,255,242,246,253,255,241,245,248,255,242,
242,242,255,242,242,242,255,242,242,242,255,242,243,244,255,242,242,243,255,249,
180,45,255,252,160,0,255,246,210,143,255,242,247,255,255,242,242,242,255,242,
242,242,255,249,249,249,255,203,203,203,255,131,130,130,255,204,204,204,255,195,
195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,47,19,255,195,106,
89,255,195,202,203,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,190,189,255,195,203,205,255,195,197,197,255,195,195,195,255,196,196,
196,255,204,204,204,255,187,186,186,255,127,127,127,252,112,112,112,154,173,173,
173,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,170,32,121,121,121,158,158,
158,158,251,234,234,234,255,254,254,254,255,243,243,243,255,242,242,242,255,242,
242,243,255,242,242,242,255,242,242,242,255,242,242,242,255,242,243,244,255,242,
242,242,255,249,179,45,255,252,160,0,255,246,210,143,255,242,247,255,255,242,
242,242,255,242,242,242,255,249,249,249,255,203,203,203,255,131,130,130,255,204,
204,204,255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,
47,19,255,195,106,89,255,195,202,203,255,195,195,195,255,195,195,195,255,195,
195,195,255,195,196,196,255,195,197,198,255,195,195,195,255,195,195,195,255,202,
202,202,255,196,196,196,255,143,143,143,255,114,114,114,189,152,152,152,56,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,125,125,
59,127,127,127,192,180,180,180,255,246,246,246,255,250,250,250,255,242,242,242,
255,242,242,242,255,242,242,242,255,242,242,242,255,242,243,244,255,242,243,243,
255,249,178,46,255,252,156,0,255,246,210,142,255,242,247,255,255,242,242,242,
255,242,242,242,255,249,249,249,255,203,203,203,255,131,131,131,255,204,204,204,
255,195,195,195,255,195,195,196,255,195,200,201,255,195,98,80,255,195,44,14,255,
195,100,82,255,195,202,203,255,195,195,195,255,195,195,195,255,195,195,195,255,
195,195,195,255,195,195,195,255,200,200,200,255,203,203,203,255,160,160,160,255,
115,115,115,218,128,128,128,89,180,180,180,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,187,187,4,132,132,132,
92,136,136,136,222,203,203,203,255,253,253,253,255,247,247,247,255,242,242,242,
255,242,242,242,255,242,242,242,255,242,243,247,255,244,226,189,255,249,179,46,
255,246,208,136,255,242,247,255,255,242,242,242,255,242,242,242,255,249,249,249,
255,203,203,203,255,131,131,131,255,204,204,204,255,195,195,195,255,195,195,196,
255,195,200,201,255,195,90,70,255,195,64,40,255,195,151,143,255,195,200,201,255,
195,195,195,255,195,195,195,255,195,195,195,255,197,197,197,255,205,205,205,255,
177,177,177,255,115,115,115,240,115,115,115,125,182,182,182,14,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,185,185,185,16,117,117,117,128,141,141,141,242,222,222,
222,255,254,254,254,255,244,244,244,255,242,242,242,255,242,242,242,255,242,246,
253,255,242,241,238,255,243,235,220,255,242,243,245,255,242,242,242,255,242,242,
242,255,249,249,249,255,203,203,203,255,131,131,131,255,204,204,204,255,195,195,
195,255,195,195,195,255,195,195,195,255,194,148,140,255,195,183,180,255,195,203,
204,255,195,194,195,255,195,195,195,255,196,196,196,255,204,204,204,255,187,187,
187,255,131,131,131,252,115,115,115,159,158,158,158,34,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,114,114,37,120,120,120,162,
162,162,162,252,237,237,237,255,253,253,253,255,243,243,243,255,242,242,241,255,
242,243,245,255,242,244,246,255,242,242,241,255,242,242,242,255,242,242,242,255,
249,249,249,255,203,203,203,255,131,131,131,255,204,204,204,255,195,195,195,255,
195,195,195,255,195,195,195,255,195,201,202,255,195,199,199,255,195,195,195,255,
195,195,195,255,202,202,202,255,197,197,197,255,146,146,146,255,115,115,115,193,
125,125,125,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,126,126,64,128,128,128,195,184,184,
184,255,248,248,248,255,250,250,250,255,242,242,242,255,242,242,242,255,242,242,
242,255,242,242,242,255,242,242,242,255,249,249,249,255,203,203,203,255,131,131,
131,255,204,204,204,255,195,195,195,255,195,195,195,255,195,195,195,255,195,195,
195,255,195,195,195,255,199,199,199,255,204,204,204,255,162,162,162,255,113,113,
113,219,118,118,118,92,186,186,186,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
192,192,192,4,122,122,122,95,132,132,132,223,205,205,205,255,254,254,254,255,
247,247,247,255,242,242,242,255,242,242,242,255,242,242,242,255,249,249,249,255,
203,203,203,255,131,131,131,255,204,204,204,255,195,195,195,255,195,195,195,255,
195,195,195,255,197,197,197,255,205,205,205,255,175,175,175,255,117,117,117,241,
118,118,118,128,173,173,173,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,18,119,119,119,132,146,146,146,243,224,
224,224,255,254,254,254,255,244,244,244,255,242,242,242,255,249,249,249,255,203,
203,203,255,131,131,131,255,204,204,204,255,195,195,195,255,196,196,196,255,204,
204,204,255,189,189,189,255,131,131,131,253,119,119,119,162,133,133,133,37,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,134,134,134,41,122,122,122,168,168,168,168,254,239,239,
239,255,252,252,252,255,249,249,249,255,203,203,203,255,131,131,131,255,204,204,
204,255,201,201,201,255,200,200,200,255,148,148,148,255,115,115,115,197,139,139,
139,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,125,125,
69,125,125,125,199,190,190,190,255,255,255,255,255,208,208,208,255,135,135,135,
255,213,213,213,255,164,163,163,255,108,108,108,223,118,118,118,100,192,192,192,
5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
194,194,194,6,120,120,120,105,137,137,137,229,173,173,173,255,113,113,113,255,
126,126,126,243,121,120,120,135,133,133,133,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,
137,137,21,111,111,111,153,91,91,91,182,148,148,148,42,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_Mesh_Tools_Icon(idata_Mesh_Tools_Icon, 68, 68, 4, 0);

void MeshToolsUI::cb_Ok_smooth_i(Fl_Button*, void*) {
  MT->Mesh_Smooth(S_Iteration_number->value(),Relaxation->value());
smooth_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_smooth(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_smooth_i(o,v);
}

void MeshToolsUI::cb_Cancel_smooth_i(Fl_Button*, void*) {
  smooth_hide();
}
void MeshToolsUI::cb_Cancel_smooth(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_smooth_i(o,v);
}

void MeshToolsUI::cb_Ok_blend_i(Fl_Button*, void*) {
  MT->Set_Blend(
Alpha_value->value()
);
blend_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_blend(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_blend_i(o,v);
}

void MeshToolsUI::cb_Ok_grid_size_i(Fl_Button*, void*) {
  MT->Set_Grid_Size(
grid_size_value->value()
);
grid_size_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_grid_size(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_grid_size_i(o,v);
}

void MeshToolsUI::cb_Ok_100pixels_in_mm_i(Fl_Button*, void*) {
  MT->Set_100pixels_in_mm(
TF100pixels_in_mm_value->value()
);
zoomScaleWindow_hide();
}
void MeshToolsUI::cb_Ok_100pixels_in_mm(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_100pixels_in_mm_i(o,v);
}

void MeshToolsUI::cb_Ok_curv_i(Fl_Button*, void*) {
  int cv =1;
if (cv_1->value()==1){cv=1;}
else if (cv_2->value()==1){cv=2;}
else if (cv_3->value()==1){cv=3;}
else if (cv_4->value()==1){cv=4;}
MT->Set_Active_Scalar(cv);
MT->SC_calc_curvature(cv);
curv_hide();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_Ok_curv(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_curv_i(o,v);
}

void MeshToolsUI::cb_Cancel_curv_i(Fl_Button*, void*) {
  curv_hide();
}
void MeshToolsUI::cb_Cancel_curv(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_curv_i(o,v);
}

void MeshToolsUI::cb_Ok_delete_i(Fl_Button*, void*) {
  MT->Delete_smaller_than(Triangles->value());
delete_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_delete(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_delete_i(o,v);
}

void MeshToolsUI::cb_Cancel_delete_i(Fl_Button*, void*) {
  delete_hide();
}
void MeshToolsUI::cb_Cancel_delete(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_delete_i(o,v);
}

void MeshToolsUI::cb_Ok_delete_small_volume_i(Fl_Button*, void*) {
  MT->Delete_volume_smaller_than(DeleteVolume->value());
delete2_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_delete_small_volume(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_delete_small_volume_i(o,v);
}

void MeshToolsUI::cb_Cancel_volume_delete_i(Fl_Button*, void*) {
  delete2_hide();
}
void MeshToolsUI::cb_Cancel_volume_delete(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_volume_delete_i(o,v);
}

void MeshToolsUI::cb_Okdef2_i(Fl_Button*, void*) {
  float percentage;
int basis;
if (U_1->value() == 1){basis = 0;}
if (U_2->value() == 1){basis = 1;}
percentage = Def_percentage->value();
// Write new code!
MT->Mesh_TPS(basis, percentage);
MT->redraw();
}
void MeshToolsUI::cb_Okdef2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Okdef2_i(o,v);
}

void MeshToolsUI::cb_Canceldef_i(Fl_Button*, void*) {
  //MT->Def_cancel_def();
MT->redraw();
def_hide();
}
void MeshToolsUI::cb_Canceldef(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Canceldef_i(o,v);
}

void MeshToolsUI::cb_Ok_curve_landmark_i(Fl_Button*, void*) {
  int file_type =0;
file_type = LMK_VER3->value();
MT->Save_CUR_LMK_File(file_type,
CUR_NR->value()
);
lmcur_hide();
}
void MeshToolsUI::cb_Ok_curve_landmark(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_curve_landmark_i(o,v);
}

void MeshToolsUI::cb_Ok_move_handles_i(Fl_Button*, void*) {
  MT->Move_Selected_Handles(MovementIntensity->value());
MT->redraw();
movehandles_hide();
}
void MeshToolsUI::cb_Ok_move_handles(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_move_handles_i(o,v);
}

void MeshToolsUI::cb_Cancel_move_handles_i(Fl_Button*, void*) {
  movehandles_hide();
}
void MeshToolsUI::cb_Cancel_move_handles(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_move_handles_i(o,v);
}

void MeshToolsUI::cb_OkSTLSave_i(Fl_Button*, void*) {
  int mode;
int type;
type=0;
mode=0;
if (STL_T_1->value() == 1){type = 1;}
if (STL_M_1->value() == 1){mode = 1;}
MT->Save_Mesh_File(type, mode, 0);
stl_hide();
}
void MeshToolsUI::cb_OkSTLSave(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkSTLSave_i(o,v);
}

void MeshToolsUI::cb_CancelSaveSTL_i(Fl_Button*, void*) {
  stl_hide();
}
void MeshToolsUI::cb_CancelSaveSTL(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSaveSTL_i(o,v);
}

void MeshToolsUI::cb_OkVTKSave_i(Fl_Button*, void*) {
  int mode;
int type;
type=0;
mode=0;
if (VTK_T_1->value() == 1){type = 1;}
if (VTK_M_1->value() == 1){mode = 1;}
MT->Save_Mesh_File(type, mode, 1);
vtk_hide();
}
void MeshToolsUI::cb_OkVTKSave(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkVTKSave_i(o,v);
}

void MeshToolsUI::cb_CancelSaveVTK_i(Fl_Button*, void*) {
  vtk_hide();
}
void MeshToolsUI::cb_CancelSaveVTK(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSaveVTK_i(o,v);
}

void MeshToolsUI::cb_OkOBJSave_i(Fl_Button*, void*) {
  int mode;
int type;
type=1;
mode=0;
if (OBJ_M_1->value() == 1){mode = 1;}
MT->Save_Mesh_File(type, mode, 2);
obj_hide();
}
void MeshToolsUI::cb_OkOBJSave(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkOBJSave_i(o,v);
}

void MeshToolsUI::cb_CancelSaveOBJ_i(Fl_Button*, void*) {
  obj_hide();
}
void MeshToolsUI::cb_CancelSaveOBJ(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSaveOBJ_i(o,v);
}

void MeshToolsUI::cb_OkPLYSave_i(Fl_Button*, void*) {
  int mode;
int type;
int save_norms;
type=0;
mode=0;
save_norms=0;
if (PLY_T_1->value() == 1){type = 1;}
if (PLY_T_2->value() == 1){type = 2;}
if (PLY_M_1->value() == 1){mode = 1;}
if (PLY_N_1->value() == 1){save_norms = 1;}
MT->Save_Mesh_File(type, mode, 3, save_norms);
ply_hide();
}
void MeshToolsUI::cb_OkPLYSave(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkPLYSave_i(o,v);
}

void MeshToolsUI::cb_CancelSavePLY_i(Fl_Button*, void*) {
  ply_hide();
}
void MeshToolsUI::cb_CancelSavePLY(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSavePLY_i(o,v);
}

void MeshToolsUI::cb_Ok_decimate_i(Fl_Button*, void*) {
  MT->Mesh_Decimate(DCM_factor->value(), dc_quadratic->value());
decimate_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_decimate(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_decimate_i(o,v);
}

void MeshToolsUI::cb_Cancel_decimate_i(Fl_Button*, void*) {
  decimate_hide();
}
void MeshToolsUI::cb_Cancel_decimate(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_decimate_i(o,v);
}

void MeshToolsUI::cb_dc_quadratic_i(Fl_Round_Button*, void*) {
  MT->Set_Display_All(1);
}
void MeshToolsUI::cb_dc_quadratic(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_dc_quadratic_i(o,v);
}

void MeshToolsUI::cb_OkLMKSave1_i(Fl_Button*, void*) {
  int file_type;

file_type=0;
if (LMK_VER->value() == 1){file_type = 1;}
MT->Save_Landmarks(file_type, 0, 0);
lmk_hide();
}
void MeshToolsUI::cb_OkLMKSave1(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkLMKSave1_i(o,v);
}

void MeshToolsUI::cb_CancelSaveLMK_i(Fl_Button*, void*) {
  lmk_hide();
}
void MeshToolsUI::cb_CancelSaveLMK(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSaveLMK_i(o,v);
}

void MeshToolsUI::cb_OkLMKSave2_i(Fl_Button*, void*) {
  int file_type;

file_type=0;
if (LMK_VER->value() == 1){file_type = 1;}
MT->Save_Landmarks(file_type, 0, 1);
lmk_hide();
}
void MeshToolsUI::cb_OkLMKSave2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkLMKSave2_i(o,v);
}

void MeshToolsUI::cb_OkLMKSave3_i(Fl_Button*, void*) {
  int file_type;

file_type=0;
if (LMK_VER2->value() == 1){file_type = 1;}

MT->Save_Landmarks(file_type, 1, 0);
lmk_hide2();
}
void MeshToolsUI::cb_OkLMKSave3(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkLMKSave3_i(o,v);
}

void MeshToolsUI::cb_CancelSaveLMK2_i(Fl_Button*, void*) {
  lmk_hide2();
}
void MeshToolsUI::cb_CancelSaveLMK2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSaveLMK2_i(o,v);
}

void MeshToolsUI::cb_OkLMKSave4_i(Fl_Button*, void*) {
  int file_type;

file_type=0;
if (LMK_VER->value() == 1){file_type = 1;}
MT->Save_Landmarks(file_type, 1, 1);
lmk_hide();
}
void MeshToolsUI::cb_OkLMKSave4(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkLMKSave4_i(o,v);
}

void MeshToolsUI::cb_Ok_sc_i(Fl_Button*, void*) {
  MT->Set_sc_max(Max->value());
MT->Set_sc_min(Min->value());
if (sc_active->value()>=0)
{
	MT->Set_Active_Scalar(sc_active->value());
}

if (sc_cs->value()>=0)
{

	MT->SetColorScaleId(sc_cs->value());
}
scmin->value (MT->Get_sc_min());
scmax->value (MT->Get_sc_max());
scmin->maximum ((MT->Get_sc_max()+MT->Get_sc_min())/2);
scmin->minimum ((3*MT->Get_sc_min()-MT->Get_sc_max())/2);
scmax->minimum ((MT->Get_sc_max()+MT->Get_sc_min())/2);
scmax->maximum ((3*MT->Get_sc_max()-MT->Get_sc_min())/2);
scmax->redraw();
scmin->redraw();
MT->Update_RGB();
MT->redraw();
//sc_hide();
}
void MeshToolsUI::cb_Ok_sc(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_sc_i(o,v);
}

void MeshToolsUI::cb_scmin_i(Fl_Slider* o, void*) {
  MT->Set_sc_min(((Fl_Slider *)o)->value());
sc_update();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_scmin(Fl_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_scmin_i(o,v);
}

void MeshToolsUI::cb_scmax_i(Fl_Slider* o, void*) {
  MT->Set_sc_max(((Fl_Slider *)o)->value());
sc_update();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_scmax(Fl_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_scmax_i(o,v);
}

void MeshToolsUI::cb_sc_active_i(Fl_Choice* o, void*) {
  MT->Set_Active_Scalar(
((Fl_Choice *)o)->value());
/*if (((Fl_Choice *)o)->value()==5)
{
	sc_cs->value(1);
	MT->SetColorScaleId(1);
	
}
else
{*/
	//sc_cs->value(0);
	//MT->SetColorScaleId(0);
	Max_sc->value(MT->scalars_get_max());
	Min_sc->value(MT->scalars_get_min());
//}
//MT->SetColorScaleId(1);

MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_sc_active(Fl_Choice* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_sc_active_i(o,v);
}

void MeshToolsUI::cb_sc_right_01_i(Fl_Button*, void*) {
  Min->value(Min_sc->value());
//sc_hide();
}
void MeshToolsUI::cb_sc_right_01(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_sc_right_01_i(o,v);
}

static const char *idata_s_right_132[] = {
"20 13 -4 1",
" \377\377\377!\363u\17\"\333]\t#\0\0\0",
"                    ",
"                    ",
"          \"\"        ",
"          \"!\"       ",
"          \"!!\"      ",
"    #!!!!!!!!!\"     ",
"    #!!!!!!!!!!#    ",
"    #!!!!!!!!!#     ",
"    ######!!!#      ",
"          #!#       ",
"          ##        ",
"                    ",
"                    "
};
static Fl_Pixmap image_s_right_132(idata_s_right_132);

void MeshToolsUI::cb_sc_right_02_i(Fl_Button*, void*) {
  Max->value(Max_sc->value());
//sc_hide();
}
void MeshToolsUI::cb_sc_right_02(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_sc_right_02_i(o,v);
}

void MeshToolsUI::cb_Ok_sc2_i(Fl_Button*, void*) {
  MT->Initialize_Scalar(sc_active->value());
MT->redraw();
//sc_hide();
}
void MeshToolsUI::cb_Ok_sc2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_sc2_i(o,v);
}

void MeshToolsUI::cb_Ok_sc3_i(Fl_Button*, void*) {
  MT->Remove_Scalar(sc_active->value());
MT->redraw();
//sc_hide();
}
void MeshToolsUI::cb_Ok_sc3(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_sc3_i(o,v);
}

void MeshToolsUI::cb_sc_cs_i(Fl_Choice* o, void*) {
  MT->SetColorScaleId(
((Fl_Choice *)o)->value());

Max_sc->value(MT->scalars_get_max());
Min_sc->value(MT->scalars_get_min());
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_sc_cs(Fl_Choice* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_sc_cs_i(o,v);
}

void MeshToolsUI::cb_above_Max_i(Fl_Check_Button* o, void*) {
  MT->SC_Show_Above_Max(((Fl_Check_Button *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_above_Max(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_above_Max_i(o,v);
}

void MeshToolsUI::cb_below_Min_i(Fl_Check_Button* o, void*) {
  MT->SC_Show_Below_Min(((Fl_Check_Button *)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_below_Min(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_below_Min_i(o,v);
}

void MeshToolsUI::cb_Ok_thickness_i(Fl_Button*, void*) {
  MT->Set_Active_Scalar(5);
MT->SC_calc_thickness(Thickness_Max_Distance->value(), thicknessWindow);
thickness_hide();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_Ok_thickness(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_thickness_i(o,v);
}

void MeshToolsUI::cb_Cancel_th_i(Fl_Button*, void*) {
  thickness_hide();
}
void MeshToolsUI::cb_Cancel_th(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_th_i(o,v);
}

void MeshToolsUI::cb_Ok_tags_i(Fl_Button*, void*) {
  MT->Set_Pencil_Extension_Level(Pencil_Tag_level->value());
MT->Set_Magic_Wand_Extension_Level(Magic_Wand_Limit->value());
MT->save_ini_param();

MT->redraw();
//tags_hide();
}
void MeshToolsUI::cb_Ok_tags(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_tags_i(o,v);
}

void MeshToolsUI::cb_init_tags_i(Fl_Button*, void*) {
  MT->Init_Tags();
MT->save_ini_param();
tags_update();
MT->Update_RGB();
MT->redraw();
//tags_hide();
}
void MeshToolsUI::cb_init_tags(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_init_tags_i(o,v);
}

void MeshToolsUI::cb_Pencil_Tag_level_i(Fl_Value_Input*, void*) {
  MT->Set_Pencil_Extension_Level(Pencil_Tag_level->value());
}
void MeshToolsUI::cb_Pencil_Tag_level(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Pencil_Tag_level_i(o,v);
}

void MeshToolsUI::cb_Magic_Wand_Limit_i(Fl_Value_Slider*, void*) {
  MT->Set_Magic_Wand_Extension_Level(Magic_Wand_Limit->value());
}
void MeshToolsUI::cb_Magic_Wand_Limit(Fl_Value_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Magic_Wand_Limit_i(o,v);
}

void MeshToolsUI::cb_Magic_Wand_Override_i(Fl_Check_Button*, void*) {
  MT->Set_Magic_Wand_Override(Magic_Wand_Override->value());
}
void MeshToolsUI::cb_Magic_Wand_Override(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Magic_Wand_Override_i(o,v);
}

void MeshToolsUI::cb_rb_extract00_i(Fl_Round_Button*, void*) {
  MT->Set_Tag_Extraction_Criterion(1);
}
void MeshToolsUI::cb_rb_extract00(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_rb_extract00_i(o,v);
}

void MeshToolsUI::cb_rb_extract01_i(Fl_Round_Button*, void*) {
  MT->Set_Tag_Extraction_Criterion(0);
}
void MeshToolsUI::cb_rb_extract01(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_rb_extract01_i(o,v);
}

void MeshToolsUI::cb_Tag_text_00_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(0, label);
}
void MeshToolsUI::cb_Tag_text_00(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_00_i(o,v);
}

void MeshToolsUI::cb_Tag_text_01_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(1, label);
}
void MeshToolsUI::cb_Tag_text_01(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_01_i(o,v);
}

void MeshToolsUI::cb_Tag_text_02_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(2, label);
}
void MeshToolsUI::cb_Tag_text_02(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_02_i(o,v);
}

void MeshToolsUI::cb_Tag_text_03_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(3, label);
}
void MeshToolsUI::cb_Tag_text_03(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_03_i(o,v);
}

void MeshToolsUI::cb_Tag_text_04_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(4, label);
}
void MeshToolsUI::cb_Tag_text_04(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_04_i(o,v);
}

void MeshToolsUI::cb_Tag_text_05_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(5, label);
}
void MeshToolsUI::cb_Tag_text_05(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_05_i(o,v);
}

void MeshToolsUI::cb_Tag_text_06_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(6, label);
}
void MeshToolsUI::cb_Tag_text_06(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_06_i(o,v);
}

void MeshToolsUI::cb_Tag_text_07_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(7, label);
}
void MeshToolsUI::cb_Tag_text_07(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_07_i(o,v);
}

void MeshToolsUI::cb_Tag_text_08_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(8, label);
}
void MeshToolsUI::cb_Tag_text_08(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_08_i(o,v);
}

void MeshToolsUI::cb_Tag_text_09_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(9, label);
}
void MeshToolsUI::cb_Tag_text_09(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_09_i(o,v);
}

void MeshToolsUI::cb_Tag_text_10_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(10, label);
}
void MeshToolsUI::cb_Tag_text_10(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_10_i(o,v);
}

void MeshToolsUI::cb_Tag_text_11_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(11, label);
}
void MeshToolsUI::cb_Tag_text_11(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_11_i(o,v);
}

void MeshToolsUI::cb_Tag_text_12_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(12, label);
}
void MeshToolsUI::cb_Tag_text_12(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_12_i(o,v);
}

void MeshToolsUI::cb_Tag_text_13_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(13, label);
}
void MeshToolsUI::cb_Tag_text_13(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_13_i(o,v);
}

void MeshToolsUI::cb_Tag_text_14_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(14, label);
}
void MeshToolsUI::cb_Tag_text_14(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_14_i(o,v);
}

void MeshToolsUI::cb_Tag_text_15_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(15, label);
}
void MeshToolsUI::cb_Tag_text_15(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_15_i(o,v);
}

void MeshToolsUI::cb_Tag_text_16_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(16, label);
}
void MeshToolsUI::cb_Tag_text_16(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_16_i(o,v);
}

void MeshToolsUI::cb_Tag_text_17_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(17, label);
}
void MeshToolsUI::cb_Tag_text_17(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_17_i(o,v);
}

void MeshToolsUI::cb_Tag_text_18_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(18, label);
}
void MeshToolsUI::cb_Tag_text_18(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_18_i(o,v);
}

void MeshToolsUI::cb_Tag_text_19_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(19, label);
}
void MeshToolsUI::cb_Tag_text_19(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_19_i(o,v);
}

void MeshToolsUI::cb_Tag_text_20_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(20, label);
}
void MeshToolsUI::cb_Tag_text_20(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_20_i(o,v);
}

void MeshToolsUI::cb_Tag_text_21_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(21, label);
}
void MeshToolsUI::cb_Tag_text_21(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_21_i(o,v);
}

void MeshToolsUI::cb_Tag_text_22_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(22, label);
}
void MeshToolsUI::cb_Tag_text_22(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_22_i(o,v);
}

void MeshToolsUI::cb_Tag_text_23_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(23, label);
}
void MeshToolsUI::cb_Tag_text_23(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_23_i(o,v);
}

void MeshToolsUI::cb_Tag_text_24_i(Fl_Input* o, void*) {
  std::string label = ((Fl_Input*)o)->value();
MT->set_tag_label(24, label);
}
void MeshToolsUI::cb_Tag_text_24(Fl_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_text_24_i(o,v);
}

void MeshToolsUI::cb_rb_tag00_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(0);
}
void MeshToolsUI::cb_rb_tag00(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag00_i(o,v);
}

void MeshToolsUI::cb_rb_tag01_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(1);
}
void MeshToolsUI::cb_rb_tag01(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag01_i(o,v);
}

void MeshToolsUI::cb_rb_tag02_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(2);
}
void MeshToolsUI::cb_rb_tag02(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag02_i(o,v);
}

void MeshToolsUI::cb_rb_tag03_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(3);
}
void MeshToolsUI::cb_rb_tag03(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag03_i(o,v);
}

void MeshToolsUI::cb_rb_tag04_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(4);
}
void MeshToolsUI::cb_rb_tag04(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag04_i(o,v);
}

void MeshToolsUI::cb_rb_tag05_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(5);
}
void MeshToolsUI::cb_rb_tag05(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag05_i(o,v);
}

void MeshToolsUI::cb_rb_tag06_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(6);
}
void MeshToolsUI::cb_rb_tag06(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag06_i(o,v);
}

void MeshToolsUI::cb_rb_tag07_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(7);
}
void MeshToolsUI::cb_rb_tag07(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag07_i(o,v);
}

void MeshToolsUI::cb_rb_tag08_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(8);
}
void MeshToolsUI::cb_rb_tag08(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag08_i(o,v);
}

void MeshToolsUI::cb_rb_tag09_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(9);
}
void MeshToolsUI::cb_rb_tag09(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag09_i(o,v);
}

void MeshToolsUI::cb_rb_tag10_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(10);
}
void MeshToolsUI::cb_rb_tag10(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag10_i(o,v);
}

void MeshToolsUI::cb_rb_tag11_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(11);
}
void MeshToolsUI::cb_rb_tag11(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag11_i(o,v);
}

void MeshToolsUI::cb_rb_tag12_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(12);
}
void MeshToolsUI::cb_rb_tag12(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag12_i(o,v);
}

void MeshToolsUI::cb_rb_tag13_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(13);
}
void MeshToolsUI::cb_rb_tag13(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag13_i(o,v);
}

void MeshToolsUI::cb_rb_tag14_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(14);
}
void MeshToolsUI::cb_rb_tag14(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag14_i(o,v);
}

void MeshToolsUI::cb_rb_tag15_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(15);
}
void MeshToolsUI::cb_rb_tag15(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag15_i(o,v);
}

void MeshToolsUI::cb_rb_tag16_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(16);
}
void MeshToolsUI::cb_rb_tag16(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag16_i(o,v);
}

void MeshToolsUI::cb_rb_tag17_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(17);
}
void MeshToolsUI::cb_rb_tag17(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag17_i(o,v);
}

void MeshToolsUI::cb_rb_tag18_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(18);
}
void MeshToolsUI::cb_rb_tag18(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag18_i(o,v);
}

void MeshToolsUI::cb_rb_tag19_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(19);
}
void MeshToolsUI::cb_rb_tag19(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag19_i(o,v);
}

void MeshToolsUI::cb_rb_tag20_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(20);
}
void MeshToolsUI::cb_rb_tag20(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag20_i(o,v);
}

void MeshToolsUI::cb_rb_tag21_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(21);
}
void MeshToolsUI::cb_rb_tag21(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag21_i(o,v);
}

void MeshToolsUI::cb_rb_tag22_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(22);
}
void MeshToolsUI::cb_rb_tag22(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag22_i(o,v);
}

void MeshToolsUI::cb_rb_tag23_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(23);
}
void MeshToolsUI::cb_rb_tag23(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag23_i(o,v);
}

void MeshToolsUI::cb_rb_tag24_i(Fl_Round_Button*, void*) {
  MT->Set_Active_Tag(24);
}
void MeshToolsUI::cb_rb_tag24(Fl_Round_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rb_tag24_i(o,v);
}

void MeshToolsUI::cb_Alpha_00_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(0,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_00(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_00_i(o,v);
}

void MeshToolsUI::cb_Alpha_01_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(1,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_01(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_01_i(o,v);
}

void MeshToolsUI::cb_Alpha_02_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(2,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_02(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_02_i(o,v);
}

void MeshToolsUI::cb_Alpha_03_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(3,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_03(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_03_i(o,v);
}

void MeshToolsUI::cb_Alpha_04_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(4,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_04(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_04_i(o,v);
}

void MeshToolsUI::cb_Alpha_05_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(5,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_05(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_05_i(o,v);
}

void MeshToolsUI::cb_Alpha_06_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(6,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_06(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_06_i(o,v);
}

void MeshToolsUI::cb_Alpha_07_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(7,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_07(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_07_i(o,v);
}

void MeshToolsUI::cb_Alpha_08_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(8,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_08(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_08_i(o,v);
}

void MeshToolsUI::cb_Alpha_09_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(9,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_09(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_09_i(o,v);
}

void MeshToolsUI::cb_Alpha_10_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(10,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_10(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_10_i(o,v);
}

void MeshToolsUI::cb_Alpha_11_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(11,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_11(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_11_i(o,v);
}

void MeshToolsUI::cb_Alpha_12_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(12,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_12(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_12_i(o,v);
}

void MeshToolsUI::cb_Alpha_13_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(13,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_13(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_13_i(o,v);
}

void MeshToolsUI::cb_Alpha_14_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(14,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_14(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_14_i(o,v);
}

void MeshToolsUI::cb_Alpha_15_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(15,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_15(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_15_i(o,v);
}

void MeshToolsUI::cb_Alpha_16_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(16,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_16(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_16_i(o,v);
}

void MeshToolsUI::cb_Alpha_17_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(17,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_17(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_17_i(o,v);
}

void MeshToolsUI::cb_Alpha_18_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(18,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_18(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_18_i(o,v);
}

void MeshToolsUI::cb_Alpha_19_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(19,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_19(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_19_i(o,v);
}

void MeshToolsUI::cb_Alpha_20_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(20,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_20(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_20_i(o,v);
}

void MeshToolsUI::cb_Alpha_21_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(21,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_21(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_21_i(o,v);
}

void MeshToolsUI::cb_Alpha_22_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(22,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_22(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_22_i(o,v);
}

void MeshToolsUI::cb_Alpha_23_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(23,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_23(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_23_i(o,v);
}

void MeshToolsUI::cb_Alpha_24_i(Fl_Value_Input* o, void*) {
  MT->set_tag_alpha(24,
((Fl_Value_Input*)o)->value());
MT->redraw();
}
void MeshToolsUI::cb_Alpha_24(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alpha_24_i(o,v);
}

void MeshToolsUI::cb_Tag_00_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(0,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_00(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_00_i(o,v);
}

void MeshToolsUI::cb_Tag_01_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(1,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_01(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_01_i(o,v);
}

void MeshToolsUI::cb_Tag_02_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(2,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_02(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_02_i(o,v);
}

void MeshToolsUI::cb_Tag_03_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(3,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_03(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_03_i(o,v);
}

void MeshToolsUI::cb_Tag_04_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(4,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_04(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_04_i(o,v);
}

void MeshToolsUI::cb_Tag_05_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(5,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_05(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_05_i(o,v);
}

void MeshToolsUI::cb_Tag_06_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(6,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_06(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_06_i(o,v);
}

void MeshToolsUI::cb_Tag_07_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(7,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_07(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_07_i(o,v);
}

void MeshToolsUI::cb_Tag_08_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(8,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_08(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_08_i(o,v);
}

void MeshToolsUI::cb_Tag_09_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(9,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_09(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_09_i(o,v);
}

void MeshToolsUI::cb_Tag_10_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(10,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_10(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_10_i(o,v);
}

void MeshToolsUI::cb_Tag_11_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(11,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_11(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_11_i(o,v);
}

void MeshToolsUI::cb_Tag_12_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(12,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_12(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_12_i(o,v);
}

void MeshToolsUI::cb_Tag_13_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(13,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_13(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_13_i(o,v);
}

void MeshToolsUI::cb_Tag_14_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(14,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_14(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_14_i(o,v);
}

void MeshToolsUI::cb_Tag_15_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(15,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_15(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_15_i(o,v);
}

void MeshToolsUI::cb_Tag_16_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(16,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_16(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_16_i(o,v);
}

void MeshToolsUI::cb_Tag_17_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(17,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_17(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_17_i(o,v);
}

void MeshToolsUI::cb_Tag_18_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(18,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_18(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_18_i(o,v);
}

void MeshToolsUI::cb_Tag_19_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(19,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_19(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_19_i(o,v);
}

void MeshToolsUI::cb_Tag_20_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(20,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_20(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_20_i(o,v);
}

void MeshToolsUI::cb_Tag_21_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(21,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_21(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_21_i(o,v);
}

void MeshToolsUI::cb_Tag_22_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(22,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_22(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_22_i(o,v);
}

void MeshToolsUI::cb_Tag_23_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(23,r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Tag_23(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_23_i(o,v);
}

void MeshToolsUI::cb_Tag_24_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_tag_color(24,r,g,b);
//std::cout<<"r"<<r*255<<"g"<<g*255<<"b"<<b*255<<std::endl;
MT->redraw();
}
void MeshToolsUI::cb_Tag_24(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Tag_24_i(o,v);
}

void MeshToolsUI::cb_Clear_01_i(Fl_Button*, void*) {
  MT->Merge_Tags(1,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_01(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_01_i(o,v);
}

void MeshToolsUI::cb_Clear_02_i(Fl_Button*, void*) {
  MT->Merge_Tags(2,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_02(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_02_i(o,v);
}

void MeshToolsUI::cb_Clear_03_i(Fl_Button*, void*) {
  MT->Merge_Tags(3,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_03(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_03_i(o,v);
}

void MeshToolsUI::cb_Clear_04_i(Fl_Button*, void*) {
  MT->Merge_Tags(4,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_04(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_04_i(o,v);
}

void MeshToolsUI::cb_Clear_05_i(Fl_Button*, void*) {
  MT->Merge_Tags(5,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_05(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_05_i(o,v);
}

void MeshToolsUI::cb_Clear_06_i(Fl_Button*, void*) {
  MT->Merge_Tags(6,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_06(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_06_i(o,v);
}

void MeshToolsUI::cb_Clear_07_i(Fl_Button*, void*) {
  MT->Merge_Tags(7,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_07(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_07_i(o,v);
}

void MeshToolsUI::cb_Clear_08_i(Fl_Button*, void*) {
  MT->Merge_Tags(8,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_08(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_08_i(o,v);
}

void MeshToolsUI::cb_Clear_09_i(Fl_Button*, void*) {
  MT->Merge_Tags(9,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_09(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_09_i(o,v);
}

void MeshToolsUI::cb_Clear_10_i(Fl_Button*, void*) {
  MT->Merge_Tags(10,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_10(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_10_i(o,v);
}

void MeshToolsUI::cb_Clear_11_i(Fl_Button*, void*) {
  MT->Merge_Tags(11,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_11(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_11_i(o,v);
}

void MeshToolsUI::cb_Clear_12_i(Fl_Button*, void*) {
  MT->Merge_Tags(12,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_12(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_12_i(o,v);
}

void MeshToolsUI::cb_Clear_13_i(Fl_Button*, void*) {
  MT->Merge_Tags(13,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_13(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_13_i(o,v);
}

void MeshToolsUI::cb_Clear_14_i(Fl_Button*, void*) {
  MT->Merge_Tags(14,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_14(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_14_i(o,v);
}

void MeshToolsUI::cb_Clear_15_i(Fl_Button*, void*) {
  MT->Merge_Tags(15,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_15(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_15_i(o,v);
}

void MeshToolsUI::cb_Clear_16_i(Fl_Button*, void*) {
  MT->Merge_Tags(16,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_16(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_16_i(o,v);
}

void MeshToolsUI::cb_Clear_17_i(Fl_Button*, void*) {
  MT->Merge_Tags(17,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_17(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_17_i(o,v);
}

void MeshToolsUI::cb_Clear_18_i(Fl_Button*, void*) {
  MT->Merge_Tags(18,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_18(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_18_i(o,v);
}

void MeshToolsUI::cb_Clear_19_i(Fl_Button*, void*) {
  MT->Merge_Tags(19,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_19(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_19_i(o,v);
}

void MeshToolsUI::cb_Clear_20_i(Fl_Button*, void*) {
  MT->Merge_Tags(20,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_20(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_20_i(o,v);
}

void MeshToolsUI::cb_Clear_21_i(Fl_Button*, void*) {
  MT->Merge_Tags(21,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_21(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_21_i(o,v);
}

void MeshToolsUI::cb_Clear_22_i(Fl_Button*, void*) {
  MT->Merge_Tags(22,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_22(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_22_i(o,v);
}

void MeshToolsUI::cb_Clear_23_i(Fl_Button*, void*) {
  MT->Merge_Tags(23,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_23(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_23_i(o,v);
}

void MeshToolsUI::cb_Clear_24_i(Fl_Button*, void*) {
  MT->Merge_Tags(24,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_24(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_24_i(o,v);
}

void MeshToolsUI::cb_Clear_00_i(Fl_Button*, void*) {
  MT->Merge_Tags(0,0);
MT->redraw();
}
void MeshToolsUI::cb_Clear_00(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Clear_00_i(o,v);
}

void MeshToolsUI::cb_FH_01_i(Fl_Button*, void*) {
  //MT->Fill_Holes(1);
fillholes2_show(1);
//MT->redraw();
}
void MeshToolsUI::cb_FH_01(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_01_i(o,v);
}

void MeshToolsUI::cb_FH_02_i(Fl_Button*, void*) {
  fillholes2_show(2);
}
void MeshToolsUI::cb_FH_02(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_02_i(o,v);
}

void MeshToolsUI::cb_FH_03_i(Fl_Button*, void*) {
  fillholes2_show(3);
}
void MeshToolsUI::cb_FH_03(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_03_i(o,v);
}

void MeshToolsUI::cb_FH_04_i(Fl_Button*, void*) {
  fillholes2_show(4);
}
void MeshToolsUI::cb_FH_04(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_04_i(o,v);
}

void MeshToolsUI::cb_FH_05_i(Fl_Button*, void*) {
  fillholes2_show(5);
}
void MeshToolsUI::cb_FH_05(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_05_i(o,v);
}

void MeshToolsUI::cb_FH_06_i(Fl_Button*, void*) {
  fillholes2_show(6);
}
void MeshToolsUI::cb_FH_06(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_06_i(o,v);
}

void MeshToolsUI::cb_FH_07_i(Fl_Button*, void*) {
  fillholes2_show(7);
}
void MeshToolsUI::cb_FH_07(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_07_i(o,v);
}

void MeshToolsUI::cb_FH_08_i(Fl_Button*, void*) {
  fillholes2_show(8);
}
void MeshToolsUI::cb_FH_08(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_08_i(o,v);
}

void MeshToolsUI::cb_FH_09_i(Fl_Button*, void*) {
  fillholes2_show(9);
}
void MeshToolsUI::cb_FH_09(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_09_i(o,v);
}

void MeshToolsUI::cb_FH_10_i(Fl_Button*, void*) {
  fillholes2_show(10);
}
void MeshToolsUI::cb_FH_10(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_10_i(o,v);
}

void MeshToolsUI::cb_FH_11_i(Fl_Button*, void*) {
  fillholes2_show(11);
}
void MeshToolsUI::cb_FH_11(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_11_i(o,v);
}

void MeshToolsUI::cb_FH_12_i(Fl_Button*, void*) {
  fillholes2_show(12);
}
void MeshToolsUI::cb_FH_12(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_12_i(o,v);
}

void MeshToolsUI::cb_FH_13_i(Fl_Button*, void*) {
  fillholes2_show(13);
}
void MeshToolsUI::cb_FH_13(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_13_i(o,v);
}

void MeshToolsUI::cb_FH_14_i(Fl_Button*, void*) {
  fillholes2_show(14);
}
void MeshToolsUI::cb_FH_14(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_14_i(o,v);
}

void MeshToolsUI::cb_FH_15_i(Fl_Button*, void*) {
  fillholes2_show(15);
}
void MeshToolsUI::cb_FH_15(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_15_i(o,v);
}

void MeshToolsUI::cb_FH_16_i(Fl_Button*, void*) {
  fillholes2_show(16);
}
void MeshToolsUI::cb_FH_16(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_16_i(o,v);
}

void MeshToolsUI::cb_FH_17_i(Fl_Button*, void*) {
  fillholes2_show(17);
}
void MeshToolsUI::cb_FH_17(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_17_i(o,v);
}

void MeshToolsUI::cb_FH_18_i(Fl_Button*, void*) {
  fillholes2_show(18);
}
void MeshToolsUI::cb_FH_18(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_18_i(o,v);
}

void MeshToolsUI::cb_FH_19_i(Fl_Button*, void*) {
  fillholes2_show(19);
}
void MeshToolsUI::cb_FH_19(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_19_i(o,v);
}

void MeshToolsUI::cb_FH_20_i(Fl_Button*, void*) {
  fillholes2_show(20);
}
void MeshToolsUI::cb_FH_20(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_20_i(o,v);
}

void MeshToolsUI::cb_FH_21_i(Fl_Button*, void*) {
  fillholes2_show(21);
}
void MeshToolsUI::cb_FH_21(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_21_i(o,v);
}

void MeshToolsUI::cb_FH_22_i(Fl_Button*, void*) {
  fillholes2_show(22);
}
void MeshToolsUI::cb_FH_22(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_22_i(o,v);
}

void MeshToolsUI::cb_FH_23_i(Fl_Button*, void*) {
  fillholes2_show(23);
}
void MeshToolsUI::cb_FH_23(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_23_i(o,v);
}

void MeshToolsUI::cb_FH_24_i(Fl_Button*, void*) {
  fillholes2_show(24);
}
void MeshToolsUI::cb_FH_24(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_24_i(o,v);
}

void MeshToolsUI::cb_FH_00_i(Fl_Button*, void*) {
  //MT->Fill_Holes(1);
fillholes2_show(0);
//MT->redraw();
}
void MeshToolsUI::cb_FH_00(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_FH_00_i(o,v);
}

void MeshToolsUI::cb_Ok_merge_i(Fl_Button*, void*) {
  MT->Merge_Tags(merge_source->value(), 
merge_target->value());
MT->redraw();
//sc_hide();
}
void MeshToolsUI::cb_Ok_merge(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_merge_i(o,v);
}

void MeshToolsUI::cb_Cancel_merge_tags_i(Fl_Button*, void*) {
  mergetags_hide();
}
void MeshToolsUI::cb_Cancel_merge_tags(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_merge_tags_i(o,v);
}

void MeshToolsUI::cb_Ok_extractregion_i(Fl_Button*, void*) {
  MT->Mesh_Extract_Tag(Tag_value->value());
MT->redraw();
extractregion_hide();
}
void MeshToolsUI::cb_Ok_extractregion(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_extractregion_i(o,v);
}

void MeshToolsUI::cb_Cancel_extract_region_i(Fl_Button*, void*) {
  extractregion_hide();
}
void MeshToolsUI::cb_Cancel_extract_region(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_extract_region_i(o,v);
}

void MeshToolsUI::cb_Ok_extractrange_i(Fl_Button*, void*) {
  if (ex_tags->value()==1)
{
	MT->Set_Active_Scalar(-1);
}
else
{
	MT->Set_Active_Scalar(
	sc_active2->value());
}

MT->Mesh_Extract_Scalar_Range (Range_min->value(), Range_max->value());
MT->redraw();
extractrange_hide();
}
void MeshToolsUI::cb_Ok_extractrange(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_extractrange_i(o,v);
}

void MeshToolsUI::cb_Cancel_extract_scalar_range_i(Fl_Button*, void*) {
  extractrange_hide();
}
void MeshToolsUI::cb_Cancel_extract_scalar_range(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_extract_scalar_range_i(o,v);
}

void MeshToolsUI::cb_Ok_decomposition_i(Fl_Button*, void*) {
  MT->Mesh_Decompose(Decompose_min_region_size->value(), decomposeWindow);
MT->redraw();
decompose_hide();
}
void MeshToolsUI::cb_Ok_decomposition(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_decomposition_i(o,v);
}

void MeshToolsUI::cb_Cancel_connectivity_decompose_i(Fl_Button*, void*) {
  decompose_hide();
}
void MeshToolsUI::cb_Cancel_connectivity_decompose(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_connectivity_decompose_i(o,v);
}

void MeshToolsUI::cb_Ok_extractallregions_i(Fl_Button*, void*) {
  MT->Mesh_Decompose_Tag
(Tag_decompose_min_region_size->value(), extractallregionsWindow);
MT->redraw();
extractallregions_hide();
}
void MeshToolsUI::cb_Ok_extractallregions(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_extractallregions_i(o,v);
}

void MeshToolsUI::cb_Cancel_extractalltaggedregions_i(Fl_Button*, void*) {
  extractallregions_hide();
}
void MeshToolsUI::cb_Cancel_extractalltaggedregions(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_extractalltaggedregions_i(o,v);
}

void MeshToolsUI::cb_Ok_deleteregion_i(Fl_Button*, void*) {
  MT->Mesh_Delete_Tag(Tag_value_delete->value());
MT->redraw();
deleteregion_hide();
}
void MeshToolsUI::cb_Ok_deleteregion(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_deleteregion_i(o,v);
}

void MeshToolsUI::cb_Cancel_deleteregion_i(Fl_Button*, void*) {
  deleteregion_hide();
}
void MeshToolsUI::cb_Cancel_deleteregion(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_deleteregion_i(o,v);
}

void MeshToolsUI::cb_Refresh_flag_i(Fl_Button*, void*) {
  flag_update();
}
void MeshToolsUI::cb_Refresh_flag(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Refresh_flag_i(o,v);
}

void MeshToolsUI::cb_Cancel_flag_i(Fl_Button*, void*) {
  flag_hide();
}
void MeshToolsUI::cb_Cancel_flag(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_flag_i(o,v);
}

void MeshToolsUI::cb_Flag_Colour_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
MT->set_flag_colour(r,g,b);
MT->redraw();
}
void MeshToolsUI::cb_Flag_Colour(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Flag_Colour_i(o,v);
}

void MeshToolsUI::cb_Ok_flag_i(Fl_Button*, void*) {
  int ok;

std::string label;
label = Flag_Label->value();

MT->set_flag(label, Flag_Length->value());
MT->redraw();
}
void MeshToolsUI::cb_Ok_flag(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_flag_i(o,v);
}

void MeshToolsUI::cb_Ok_th2_i(Fl_Button*, void*) {
  MT->Set_Active_Scalar(5);
MT->SC_calc_thickness_between_objects(
Thickness_Max_Distance2->value(), 
th_source->value(),
th_target->value(),
thicknessWindow2);
thickness2_hide();
MT->Update_RGB();
MT->redraw();
}
void MeshToolsUI::cb_Ok_th2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_th2_i(o,v);
}

void MeshToolsUI::cb_Cancel_th2_i(Fl_Button*, void*) {
  thickness2_hide();
}
void MeshToolsUI::cb_Cancel_th2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_th2_i(o,v);
}

void MeshToolsUI::cb_Ok_fillholes_i(Fl_Button*, void*) {
  MT->Mesh_Fill_Holes(HOLES_size->value());
fillholes_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_fillholes(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_fillholes_i(o,v);
}

void MeshToolsUI::cb_Cancel_fillholes_i(Fl_Button*, void*) {
  fillholes_hide();
}
void MeshToolsUI::cb_Cancel_fillholes(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_fillholes_i(o,v);
}

void MeshToolsUI::cb_Ok_fillholes2_i(Fl_Button*, void*) {
  MT->Fill_Holes(HOLES2_tagid->value(),HOLES2_size->value(),
fillholesWindow2
);
fillholes2_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_fillholes2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_fillholes2_i(o,v);
}

void MeshToolsUI::cb_Cancel_fillholes2_i(Fl_Button*, void*) {
  fillholes2_hide();
}
void MeshToolsUI::cb_Cancel_fillholes2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_fillholes2_i(o,v);
}

void MeshToolsUI::cb_Ok_densify_i(Fl_Button*, void*) {
  MT->Mesh_Densify(DENSIFY_factor->value());
densify_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_densify(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_densify_i(o,v);
}

void MeshToolsUI::cb_Cancel_densify_i(Fl_Button*, void*) {
  densify_hide();
}
void MeshToolsUI::cb_Cancel_densify(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_densify_i(o,v);
}

void MeshToolsUI::cb_Ok_name_i(Fl_Button*, void*) {
  int ok;

std::string label;
label = Name_Label->value();
MT->set_name(label,0);
MT->redraw();
//name_hide();
}
void MeshToolsUI::cb_Ok_name(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_name_i(o,v);
}

void MeshToolsUI::cb_Ok_name2_i(Fl_Button*, void*) {
  int ok;

std::string label;
label = Name_Label->value();

MT->set_name(label,1);
MT->redraw();
//name_hide();
}
void MeshToolsUI::cb_Ok_name2(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_name2_i(o,v);
}

void MeshToolsUI::cb_Cancel_name_i(Fl_Button*, void*) {
  name_hide();
}
void MeshToolsUI::cb_Cancel_name(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_name_i(o,v);
}

void MeshToolsUI::cb_Refresh_name_i(Fl_Button*, void*) {
  float m1[16];
float m2[16];
std::string label ="Name";
label = MT->get_matrix(m1,m2);
Name_Label->value(label.c_str());//name_hide();
}
void MeshToolsUI::cb_Refresh_name(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Refresh_name_i(o,v);
}

void MeshToolsUI::cb_Ok_all_flag_i(Fl_Button*, void*) {
  Fl_Color c = FL_GRAY;
c = All_Flag_Colour->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
MT->set_all_flag(r, g, b, All_Flag_Length->value());
MT->redraw();
}
void MeshToolsUI::cb_Ok_all_flag(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_all_flag_i(o,v);
}

void MeshToolsUI::cb_Cancel_all_flag_i(Fl_Button*, void*) {
  all_flag_hide();
}
void MeshToolsUI::cb_Cancel_all_flag(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_all_flag_i(o,v);
}

void MeshToolsUI::cb_All_Flag_Colour_i(Fl_Button* o, void*) {
  Fl_Color c = o->color();
uchar r,g,b;
Fl::get_color(c,r,g,b);
if(!fl_color_chooser("New color:",r,g,b)) return;
c = fl_rgb_color(r,g,b);
o->color(c);
o->redraw();
//MT->set_flag_colour(r,g,b, );
//MT->redraw();
}
void MeshToolsUI::cb_All_Flag_Colour(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_All_Flag_Colour_i(o,v);
}

void MeshToolsUI::cb_Check_browser_i(Fl_Check_Browser*, void*) {
  view_hide_ok();
}
void MeshToolsUI::cb_Check_browser(Fl_Check_Browser* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Check_browser_i(o,v);
}

void MeshToolsUI::cb_Ok_view_hide_i(Fl_Button*, void*) {
  view_hide_ok();
view_hide_hide();
MT->redraw();
}
void MeshToolsUI::cb_Ok_view_hide(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_view_hide_i(o,v);
}

void MeshToolsUI::cb_Refresh_view_hide_i(Fl_Button*, void*) {
  view_hide_refresh();
}
void MeshToolsUI::cb_Refresh_view_hide(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Refresh_view_hide_i(o,v);
}

void MeshToolsUI::cb_Check_none_view_hide_i(Fl_Button*, void*) {
  Check_browser->check_none();
view_hide_ok();
}
void MeshToolsUI::cb_Check_none_view_hide(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Check_none_view_hide_i(o,v);
}

void MeshToolsUI::cb_Check_all_view_hide_i(Fl_Button*, void*) {
  Check_browser->check_all();
view_hide_ok();
}
void MeshToolsUI::cb_Check_all_view_hide(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Check_all_view_hide_i(o,v);
}

void MeshToolsUI::cb_Ok_rgb_to_tags_i(Fl_Button*, void*) {
  MT->Convert_RGB_To_Tags(
rgb_exact->value()
);

MT->redraw();
tags_convert_hide();
}
void MeshToolsUI::cb_Ok_rgb_to_tags(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_rgb_to_tags_i(o,v);
}

void MeshToolsUI::cb_Ok_orientation_i(Fl_Button*, void*) {
  std::string z1,z2,y1,y2,x1,x2;
z1 = z_plus_l->value();
z2 = z_minus_l->value();
y1 = y_plus_l->value();
y2 = y_minus_l->value();
x1 = x_plus_l->value();
x2 = x_minus_l->value();


MT->set_orientation_labels(z1,z2,y1,y2,x1,x2);
MT->save_ini_param();
MT->redraw();
//name_hide();
}
void MeshToolsUI::cb_Ok_orientation(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_orientation_i(o,v);
}

void MeshToolsUI::cb_Cancel_orientation_i(Fl_Button*, void*) {
  orientation_hide();
}
void MeshToolsUI::cb_Cancel_orientation(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_orientation_i(o,v);
}

void MeshToolsUI::cb_Ok_lmkselect_i(Fl_Button*, void*) {
  int lmk_type;
lmk_type=0;

if (SELECT_LMK2->value() == 1){lmk_type = 1;}

MT->Select_Landmark(lmk_type, LandmarkId->value());
MT->redraw();
}
void MeshToolsUI::cb_Ok_lmkselect(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_lmkselect_i(o,v);
}

void MeshToolsUI::cb_Cancel_lmkselect_i(Fl_Button*, void*) {
  lmkselect_hide();
}
void MeshToolsUI::cb_Cancel_lmkselect(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_lmkselect_i(o,v);
}

void MeshToolsUI::cb_Ok_lmkrangeselect_i(Fl_Button*, void*) {
  int lmk_type;
lmk_type=0;

if (SELECTRANGE_LMK2->value() == 1){lmk_type = 1;}

MT->Select_Landmark_Range(lmk_type, rangestart->value(),rangeend->value());
MT->redraw();
}
void MeshToolsUI::cb_Ok_lmkrangeselect(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Ok_lmkrangeselect_i(o,v);
}

void MeshToolsUI::cb_Cancel_lmkrangeselect_i(Fl_Button*, void*) {
  lmkrangeselect_hide();
}
void MeshToolsUI::cb_Cancel_lmkrangeselect(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_Cancel_lmkrangeselect_i(o,v);
}

void MeshToolsUI::cb_draw_i(Fl_Button*, void*) {
  vtkSmartPointer<vtkFloatArray> tabDisplay =
 vtkSmartPointer<vtkFloatArray>::New();
tabDisplay->SetNumberOfComponents(1);
tabDisplay->SetNumberOfTuples(4);
tabDisplay->SetTuple1(0,display_landmark->value());// booleen pour les landmarks
tabDisplay->SetTuple1(1,display_vertice->value());// booleen pour les vertices
if(display_val_dec_vertice->value()!=0){ // le diviseur du nombre de correspondance
	tabDisplay->SetTuple1(2,display_val_dec_vertice->value());
}else{
	tabDisplay->SetTuple1(2,1);
}
if(line_width->value()<=0){
	fl_alert("Error:The width of matching lines must be >0");
	line_width->value(1);
}
tabDisplay->SetTuple1(3,line_width->value());



cout<<(int)display_landmark->value()<<"  "<<(int)display_vertice->value()<<" "<<display_val_dec_vertice->value()<<endl;
MT->SetDisplayMatching(tabDisplay);

MT->redraw();
}
void MeshToolsUI::cb_draw(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_draw_i(o,v);
}

void MeshToolsUI::cb_display_vertice_i(Fl_Check_Button*, void*) {
  if(display_vertice->value()==1){
	display_val_dec_vertice->activate();
	display_val_result_vertice->activate();
	textmatchings->activate();
	vertice_color->activate();
	save_vertice->activate();
	ok_vertice->activate();
	line_width->activate();
}else{
	display_val_dec_vertice->deactivate();
	display_val_result_vertice->deactivate();
	textmatchings->deactivate();
	vertice_color->deactivate();
	save_vertice->deactivate();
	ok_vertice->deactivate();
	line_width->deactivate();
};
}
void MeshToolsUI::cb_display_vertice(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_display_vertice_i(o,v);
}

void MeshToolsUI::cb_vertice_color_i(Fl_Button* o, void*) {
  if(MT->bool_ICP==true){
	Fl_Color c = FL_GRAY;
	uchar r,g,b;
	Fl::get_color(c,r,g,b);
	if(!fl_color_chooser("New color:",r,g,b)) return;
	c = fl_rgb_color(r,g,b);
	cout<<r<<"  "<<g<<"  "<<b<<endl;
	//o->color(c);
	//o->redraw();
	float vect_color[3]={r,g,b};
	vect_color[0]/=255;
	vect_color[1]/=255;
	vect_color[2]/=255;
	cout<<"ici"<<endl;
	MT->SetVerticeColor(vect_color);
	cout<<"ererere"<<endl;
	//MT->set_tag_color(0,r,g,b);
	MT->redraw();
};
}
void MeshToolsUI::cb_vertice_color(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_vertice_color_i(o,v);
}

void MeshToolsUI::cb_display_val_dec_vertice_i(Fl_Value_Input*, void*) {
  int val=display_val_dec_vertice->value();// fait le calcule
int result = 0;
int numberPt = 0;

if(MT->bool_ICP==true){
    numberPt=MT->registration->numberOfLandmarks_Source;
     display_val_result_vertice->value(numberPt);
     // if(choose_numberLandmarksPoints->value()==1){
    	//if(val_dec->value()==MT->registration->dec )
    //		 numberPt=val_result->value();
    //	else{
    //		choose_numberLandmarksPoints->value(0);
    //		textpoints->deactivate();
//	val_result->deactivate();
//	val_dec->deactivate();

  //  		fl_alert("attention:: choosen value for the source vertice is different of\nthe value for the ICP.");
    //	}
     //}
  
}


if(val>0)
	result = numberPt / val + 1;
else
	result=0;

display_val_result_vertice->value(result);
}
void MeshToolsUI::cb_display_val_dec_vertice(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_display_val_dec_vertice_i(o,v);
}

void MeshToolsUI::cb_display_val_result_vertice_i(Fl_Value_Output*, void*) {
  int val=display_val_dec_vertice->value();// fait le calcule
int result = 0;
int numberPt = 0;

if(MT->bool_ICP==true){
    numberPt=MT->registration->numberOfLandmarks_Source;
     display_val_result_vertice->value(numberPt);
      /*if(choose_numberLandmarksPoints->value()==1){
    	if(val_dec->value()==MT->registration->dec )
    		 numberPt=val_result->value();
    	else{
    		choose_numberLandmarksPoints->value(0);
    		textpoints->deactivate();
	val_result->deactivate();
	val_dec->deactivate();

    		fl_alert("attention:: choosen value for the source vertice is different of\nthe value for the ICP.");
    	}
     }*/
  
}


if(val>0)
	result = numberPt / val + 1;
else
	result=0;

display_val_result_vertice->value(result);
}
void MeshToolsUI::cb_display_val_result_vertice(Fl_Value_Output* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_display_val_result_vertice_i(o,v);
}

void MeshToolsUI::cb_ok_vertice_i(Fl_Button*, void*) {
  vtkSmartPointer<vtkFloatArray> tabDisplay =
 vtkSmartPointer<vtkFloatArray>::New();
tabDisplay->SetNumberOfComponents(1);
tabDisplay->SetNumberOfTuples(3);
tabDisplay->SetTuple1(0,display_landmark->value());
tabDisplay->SetTuple1(1,display_vertice->value());
if(display_val_dec_vertice->value()!=0){
	tabDisplay->SetTuple1(2,display_val_dec_vertice->value());
}else{
	tabDisplay->SetTuple1(2,1);
}
tabDisplay->SetTuple1(3,1);
cout<<(int)display_landmark->value()<<"  "<<(int)display_vertice->value()<<" "<<display_val_dec_vertice->value()<<endl;
MT->SetDisplayMatching(tabDisplay);
}
void MeshToolsUI::cb_ok_vertice(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ok_vertice_i(o,v);
}

void MeshToolsUI::cb_save_vertice_i(Fl_Button*, void*) {
  MT->Save_STV_File();
}
void MeshToolsUI::cb_save_vertice(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_save_vertice_i(o,v);
}

void MeshToolsUI::cb_save_origin_source_vertice_i(Fl_Button*, void*) {
  MT->Save_original_source_verticeICP();
}
void MeshToolsUI::cb_save_origin_source_vertice(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_save_origin_source_vertice_i(o,v);
}

void MeshToolsUI::cb_errors_curve_i(Fl_Button*, void*) {
  errors_curv_ICP_show();
}
void MeshToolsUI::cb_errors_curve(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_errors_curve_i(o,v);
}

void MeshToolsUI::cb_color_ICP_i(Fl_Check_Button*, void*) {
  if(MT->bool_ICP ){
	if(color_ICP->value()==1){
		Distance_threshold->activate();
		MT->registration->Draw_looking_like(Distance_threshold->value());
	}
	else{
		Distance_threshold->deactivate();
		MT->registration->Source->selected=1;
	}
	MT->redraw();
};
}
void MeshToolsUI::cb_color_ICP(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_color_ICP_i(o,v);
}

void MeshToolsUI::cb_Ok_ICP_i(Fl_Button*, void*) {
  /// TABOFWEIGHTS ----------------------------
float val_weighted_normal = -1.f;
float val_weighted_curvature = -1.f;
float val_weighted_color = -1.f;
float val_weighted_landmark = -1.f;
float val_dec_choosen = -1.f;
int problem =0;

vtkSmartPointer<vtkFloatArray> tab_loadsave_parameter =
 vtkSmartPointer<vtkFloatArray>::New();
tab_loadsave_parameter->SetNumberOfComponents(1);
tab_loadsave_parameter->SetNumberOfTuples(2);


vtkSmartPointer<vtkFloatArray> tabOfParameters =
 vtkSmartPointer<vtkFloatArray>::New();
tabOfParameters->SetNumberOfComponents(1);
tabOfParameters->SetNumberOfTuples(10);
// récupération des données
// POIDS DE LA NORMALE
if(weighted_normal->value()==0){
	val_weighted_normal=-1;
}else{
	val_weighted_normal=weighted_normal->value();
}
tabOfParameters->SetTuple1(0,val_weighted_normal);

//----------------------

// POIDS DE LA COURBURE
if(curv_data -> value() == 1){
	val_weighted_curvature = weighted_curvature->value();
	if(val_weighted_curvature==0){
		val_weighted_curvature=-1;	
	}
}
else{
	percentageCurv->value(0);
	val_weighted_curvature = -1.f;
}
tabOfParameters->SetTuple1(1,val_weighted_curvature);
tabOfParameters->SetTuple1(9,percentageCurv->value());// pourcentage pour nettoyer les valeur des courbes 
//----------------

/// POIDS DE LA COULEUR
if (color_data -> value()==1){
cout<<"ici color"<<endl;
	val_weighted_color = weighted_color->value();
		if(val_weighted_color==0){
		val_weighted_color=-1;	
	}
}
else{
	val_weighted_color = -1.f;
}
tabOfParameters->SetTuple1(2,val_weighted_color);
//-----------------

// POIDS DES LANDMARKS
if(add_landmarks -> value() == 1){
cout<<"ici landmarks"<<endl;
	val_weighted_landmark = weighted_landmark->value();
		if(val_weighted_landmark==0){
		val_weighted_landmark=-1;	
	}
}
else{
	val_weighted_landmark = -1.f;
}
tabOfParameters->SetTuple1(3,val_weighted_landmark);
///----------------------------

/// DECIMALE DU NOMBRE DE SOMMET CHOISI
if(choose_numberLandmarksPoints->value() ==1){
	val_dec_choosen = val_dec->value();
	if (val_dec_choosen == 0)
	{
		fl_alert("ERROR :: choosen number ==0 ");
		problem++;
	}
}else
	val_dec_choosen = -1.f;
tabOfParameters->SetTuple1(4,val_dec_choosen);
///--------------------------------------------

// POURCENTAGE DU RAYON POUR LE FILTRE SUR LES DISTANCES DES CORRESPONDANCES
tabOfParameters->SetTuple1(5,percentageOfRadius->value());
//-------------------------------

/// ERRORS THRESHOLD----------
if(ite_max->value()<=0){
	fl_alert("Error:the maximum number of iteration must be >0");
	ite_max->value(20);
	problem++;
}
tabOfParameters->SetTuple1(6,ite_max->value());

if(threshold_InPercentage->value()<=0){
	fl_alert("Error:the threshold od errors distances must be >0 %.");
	threshold_InPercentage->value(5);
	problem++;
}
tabOfParameters->SetTuple1(7,(threshold_InPercentage->value()/100.));
//----------------------

// PARAMETER------ Attention il doivent etre en dernier pour etre identique au fichier des paramètres
//stocker les parametres
tab_loadsave_parameter->SetTuple1(0,store_parameter->value());
//appliquer les parametres chargés
tab_loadsave_parameter->SetTuple1(1,load_parameter->value());
///---------------------------

/// RADIUS OF SPHERE--------------
if(loc_affine->value()==1 || step_by_step->value()==1 ){
	if(radiusLA->value()<=0){
		fl_alert("ERROR: the radius of sphere must be >0");
		radiusLA->value(5);
		problem++;
	}
	tabOfParameters->SetTuple1(8,radiusLA->value());
}else{
	tabOfParameters->SetTuple1(8,-1);
}
//-------------

///   TABDISPLAY  --------------------------
vtkSmartPointer<vtkFloatArray> tabDisplay =
 vtkSmartPointer<vtkFloatArray>::New();
tabDisplay->SetNumberOfComponents(1);
tabDisplay->SetNumberOfTuples(4);

tabDisplay->SetTuple1(0,display_landmark->value());
tabDisplay->SetTuple1(1,display_vertice->value());

if(display_val_dec_vertice->value()>0){
	tabDisplay->SetTuple1(2,display_val_dec_vertice->value());
}else{
	tabDisplay->SetTuple1(2,1);
}
if(line_width->value()<=0){
	fl_alert("Error:The width of matching lines must be >0");
	line_width->value(1);
}
tabDisplay->SetTuple1(3,line_width->value());
///-----------------------------------------

/// MODE TRANSFORMATION --------------
int modeTransformation=-2;
if( rigid->value()==1)
	modeTransformation =VTK_LANDMARK_RIGIDBODY;
else if( similitude ->value() == 1)
	modeTransformation =VTK_LANDMARK_SIMILARITY;
else if( affine->value() == 1)
	modeTransformation = VTK_LANDMARK_AFFINE;
else if(loc_affine->value()==1)
	modeTransformation = 20;
else{
	modeTransformation=-2;
}
//----------------------------------------

//---- DEBUT ICP----
if(problem==0){// si aucun probleme alors on fait icp
if(MT->bool_ICP == false){
	// test
	cout<<"\t\t\t---CREATION de ICP---"<<endl;
	// target et source sont des entiers
	MT->Registration(icp_source_name->value(),icp_target_name->value(),
	tabOfParameters,tab_loadsave_parameter,tabDisplay,modeTransformation,Only_Matching->value()); 
}
else{
	// set data 
	cout<<"\t\t\t---UPDATE (interface)---"<<endl;
	MT->SetDataICP(tabOfParameters,tab_loadsave_parameter,modeTransformation,tabDisplay,Only_Matching->value());
}
}
load_parameter->value(0);// on met false car une fois fait pour une icp alors on a plus besoin.
// sinon on ne pourra pas prendre en compte sur les nouveaux parametres de l'interface par la suite.

MT->redraw();
cout<<"FINI"<<endl;
}
void MeshToolsUI::cb_Ok_ICP(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Ok_ICP_i(o,v);
}

void MeshToolsUI::cb_Cancel_ICP_i(Fl_Button*, void*) {
  registration_ICP_hide();
}
void MeshToolsUI::cb_Cancel_ICP(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_Cancel_ICP_i(o,v);
}

void MeshToolsUI::cb_color_data_i(Fl_Check_Button*, void*) {
  if(color_data->value()==1)
	weighted_color->activate();
else
	weighted_color->deactivate();
}
void MeshToolsUI::cb_color_data(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_color_data_i(o,v);
}

void MeshToolsUI::cb_curv_data_i(Fl_Check_Button*, void*) {
  if(curv_data->value()==1){
	weighted_curvature->activate();
	percentageCurv->activate();
}else{
	weighted_curvature->deactivate();
	percentageCurv->deactivate();
};
}
void MeshToolsUI::cb_curv_data(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_curv_data_i(o,v);
}

void MeshToolsUI::cb_weighted_color_i(Fl_Value_Slider*, void*) {
  /*int nb=weighted_landmark->value();
if(nb!=0){
	if((weighted_curvature->value() > 1 && weighted_curvature->value() < 2 )
	|| (weighted_color->value() > 1 && weighted_color->value() < 2)){
		weighted_landmark->minimum(2);
	}
	else if(weighted_curvature->value() == 2 || weighted_color->value() == 2){
		weighted_landmark->minimum(3);
	}
	else{
		weighted_landmark->minimum(1);
	}
	if(nb<weighted_landmark->minimum())
		nb =weighted_landmark->minimum();
	weighted_landmark->value(nb);
}*/;
}
void MeshToolsUI::cb_weighted_color(Fl_Value_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_weighted_color_i(o,v);
}

void MeshToolsUI::cb_weighted_curvature_i(Fl_Value_Slider*, void*) {
  /*int nb=weighted_landmark->value();
if(nb!=0){
	if((weighted_curvature->value() > 1 && weighted_curvature->value() < 2 )
	|| (weighted_color->value() > 1 && weighted_color->value() < 2)){
		weighted_landmark->minimum(2);
	}
	else if(weighted_curvature->value() == 2 || weighted_color->value() == 2){
		weighted_landmark->minimum(3);
	}
	else{
		weighted_landmark->minimum(1);
	}
	if(nb<weighted_landmark->minimum())
		nb =weighted_landmark->minimum();
	weighted_landmark->value(nb);
}*/;
}
void MeshToolsUI::cb_weighted_curvature(Fl_Value_Slider* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_weighted_curvature_i(o,v);
}

void MeshToolsUI::cb_reinit_s_t_list_i(Fl_Button*, void*) {
  registration_ICP_show();
}
void MeshToolsUI::cb_reinit_s_t_list(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_reinit_s_t_list_i(o,v);
}

void MeshToolsUI::cb_rigid_i(Fl_Check_Button*, void*) {
  if(rigid->value()==1){
	similitude->value(0);
	affine->value(0);
	loc_affine->value(0);
	step_by_step->value(0);
	radiusLA->deactivate();	
}
else if(rigid->value()==0 && 
	similitude->value()==0 &&
	affine->value()==0 &&
	loc_affine->value()==0 &&
	step_by_step->value()==0){
		step_by_step->value(1);
		radiusLA->activate();	
	};
}
void MeshToolsUI::cb_rigid(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_rigid_i(o,v);
}

void MeshToolsUI::cb_similitude_i(Fl_Check_Button*, void*) {
  if(similitude->value()==1){
	rigid->value(0);
	affine->value(0);
	loc_affine->value(0);
	step_by_step->value(0);
	radiusLA->deactivate();	
}else if(rigid->value()==0 && 
	similitude->value()==0 &&
	affine->value()==0 &&
	loc_affine->value()==0 &&
	step_by_step->value()==0){
		step_by_step->value(1);
		radiusLA->activate();	
	};
}
void MeshToolsUI::cb_similitude(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_similitude_i(o,v);
}

void MeshToolsUI::cb_affine_i(Fl_Check_Button*, void*) {
  if(affine->value()==1){
	rigid->value(0);
	similitude->value(0);
	loc_affine->value(0);
	step_by_step->value(0);
	radiusLA->deactivate();	
}else if(rigid->value()==0 && 
	similitude->value()==0 &&
	affine->value()==0 &&
	loc_affine->value()==0 &&
	step_by_step->value()==0){
		step_by_step->value(1);
		radiusLA->activate();	
	};
}
void MeshToolsUI::cb_affine(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_affine_i(o,v);
}

void MeshToolsUI::cb_loc_affine_i(Fl_Check_Button*, void*) {
  if(loc_affine->value()==1){
	rigid->value(0);
	similitude->value(0);
	affine->value(0);
	step_by_step->value(0);
	radiusLA->activate();	
	
}else if(loc_affine->value()==0)
{
	radiusLA->deactivate();	
}

if(rigid->value()==0 && 
	similitude->value()==0 &&
	affine->value()==0 &&
	loc_affine->value()==0 &&
	step_by_step->value()==0){
		
		step_by_step->value(1);
		radiusLA->activate();	
	};
}
void MeshToolsUI::cb_loc_affine(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_loc_affine_i(o,v);
}

void MeshToolsUI::cb_step_by_step_i(Fl_Check_Button*, void*) {
  if(step_by_step->value()==1){
	rigid->value(0);
	similitude->value(0);
	affine->value(0);
	loc_affine->value(0);
	radiusLA->activate();	
}else if(rigid->value()==0 && 
	similitude->value()==0 &&
	affine->value()==0 &&
	loc_affine->value()==0 &&
	step_by_step->value()==0){
		step_by_step->value(1);
		radiusLA->activate();	
	};
}
void MeshToolsUI::cb_step_by_step(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_step_by_step_i(o,v);
}

void MeshToolsUI::cb_add_landmarks_i(Fl_Check_Button*, void*) {
  if(add_landmarks->value()==1)
	weighted_landmark->activate();
else
	weighted_landmark->deactivate();
}
void MeshToolsUI::cb_add_landmarks(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_add_landmarks_i(o,v);
}

void MeshToolsUI::cb_choose_numberLandmarksPoints_i(Fl_Check_Button*, void*) {
  if(choose_numberLandmarksPoints->value()==1){
	textpoints->activate();
	val_result->activate();
	val_dec->activate();
}
else{
	textpoints->deactivate();
	val_result->deactivate();
	val_dec->deactivate();
};
}
void MeshToolsUI::cb_choose_numberLandmarksPoints(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choose_numberLandmarksPoints_i(o,v);
}

void MeshToolsUI::cb_val_dec_i(Fl_Value_Input*, void*) {
  int val=val_dec->value();// fait le calcule
int result = 0;
int numberPt = 0;
if(MT->bool_ICP==false){
	int source = icp_source_name->value();

	if(source>=0){
		OBJECT_MESH *My_Source = MT->getContainer().Get_Selected_Mesh(source);
		numberPt=My_Source->GetNumberOfPoints();
		val_result->value(numberPt);
	}
}else{
	numberPt=MT->registration->Source->GetNumberOfPoints();
	val_result->value(numberPt);
}

if(val>0)
	result = numberPt / val;
else
	result=0;

val_result->value(result);
}
void MeshToolsUI::cb_val_dec(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_val_dec_i(o,v);
}

void MeshToolsUI::cb_val_result_i(Fl_Value_Output*, void*) {
  int val=val_dec->value();// fait le calcule
int result = 0;
int numberPt = 0;
if(MT->bool_ICP==false){
	int source = icp_source_name->value();

	if(source>=0){
		OBJECT_MESH *My_Source = MT->getContainer().Get_Selected_Mesh(source);
		numberPt=My_Source->GetNumberOfPoints();
		val_result->value(numberPt);
	}
}else{
	numberPt=MT->registration->Source->GetNumberOfPoints();
	val_result->value(numberPt);
}

if(val>0)
	result = numberPt / val;
else
	result=0;

val_result->value(result);
}
void MeshToolsUI::cb_val_result(Fl_Value_Output* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_val_result_i(o,v);
}

void MeshToolsUI::cb_save_parameters_i(Fl_Button*, void*) {
  if(MT->bool_ICP)
	MT->SaveParameter();
}
void MeshToolsUI::cb_save_parameters(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_save_parameters_i(o,v);
}

void MeshToolsUI::cb_store_parameter_i(Fl_Check_Button*, void*) {
  if(store_parameter->value()==1){
	save_parameters->activate();
}
else{
	save_parameters->deactivate();
};
}
void MeshToolsUI::cb_store_parameter(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_store_parameter_i(o,v);
}

void MeshToolsUI::cb_load_parameter_i(Fl_Light_Button*, void*) {
  // charge la liste dans paramater_list
if(load_parameter->value()==1){
	MT->Open_ICP_parameter();
	int sumOfActivedMode=0;
	if(MT->loaded_parameter_list !=NULL){
		for(int i=0;i<MT->loaded_parameter_list->GetNumberOfTuples();i++)
			sumOfActivedMode=MT->loaded_parameter_list->GetComponent(i,0);
		if(sumOfActivedMode==0){
			fl_alert("Error: There is not parameter for the transformation modes.");
			load_parameter->value(0);
		}
	}
	else{
		load_parameter->value(0);
	}	
};
}
void MeshToolsUI::cb_load_parameter(Fl_Light_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_load_parameter_i(o,v);
}

void MeshToolsUI::cb_radiusLA_i(Fl_Value_Input*, void*) {
  if(radiusLA->value()<0){
	radiusLA->value(5);
};
}
void MeshToolsUI::cb_radiusLA(Fl_Value_Input* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->parent()->user_data()))->cb_radiusLA_i(o,v);
}

void MeshToolsUI::cb_Only_Matching_i(Fl_Check_Button*, void*) {
  if(Only_Matching->value()==1){
add_landmarks->deactivate();
percentageOfRadius->deactivate();
parameters->deactivate();
transformation_mode->deactivate();
LA_transformation->deactivate();
error_threshold->deactivate();
color_data->deactivate();
textpercentRadius->deactivate();
}
else{
add_landmarks->activate();
percentageOfRadius->activate();
parameters->activate();
transformation_mode->activate();
LA_transformation->activate();
error_threshold->activate();
color_data->activate();
};
}
void MeshToolsUI::cb_Only_Matching(Fl_Check_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->parent()->user_data()))->cb_Only_Matching_i(o,v);
}

void MeshToolsUI::cb_save_errors_curve_i(Fl_Button*, void*) {
  if(MT->bool_ICP == true)
	MT->SaveErrors();
}
void MeshToolsUI::cb_save_errors_curve(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_save_errors_curve_i(o,v);
}

void MeshToolsUI::cb_OkNTWSave_i(Fl_Button*, void*) {
  int ori_mode;
int tag_mode;
int cur_mode;

ori_mode=0;
tag_mode=0;
cur_mode=0;
if (NTW_O_1->value() == 1){ori_mode = 1;}
if (NTW_T_1->value() == 1){tag_mode = 1;}
if (NTW_C_0->value() == 1){cur_mode = 1;}
MT->Save_NTW_File(ori_mode, tag_mode, cur_mode);
ntw_hide();
}
void MeshToolsUI::cb_OkNTWSave(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_OkNTWSave_i(o,v);
}

void MeshToolsUI::cb_CancelSaveNTW_i(Fl_Button*, void*) {
  ntw_hide();
}
void MeshToolsUI::cb_CancelSaveNTW(Fl_Button* o, void* v) {
  ((MeshToolsUI*)(o->parent()->user_data()))->cb_CancelSaveNTW_i(o,v);
}

MeshToolsUI::MeshToolsUI() {
  { mainWindow = new Fl_Double_Window(1000, 700, "Interactive SoftwarE : MeshTools");
    mainWindow->box(FL_UP_BOX);
    mainWindow->color((Fl_Color)55);
    mainWindow->labelsize(12);
    mainWindow->callback((Fl_Callback*)cb_mainWindow, (void*)(this));
    mainWindow->align(Fl_Align(FL_ALIGN_RIGHT));
    mainWindow->when(FL_WHEN_CHANGED);
    { Top = new Fl_Group(0, 0, 1002, 50);
      { Unresizable = new Fl_Group(0, 0, 949, 50);
        { Del = new Fl_Button(0, 25, 25, 23);
          Del->tooltip("Delete");
          Del->color((Fl_Color)55);
          Del->image(image_delete2);
          Del->callback((Fl_Callback*)cb_Del);
        } // Fl_Button* Del
        { File = new Fl_Menu_Button(0, 0, 55, 25, "File");
          File->color((Fl_Color)55);
          File->labelcolor(FL_GRAY0);
          File->menu(menu_File);
        } // Fl_Menu_Button* File
        { Viewing_options = new Fl_Menu_Button(55, 0, 100, 25, "Viewing opt.");
          Viewing_options->color((Fl_Color)55);
          Viewing_options->menu(menu_Viewing_options);
        } // Fl_Menu_Button* Viewing_options
        { Edit_obj = new Fl_Menu_Button(155, 0, 155, 25, "Edit selected surfaces");
          Edit_obj->color((Fl_Color)55);
          Edit_obj->menu(menu_Edit_obj);
        } // Fl_Menu_Button* Edit_obj
        { Landmarks = new Fl_Menu_Button(310, 0, 180, 25, "Landmarks");
          Landmarks->tooltip("Doing so, your curve will be closed");
          Landmarks->color((Fl_Color)55);
          Landmarks->menu(menu_Landmarks);
        } // Fl_Menu_Button* Landmarks
        { SC_options = new Fl_Menu_Button(490, 0, 90, 25, "Scalars");
          SC_options->tooltip("Compute attributes. These are values attributed to vertices which can subsequ\
ently be displayed as color maps (see viewing options to display color maps)");
          SC_options->color((Fl_Color)55);
          SC_options->menu(menu_SC_options);
        } // Fl_Menu_Button* SC_options
        { Tags_menu = new Fl_Menu_Button(580, 0, 60, 25, "Tags");
          Tags_menu->color((Fl_Color)55);
          Tags_menu->menu(menu_Tags_menu);
        } // Fl_Menu_Button* Tags_menu
        { Show = new Fl_Menu_Button(640, 0, 60, 25, "Show");
          Show->color((Fl_Color)55);
          Show->menu(menu_Show);
        } // Fl_Menu_Button* Show
        { About = new Fl_Menu_Button(700, 0, 35, 25, "?");
          About->color((Fl_Color)55);
          About->menu(menu_About);
        } // Fl_Menu_Button* About
        { Buttons = new Fl_Group(25, 25, 105, 23);
          { Move_mode = new Fl_Button(75, 25, 25, 23);
            Move_mode->tooltip("Move camera mode");
            Move_mode->down_box(FL_DOWN_BOX);
            Move_mode->value(1);
            Move_mode->color((Fl_Color)55);
            Move_mode->selection_color((Fl_Color)23);
            Move_mode->image(image_move);
            Move_mode->callback((Fl_Callback*)cb_Move_mode);
          } // Fl_Button* Move_mode
          { Camera_mode = new Fl_Button(50, 25, 25, 23);
            Camera_mode->tooltip("Move object mode");
            Camera_mode->color((Fl_Color)55);
            Camera_mode->image(image_Move_mode2);
            Camera_mode->callback((Fl_Callback*)cb_Camera_mode);
          } // Fl_Button* Camera_mode
          { Landmark_mode = new Fl_Button(25, 25, 25, 23);
            Landmark_mode->tooltip("Landmark mode (only landmarks can be selected, surfaces remain unselected)");
            Landmark_mode->color((Fl_Color)55);
            Landmark_mode->image(image_Landmarks2);
            Landmark_mode->callback((Fl_Callback*)cb_Landmark_mode);
          } // Fl_Button* Landmark_mode
          Buttons->end();
        } // Fl_Group* Buttons
        { Source_mode = new Fl_Button(100, 25, 25, 23);
          Source_mode->tooltip("\"Normal\" landmark mode");
          Source_mode->value(1);
          Source_mode->color((Fl_Color)55);
          Source_mode->image(image_Landmarks4);
          Source_mode->callback((Fl_Callback*)cb_Source_mode);
        } // Fl_Button* Source_mode
        { Target_mode = new Fl_Button(125, 25, 25, 23);
          Target_mode->tooltip("\"Target\" landmark mode");
          Target_mode->color((Fl_Color)55);
          Target_mode->image(image_Landmarks6);
          Target_mode->callback((Fl_Callback*)cb_Target_mode);
        } // Fl_Button* Target_mode
        { Flag_mode = new Fl_Button(150, 25, 25, 23);
          Flag_mode->tooltip("\"Flag\" landmark mode");
          Flag_mode->color((Fl_Color)55);
          Flag_mode->image(image_Flag01);
          Flag_mode->callback((Fl_Callback*)cb_Flag_mode);
        } // Fl_Button* Flag_mode
        { TRI_sort_0 = new Fl_Button(175, 25, 25, 23);
          TRI_sort_0->tooltip("Tansparency: sort all vertices once from back to front");
          TRI_sort_0->color((Fl_Color)55);
          TRI_sort_0->image(image_Sort_vertices01);
          TRI_sort_0->callback((Fl_Callback*)cb_TRI_sort_0);
        } // Fl_Button* TRI_sort_0
        { TRI_sort_1 = new Fl_Button(200, 25, 25, 23);
          TRI_sort_1->tooltip("Tansparency: sort all vertices once from front  to back");
          TRI_sort_1->color((Fl_Color)55);
          TRI_sort_1->image(image_Sort_vertices02);
          TRI_sort_1->callback((Fl_Callback*)cb_TRI_sort_1);
        } // Fl_Button* TRI_sort_1
        { Grid = new Fl_Button(225, 25, 25, 23);
          Grid->tooltip("Show/hide grid");
          Grid->color((Fl_Color)55);
          Grid->selection_color((Fl_Color)23);
          Grid->image(image_grid3);
          Grid->callback((Fl_Callback*)cb_Grid);
        } // Fl_Button* Grid
        { Bt_move_up = new Fl_Button(301, 25, 20, 12);
          Bt_move_up->tooltip("Object list : move object(s) up");
          Bt_move_up->color((Fl_Color)55);
          Bt_move_up->image(image_s_dessous_17);
          Bt_move_up->callback((Fl_Callback*)cb_Bt_move_up);
        } // Fl_Button* Bt_move_up
        { Bt_move_down = new Fl_Button(301, 37, 20, 11);
          Bt_move_down->tooltip("Object list : move object(s) down");
          Bt_move_down->color((Fl_Color)55);
          Bt_move_down->image(image_s_dessus_17);
          Bt_move_down->callback((Fl_Callback*)cb_Bt_move_down);
          Bt_move_down->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* Bt_move_down
        { Bt_light_right = new Fl_Button(321, 25, 25, 23);
          Bt_light_right->tooltip("Lightning : from right side");
          Bt_light_right->color((Fl_Color)55);
          Bt_light_right->image(image_s_right_17);
          Bt_light_right->callback((Fl_Callback*)cb_Bt_light_right);
          Bt_light_right->align(Fl_Align(FL_ALIGN_CLIP));
        } // Fl_Button* Bt_light_right
        { Bt_light_left = new Fl_Button(346, 25, 25, 23);
          Bt_light_left->tooltip("Lightning : from left side");
          Bt_light_left->color((Fl_Color)55);
          Bt_light_left->image(image_s_left_17);
          Bt_light_left->callback((Fl_Callback*)cb_Bt_light_left);
          Bt_light_left->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        } // Fl_Button* Bt_light_left
        { Bt_light_face = new Fl_Button(370, 25, 25, 23);
          Bt_light_face->tooltip("Lightning : from front side");
          Bt_light_face->color((Fl_Color)55);
          Bt_light_face->image(image_s_face_17);
          Bt_light_face->callback((Fl_Callback*)cb_Bt_light_face);
          Bt_light_face->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* Bt_light_face
        { Bt_light_back = new Fl_Button(395, 25, 25, 23);
          Bt_light_back->tooltip("Lightning : from backside");
          Bt_light_back->color((Fl_Color)55);
          Bt_light_back->image(image_s_back_18);
          Bt_light_back->callback((Fl_Callback*)cb_Bt_light_back);
          Bt_light_back->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* Bt_light_back
        { Bt_light_above = new Fl_Button(420, 25, 25, 23);
          Bt_light_above->tooltip("Lightning : from above");
          Bt_light_above->color((Fl_Color)55);
          Bt_light_above->image(image_s_dessus_18);
          Bt_light_above->callback((Fl_Callback*)cb_Bt_light_above);
          Bt_light_above->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* Bt_light_above
        { Bt_light_below = new Fl_Button(445, 25, 25, 23);
          Bt_light_below->tooltip("Lightning: from below");
          Bt_light_below->color((Fl_Color)55);
          Bt_light_below->image(image_s_dessous_18);
          Bt_light_below->callback((Fl_Callback*)cb_Bt_light_below);
        } // Fl_Button* Bt_light_below
        { Bt_pos_left = new Fl_Button(494, 25, 25, 23);
          Bt_pos_left->tooltip("Move camera : view object from left side");
          Bt_pos_left->color((Fl_Color)55);
          Bt_pos_left->image(image_left2);
          Bt_pos_left->callback((Fl_Callback*)cb_Bt_pos_left);
          Bt_pos_left->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        } // Fl_Button* Bt_pos_left
        { Bt_pos_right = new Fl_Button(470, 25, 24, 23);
          Bt_pos_right->tooltip("Move camera : view object from right side");
          Bt_pos_right->color((Fl_Color)55);
          Bt_pos_right->image(image_right2);
          Bt_pos_right->callback((Fl_Callback*)cb_Bt_pos_right);
          Bt_pos_right->align(Fl_Align(FL_ALIGN_CLIP));
        } // Fl_Button* Bt_pos_right
        { Bt_pos_face = new Fl_Button(517, 25, 25, 23);
          Bt_pos_face->tooltip("Move camera : view object from font side");
          Bt_pos_face->color((Fl_Color)55);
          Bt_pos_face->image(image_front2);
          Bt_pos_face->callback((Fl_Callback*)cb_Bt_pos_face);
          Bt_pos_face->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* Bt_pos_face
        { Bt_pos_back = new Fl_Button(542, 25, 25, 23);
          Bt_pos_back->tooltip("Move camera : view object from back side");
          Bt_pos_back->color((Fl_Color)55);
          Bt_pos_back->image(image_back2);
          Bt_pos_back->callback((Fl_Callback*)cb_Bt_pos_back);
          Bt_pos_back->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* Bt_pos_back
        { Bt_pos_above = new Fl_Button(567, 25, 25, 23);
          Bt_pos_above->tooltip("Move camera : view object from above");
          Bt_pos_above->color((Fl_Color)55);
          Bt_pos_above->image(image_above2);
          Bt_pos_above->callback((Fl_Callback*)cb_Bt_pos_above);
        } // Fl_Button* Bt_pos_above
        { Bt_pos_below = new Fl_Button(590, 25, 25, 23);
          Bt_pos_below->tooltip("Move camera : view object from below");
          Bt_pos_below->color((Fl_Color)55);
          Bt_pos_below->image(image_below2);
          Bt_pos_below->callback((Fl_Callback*)cb_Bt_pos_below);
        } // Fl_Button* Bt_pos_below
        { Matrix_button = new Fl_Button(615, 25, 25, 23);
          Matrix_button->tooltip("Edit first selected object position and aspect matrices");
          Matrix_button->color((Fl_Color)55);
          Matrix_button->selection_color(FL_DARK1);
          Matrix_button->image(image_mat);
          Matrix_button->callback((Fl_Callback*)cb_Matrix_button);
          Matrix_button->when(FL_WHEN_CHANGED);
        } // Fl_Button* Matrix_button
        { Color_Scale_button = new Fl_Button(640, 25, 25, 23);
          Color_Scale_button->tooltip("Draw / Stop drawing object scalars as colour scales");
          Color_Scale_button->down_box(FL_DOWN_BOX);
          Color_Scale_button->color((Fl_Color)55);
          Color_Scale_button->selection_color(FL_DARK1);
          Color_Scale_button->image(image_show_color_scale);
          Color_Scale_button->callback((Fl_Callback*)cb_Color_Scale_button);
          Color_Scale_button->when(FL_WHEN_CHANGED);
        } // Fl_Button* Color_Scale_button
        { Color_Scale_Show = new Fl_Button(665, 25, 25, 23);
          Color_Scale_Show->tooltip("Open Scalar Window");
          Color_Scale_Show->down_box(FL_DOWN_BOX);
          Color_Scale_Show->color((Fl_Color)55);
          Color_Scale_Show->selection_color(FL_DARK1);
          Color_Scale_Show->image(image_edit_color_scale);
          Color_Scale_Show->callback((Fl_Callback*)cb_Color_Scale_Show);
          Color_Scale_Show->when(FL_WHEN_CHANGED);
        } // Fl_Button* Color_Scale_Show
        { Show_Tag_Window2 = new Fl_Button(715, 25, 25, 23);
          Show_Tag_Window2->tooltip("Show tag window");
          Show_Tag_Window2->down_box(FL_DOWN_BOX);
          Show_Tag_Window2->color((Fl_Color)55);
          Show_Tag_Window2->selection_color(FL_DARK1);
          Show_Tag_Window2->image(image_Show_Tag_Window2);
          Show_Tag_Window2->callback((Fl_Callback*)cb_Show_Tag_Window2);
          Show_Tag_Window2->when(FL_WHEN_CHANGED);
        } // Fl_Button* Show_Tag_Window2
        { Tag_mode_off = new Fl_Button(740, 25, 25, 23);
          Tag_mode_off->tooltip("Normal select mode : selected surfaces are grey / unselected ones are colored");
          Tag_mode_off->down_box(FL_DOWN_BOX);
          Tag_mode_off->value(1);
          Tag_mode_off->color((Fl_Color)55);
          Tag_mode_off->selection_color(FL_DARK1);
          Tag_mode_off->image(image_Normal_select_mode);
          Tag_mode_off->callback((Fl_Callback*)cb_Tag_mode_off);
          Tag_mode_off->when(FL_WHEN_CHANGED);
        } // Fl_Button* Tag_mode_off
        { Tag_mode_on = new Fl_Button(767, 25, 25, 23);
          Tag_mode_on->tooltip("Tag select mode : selected surfaces are colored / unselected ones are grey");
          Tag_mode_on->down_box(FL_DOWN_BOX);
          Tag_mode_on->color((Fl_Color)55);
          Tag_mode_on->selection_color(FL_DARK1);
          Tag_mode_on->image(image_Tag_select_mode);
          Tag_mode_on->callback((Fl_Callback*)cb_Tag_mode_on);
          Tag_mode_on->when(FL_WHEN_CHANGED);
        } // Fl_Button* Tag_mode_on
        { Pencil = new Fl_Button(792, 25, 25, 23);
          Pencil->tooltip("Activate pencil tagging mode");
          Pencil->down_box(FL_DOWN_BOX);
          Pencil->value(1);
          Pencil->color((Fl_Color)55);
          Pencil->selection_color(FL_DARK1);
          Pencil->image(image_pencil);
          Pencil->callback((Fl_Callback*)cb_Pencil);
          Pencil->when(FL_WHEN_CHANGED);
        } // Fl_Button* Pencil
        { Magic_Wand = new Fl_Button(817, 25, 25, 23);
          Magic_Wand->tooltip("Activate magic wand tagging mode");
          Magic_Wand->down_box(FL_DOWN_BOX);
          Magic_Wand->color((Fl_Color)55);
          Magic_Wand->selection_color(FL_DARK1);
          Magic_Wand->image(image_magic_wand);
          Magic_Wand->callback((Fl_Callback*)cb_Magic_Wand);
          Magic_Wand->when(FL_WHEN_CHANGED);
        } // Fl_Button* Magic_Wand
        { Flood_Fill = new Fl_Button(842, 25, 25, 23);
          Flood_Fill->tooltip("Activateflood fill tagging mode");
          Flood_Fill->down_box(FL_DOWN_BOX);
          Flood_Fill->color((Fl_Color)55);
          Flood_Fill->selection_color(FL_DARK1);
          Flood_Fill->image(image_Flood_fill);
          Flood_Fill->callback((Fl_Callback*)cb_Flood_Fill);
          Flood_Fill->when(FL_WHEN_CHANGED);
        } // Fl_Button* Flood_Fill
        { Lasso_plus = new Fl_Button(868, 25, 25, 23);
          Lasso_plus->tooltip("Lasso tag + : draw a lasso contour using several left clicks + a final right \
click. Then either middle click, or press \"t\"+ left or right click");
          Lasso_plus->down_box(FL_DOWN_BOX);
          Lasso_plus->color((Fl_Color)55);
          Lasso_plus->selection_color(FL_DARK1);
          Lasso_plus->image(image_Lasso_plus);
          Lasso_plus->callback((Fl_Callback*)cb_Lasso_plus);
          Lasso_plus->when(FL_WHEN_CHANGED);
        } // Fl_Button* Lasso_plus
        { Edit_flag = new Fl_Button(893, 25, 25, 23);
          Edit_flag->tooltip("Edit first selected flag label, length and colour");
          Edit_flag->color((Fl_Color)55);
          Edit_flag->selection_color(FL_DARK1);
          Edit_flag->image(image_Flag02);
          Edit_flag->callback((Fl_Callback*)cb_Edit_flag);
          Edit_flag->when(FL_WHEN_CHANGED);
        } // Fl_Button* Edit_flag
        { Show_Tag_Window = new Fl_Button(691, 25, 25, 23);
          Show_Tag_Window->tooltip("Display tags");
          Show_Tag_Window->down_box(FL_DOWN_BOX);
          Show_Tag_Window->color((Fl_Color)55);
          Show_Tag_Window->selection_color(FL_DARK1);
          Show_Tag_Window->image(image_Show_Tag_Window);
          Show_Tag_Window->callback((Fl_Callback*)cb_Show_Tag_Window);
          Show_Tag_Window->when(FL_WHEN_CHANGED);
        } // Fl_Button* Show_Tag_Window
        { Edit_name = new Fl_Button(916, 25, 25, 23);
          Edit_name->tooltip("Edit first selected surface name");
          Edit_name->color((Fl_Color)55);
          Edit_name->selection_color(FL_DARK1);
          Edit_name->image(image_name);
          Edit_name->callback((Fl_Callback*)cb_Edit_name);
          Edit_name->when(FL_WHEN_CHANGED);
        } // Fl_Button* Edit_name
        { Orientation = new Fl_Button(276, 25, 25, 23);
          Orientation->tooltip("Show/hide orientation");
          Orientation->color((Fl_Color)55);
          Orientation->selection_color((Fl_Color)23);
          Orientation->image(image_grid2);
          Orientation->callback((Fl_Callback*)cb_Orientation);
        } // Fl_Button* Orientation
        { Move_cam_centre_of_mass = new Fl_Button(250, 25, 25, 23);
          Move_cam_centre_of_mass->tooltip("Move camera center at origin or centre of mass of all objects");
          Move_cam_centre_of_mass->color((Fl_Color)55);
          Move_cam_centre_of_mass->selection_color((Fl_Color)23);
          Move_cam_centre_of_mass->image(image_Move_cam);
          Move_cam_centre_of_mass->callback((Fl_Callback*)cb_Move_cam_centre_of_mass);
        } // Fl_Button* Move_cam_centre_of_mass
        Unresizable->end();
      } // Fl_Group* Unresizable
      { Resizable = new Fl_Group(980, 0, 22, 50);
        Resizable->end();
        Fl_Group::current()->resizable(Resizable);
      } // Fl_Group* Resizable
      Top->end();
    } // Fl_Group* Top
    { Bottom = new Fl_Group(0, 50, 1000, 650);
      { MT = new MeshTools(40, 50, 940, 610, "MeshTools 3D window");
        MT->box(FL_NO_BOX);
        MT->color(FL_BACKGROUND_COLOR);
        MT->selection_color(FL_BACKGROUND_COLOR);
        MT->labeltype(FL_NORMAL_LABEL);
        MT->labelfont(0);
        MT->labelsize(14);
        MT->labelcolor(FL_FOREGROUND_COLOR);
        MT->align(Fl_Align(FL_ALIGN_CENTER));
        MT->when(FL_WHEN_CHANGED);
        Fl_Group::current()->resizable(MT);
      } // MeshTools* MT
      { WW = new Fl_Group(0, 50, 40, 650);
        WW->color((Fl_Color)207);
        { WW_unresizable = new Fl_Group(0, 50, 40, 550);
          { zpan1 = new SpecialSlider2(20, 61, 20, 225, "Z");
            zpan1->tooltip("Move selected objects along viewing z axis");
            zpan1->type(4);
            zpan1->box(FL_DOWN_BOX);
            zpan1->color((Fl_Color)215);
            zpan1->selection_color(FL_BACKGROUND_COLOR);
            zpan1->labeltype(FL_NORMAL_LABEL);
            zpan1->labelfont(0);
            zpan1->labelsize(14);
            zpan1->labelcolor(FL_FOREGROUND_COLOR);
            zpan1->minimum(-100);
            zpan1->maximum(100);
            zpan1->step(0.1);
            zpan1->callback((Fl_Callback*)cb_zpan1);
            zpan1->align(Fl_Align(FL_ALIGN_BOTTOM));
            zpan1->when(FL_WHEN_CHANGED);
          } // SpecialSlider2* zpan1
          { zroll1 = new SpecialRoller4(0, 60, 20, 230);
            zroll1->tooltip("Rotate selected objects around viewing z axis");
            zroll1->box(FL_DOWN_BOX);
            zroll1->color((Fl_Color)23);
            zroll1->selection_color(FL_WHITE);
            zroll1->labeltype(FL_NORMAL_LABEL);
            zroll1->labelfont(0);
            zroll1->labelsize(14);
            zroll1->labelcolor(FL_FOREGROUND_COLOR);
            zroll1->minimum(-180);
            zroll1->maximum(180);
            zroll1->step(0.1);
            zroll1->callback((Fl_Callback*)cb_zroll1);
            zroll1->align(Fl_Align(FL_ALIGN_BOTTOM));
            zroll1->when(FL_WHEN_CHANGED);
          } // SpecialRoller4* zroll1
          { ypan1 = new SpecialSlider2(20, 305, 20, 231, "Y");
            ypan1->tooltip("Move selected objects along viewing y axis");
            ypan1->type(4);
            ypan1->box(FL_DOWN_BOX);
            ypan1->color((Fl_Color)215);
            ypan1->selection_color(FL_BACKGROUND_COLOR);
            ypan1->labeltype(FL_NORMAL_LABEL);
            ypan1->labelfont(0);
            ypan1->labelsize(14);
            ypan1->labelcolor(FL_FOREGROUND_COLOR);
            ypan1->minimum(-100);
            ypan1->maximum(100);
            ypan1->step(0.1);
            ypan1->callback((Fl_Callback*)cb_ypan1);
            ypan1->align(Fl_Align(FL_ALIGN_BOTTOM));
            ypan1->when(FL_WHEN_CHANGED);
          } // SpecialSlider2* ypan1
          { yroll1 = new SpecialRoller4(0, 306, 20, 230);
            yroll1->tooltip("Rotate selected objects around viewing y axis");
            yroll1->box(FL_DOWN_BOX);
            yroll1->color((Fl_Color)23);
            yroll1->selection_color(FL_WHITE);
            yroll1->labeltype(FL_NORMAL_LABEL);
            yroll1->labelfont(0);
            yroll1->labelsize(14);
            yroll1->labelcolor(FL_FOREGROUND_COLOR);
            yroll1->minimum(-180);
            yroll1->maximum(180);
            yroll1->step(0.1);
            yroll1->callback((Fl_Callback*)cb_yroll1);
            yroll1->align(Fl_Align(FL_ALIGN_BOTTOM));
            yroll1->when(FL_WHEN_CHANGED);
          } // SpecialRoller4* yroll1
          WW_unresizable->end();
        } // Fl_Group* WW_unresizable
        { WW_resizable = new Fl_Group(0, 660, 40, 40);
          WW_resizable->end();
          Fl_Group::current()->resizable(WW_resizable);
        } // Fl_Group* WW_resizable
        WW->end();
      } // Fl_Group* WW
      { EE = new Fl_Group(980, 50, 20, 650);
        EE->align(Fl_Align(FL_ALIGN_CENTER));
        { EE_unresizable = new Fl_Group(980, 50, 20, 610);
          { zpan = new SpecialSlider2(981, 217, 19, 239, "cp");
            zpan->tooltip("Displace clipping plane");
            zpan->type(4);
            zpan->box(FL_DOWN_BOX);
            zpan->color((Fl_Color)92);
            zpan->selection_color(FL_BACKGROUND_COLOR);
            zpan->labeltype(FL_NORMAL_LABEL);
            zpan->labelfont(0);
            zpan->labelsize(7);
            zpan->labelcolor(FL_FOREGROUND_COLOR);
            zpan->minimum(-100);
            zpan->maximum(100);
            zpan->step(0.1);
            zpan->callback((Fl_Callback*)cb_zpan);
            zpan->align(Fl_Align(FL_ALIGN_BOTTOM));
            zpan->when(FL_WHEN_CHANGED);
          } // SpecialSlider2* zpan
          { zroll = new SpecialSlider2(981, 51, 19, 152, "rZ");
            zroll->tooltip("Rotate camera along viewing z axis");
            zroll->type(4);
            zroll->box(FL_DOWN_BOX);
            zroll->color((Fl_Color)92);
            zroll->selection_color(FL_BACKGROUND_COLOR);
            zroll->labeltype(FL_NORMAL_LABEL);
            zroll->labelfont(0);
            zroll->labelsize(14);
            zroll->labelcolor(FL_FOREGROUND_COLOR);
            zroll->minimum(-45);
            zroll->maximum(45);
            zroll->step(0.1);
            zroll->callback((Fl_Callback*)cb_zroll);
            zroll->align(Fl_Align(FL_ALIGN_BOTTOM));
            zroll->when(FL_WHEN_CHANGED);
          } // SpecialSlider2* zroll
          { zoom = new SpecialRoller4(981, 505, 19, 145, "Zoom");
            zoom->tooltip("Zoom");
            zoom->box(FL_DOWN_BOX);
            zoom->color((Fl_Color)55);
            zoom->selection_color(FL_WHITE);
            zoom->labeltype(FL_NORMAL_LABEL);
            zoom->labelfont(0);
            zoom->labelsize(7);
            zoom->labelcolor(FL_FOREGROUND_COLOR);
            zoom->minimum(-50);
            zoom->maximum(50);
            zoom->step(0.5);
            zoom->callback((Fl_Callback*)cb_zoom);
            zoom->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
            zoom->when(FL_WHEN_CHANGED);
          } // SpecialRoller4* zoom
          { CP_cut_half2 = new Fl_Button(980, 464, 20, 20);
            CP_cut_half2->tooltip("Displace clipping plane to z=0");
            CP_cut_half2->image(image_Clipping_plane_z0);
            CP_cut_half2->callback((Fl_Callback*)cb_CP_cut_half2);
          } // Fl_Button* CP_cut_half2
          { CP_normal_cp2 = new Fl_Button(980, 484, 20, 20);
            CP_normal_cp2->tooltip("Replace clipping place normally");
            CP_normal_cp2->image(image_Clipping_plane_normal);
            CP_normal_cp2->callback((Fl_Callback*)cb_CP_normal_cp2);
          } // Fl_Button* CP_normal_cp2
          EE_unresizable->end();
        } // Fl_Group* EE_unresizable
        { EE_resizable = new Fl_Group(980, 660, 20, 40);
          EE_resizable->end();
          Fl_Group::current()->resizable(EE_resizable);
        } // Fl_Group* EE_resizable
        EE->end();
      } // Fl_Group* EE
      { SS = new Fl_Group(40, 659, 940, 41);
        SS->color((Fl_Color)207);
        { SS_unresizable = new Fl_Group(40, 660, 360, 40);
          { xpan1 = new SpecialSlider2(85, 660, 255, 20, "x");
            xpan1->tooltip("Move selected objects along viewing x axis");
            xpan1->type(5);
            xpan1->box(FL_DOWN_BOX);
            xpan1->color((Fl_Color)215);
            xpan1->selection_color(FL_BACKGROUND_COLOR);
            xpan1->labeltype(FL_NORMAL_LABEL);
            xpan1->labelfont(0);
            xpan1->labelsize(14);
            xpan1->labelcolor(FL_FOREGROUND_COLOR);
            xpan1->minimum(-100);
            xpan1->maximum(100);
            xpan1->step(0.1);
            xpan1->callback((Fl_Callback*)cb_xpan1);
            xpan1->align(Fl_Align(FL_ALIGN_LEFT));
            xpan1->when(FL_WHEN_CHANGED);
          } // SpecialSlider2* xpan1
          { xroll1 = new SpecialRoller4(85, 680, 255, 20);
            xroll1->tooltip("Rotate selected objects around viewing x axis");
            xroll1->type(1);
            xroll1->box(FL_DOWN_BOX);
            xroll1->color((Fl_Color)55);
            xroll1->selection_color(FL_WHITE);
            xroll1->labeltype(FL_NORMAL_LABEL);
            xroll1->labelfont(0);
            xroll1->labelsize(14);
            xroll1->labelcolor(FL_FOREGROUND_COLOR);
            xroll1->minimum(-180);
            xroll1->maximum(180);
            xroll1->step(0.1);
            xroll1->callback((Fl_Callback*)cb_xroll1);
            xroll1->align(Fl_Align(FL_ALIGN_BOTTOM));
            xroll1->when(FL_WHEN_CHANGED);
          } // SpecialRoller4* xroll1
          SS_unresizable->end();
        } // Fl_Group* SS_unresizable
        { SS_resizable = new Fl_Group(400, 660, 580, 40);
          SS_resizable->end();
          Fl_Group::current()->resizable(SS_resizable);
        } // Fl_Group* SS_resizable
        SS->end();
      } // Fl_Group* SS
      Bottom->end();
      Fl_Group::current()->resizable(Bottom);
    } // Fl_Group* Bottom
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
  { camWindow = new Fl_Double_Window(187, 315, "Camera options");
    camWindow->color((Fl_Color)174);
    camWindow->user_data((void*)(this));
    { Cam_near = new Fl_Value_Input(99, 15, 52, 25, "Camera near :");
    } // Fl_Value_Input* Cam_near
    { Cam_far = new Fl_Value_Input(99, 45, 52, 25, "Camera far :");
    } // Fl_Value_Input* Cam_far
    { Cam_az = new Fl_Value_Input(99, 75, 52, 25, "Azimuth :");
    } // Fl_Value_Input* Cam_az
    { Cam_el = new Fl_Value_Input(99, 104, 52, 25, "Elevation :");
    } // Fl_Value_Input* Cam_el
    { Cam_tw = new Fl_Value_Input(98, 132, 52, 25, "Twist :");
    } // Fl_Value_Input* Cam_tw
    { Cam_tx = new Fl_Value_Input(99, 160, 52, 25, "Tx :");
    } // Fl_Value_Input* Cam_tx
    { Cam_ty = new Fl_Value_Input(99, 189, 52, 25, "Ty :");
    } // Fl_Value_Input* Cam_ty
    { Cam_tz = new Fl_Value_Input(99, 217, 52, 25, "Tz :");
    } // Fl_Value_Input* Cam_tz
    { Ok_cam = new Fl_Button(65, 280, 65, 25, "Ok");
      Ok_cam->color((Fl_Color)173);
      Ok_cam->selection_color((Fl_Color)172);
      Ok_cam->callback((Fl_Callback*)cb_Ok_cam);
    } // Fl_Button* Ok_cam
    { CP_cut_half = new Fl_Button(90, 252, 25, 23);
      CP_cut_half->tooltip("Displace clipping plane to z=0");
      CP_cut_half->color((Fl_Color)84);
      CP_cut_half->selection_color((Fl_Color)92);
      CP_cut_half->image(image_Clipping_plane_z0);
      CP_cut_half->callback((Fl_Callback*)cb_CP_cut_half);
      CP_cut_half->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* CP_cut_half
    { CP_normal_cp = new Fl_Button(117, 252, 25, 23);
      CP_normal_cp->tooltip("Replace clipping place normally");
      CP_normal_cp->color((Fl_Color)84);
      CP_normal_cp->selection_color((Fl_Color)92);
      CP_normal_cp->image(image_Clipping_plane_normal);
      CP_normal_cp->callback((Fl_Callback*)cb_CP_normal_cp);
      CP_normal_cp->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* CP_normal_cp
    camWindow->set_non_modal();
    camWindow->end();
    camWindow->resizable(camWindow);
  } // Fl_Double_Window* camWindow
  { optWindow = new Fl_Double_Window(367, 312, "General options");
    optWindow->color((Fl_Color)94);
    optWindow->user_data((void*)(this));
    { open_surface_option = new Fl_Group(10, 25, 350, 160, "Behaviour when opening surfaces : ");
      open_surface_option->box(FL_BORDER_BOX);
      open_surface_option->color((Fl_Color)93);
      { open_surface_option_camera = new Fl_Group(20, 125, 325, 54, "Camera : ");
        open_surface_option_camera->box(FL_BORDER_BOX);
        open_surface_option_camera->color((Fl_Color)94);
        open_surface_option_camera->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { rb_cam = new Fl_Round_Button(25, 126, 25, 25, "Auto zoom / unzoom according to object size");
          rb_cam->type(102);
          rb_cam->down_box(FL_ROUND_DOWN_BOX);
          rb_cam->value(1);
        } // Fl_Round_Button* rb_cam
        { rb_cam2 = new Fl_Round_Button(25, 146, 25, 33, "Swith off auto zoom");
          rb_cam2->type(102);
          rb_cam2->down_box(FL_ROUND_DOWN_BOX);
        } // Fl_Round_Button* rb_cam2
        open_surface_option_camera->end();
      } // Fl_Group* open_surface_option_camera
      { open_surface_option_center_of_mass = new Fl_Group(21, 47, 324, 58, "Object position :");
        open_surface_option_center_of_mass->box(FL_BORDER_BOX);
        open_surface_option_center_of_mass->color((Fl_Color)94);
        open_surface_option_center_of_mass->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { rb_cm = new Fl_Round_Button(26, 48, 25, 25, "Move object centre of mass at x=0,y=0,z=0");
          rb_cm->type(102);
          rb_cm->down_box(FL_ROUND_DOWN_BOX);
          rb_cm->value(1);
        } // Fl_Round_Button* rb_cm
        { rb_cm2 = new Fl_Round_Button(26, 68, 25, 33, "Keep object native coordinate system");
          rb_cm2->type(102);
          rb_cm2->down_box(FL_ROUND_DOWN_BOX);
        } // Fl_Round_Button* rb_cm2
        open_surface_option_center_of_mass->end();
      } // Fl_Group* open_surface_option_center_of_mass
      open_surface_option->end();
    } // Fl_Group* open_surface_option
    { process_surface_options = new Fl_Group(11, 217, 350, 53, "Surface edition involving filters :");
      process_surface_options->box(FL_BORDER_BOX);
      process_surface_options->color((Fl_Color)93);
      { rb_delete_orig = new Fl_Round_Button(20, 218, 25, 25, "Delete initial surface (only keep filter output)");
        rb_delete_orig->type(102);
        rb_delete_orig->down_box(FL_ROUND_DOWN_BOX);
        rb_delete_orig->value(1);
      } // Fl_Round_Button* rb_delete_orig
      { rb_keep_orig = new Fl_Round_Button(20, 238, 25, 32, "Keep both input and output surfaces");
        rb_keep_orig->type(102);
        rb_keep_orig->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* rb_keep_orig
      process_surface_options->end();
    } // Fl_Group* process_surface_options
    { Ok_scc = new Fl_Button(155, 280, 65, 25, "Ok");
      Ok_scc->color((Fl_Color)133);
      Ok_scc->selection_color((Fl_Color)92);
      Ok_scc->callback((Fl_Callback*)cb_Ok_scc);
    } // Fl_Button* Ok_scc
    optWindow->set_non_modal();
    optWindow->end();
    optWindow->resizable(optWindow);
  } // Fl_Double_Window* optWindow
  { opt_lc_Window = new Fl_Double_Window(372, 317, "Lightning and colour options");
    opt_lc_Window->color((Fl_Color)94);
    opt_lc_Window->user_data((void*)(this));
    { Window_group = new Fl_Group(15, 25, 345, 23, "Windows");
      Window_group->box(FL_BORDER_BOX);
      { Back_Color = new Fl_Button(239, 25, 121, 23, "Background colour");
        Back_Color->color((Fl_Color)36);
        Back_Color->labelcolor(FL_GRAY0);
        Back_Color->callback((Fl_Callback*)cb_Back_Color);
      } // Fl_Button* Back_Color
      { Grid_Color = new Fl_Button(125, 25, 114, 23, "Grid colour");
        Grid_Color->color((Fl_Color)43);
        Grid_Color->labelcolor(FL_GRAY0);
        Grid_Color->callback((Fl_Callback*)cb_Grid_Color);
      } // Fl_Button* Grid_Color
      { Obj_Color = new Fl_Button(15, 25, 110, 23, "Object colour");
        Obj_Color->color((Fl_Color)35);
        Obj_Color->labelcolor(FL_GRAY0);
        Obj_Color->callback((Fl_Callback*)cb_Obj_Color);
      } // Fl_Button* Obj_Color
      Window_group->end();
    } // Fl_Group* Window_group
    { Light_group = new Fl_Group(10, 69, 350, 179, "Light");
      Light_group->box(FL_BORDER_BOX);
      Light_group->color((Fl_Color)93);
      { LightRoll1 = new Fl_Roller(55, 78, 240, 18);
        LightRoll1->type(1);
        LightRoll1->box(FL_DOWN_BOX);
        LightRoll1->color((Fl_Color)94);
        LightRoll1->selection_color((Fl_Color)93);
        LightRoll1->minimum(-180);
        LightRoll1->maximum(180);
        LightRoll1->step(0.1);
        LightRoll1->callback((Fl_Callback*)cb_LightRoll1);
      } // Fl_Roller* LightRoll1
      { LightRoll2 = new Fl_Roller(56, 103, 240, 18);
        LightRoll2->type(1);
        LightRoll2->box(FL_DOWN_BOX);
        LightRoll2->color((Fl_Color)94);
        LightRoll2->selection_color((Fl_Color)93);
        LightRoll2->minimum(-180);
        LightRoll2->maximum(180);
        LightRoll2->step(0.1);
        LightRoll2->callback((Fl_Callback*)cb_LightRoll2);
      } // Fl_Roller* LightRoll2
      { Specular = new Fl_Value_Slider(54, 128, 240, 15, "Specular");
        Specular->type(1);
        Specular->color(FL_YELLOW);
        Specular->value(1);
        Specular->textsize(14);
        Specular->callback((Fl_Callback*)cb_Specular);
      } // Fl_Value_Slider* Specular
      { Diffuse = new Fl_Value_Slider(54, 160, 240, 15, "Diffuse");
        Diffuse->type(1);
        Diffuse->color(FL_YELLOW);
        Diffuse->value(1);
        Diffuse->textsize(14);
        Diffuse->callback((Fl_Callback*)cb_Diffuse);
      } // Fl_Value_Slider* Diffuse
      { Ambiant = new Fl_Value_Slider(55, 193, 240, 15, "Ambiant");
        Ambiant->type(1);
        Ambiant->color(FL_YELLOW);
        Ambiant->textsize(14);
        Ambiant->callback((Fl_Callback*)cb_Ambiant);
      } // Fl_Value_Slider* Ambiant
      { cb_enable_2sides = new Fl_Check_Button(53, 221, 25, 25, "Enable two sided lighting");
        cb_enable_2sides->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* cb_enable_2sides
      Light_group->end();
    } // Fl_Group* Light_group
    { Ok_scc_lightning_colour = new Fl_Button(90, 260, 65, 25, "Ok");
      Ok_scc_lightning_colour->color((Fl_Color)133);
      Ok_scc_lightning_colour->selection_color((Fl_Color)92);
      Ok_scc_lightning_colour->callback((Fl_Callback*)cb_Ok_scc_lightning_colour);
    } // Fl_Button* Ok_scc_lightning_colour
    { Reinit_general_options = new Fl_Button(172, 260, 95, 25, "Default values");
      Reinit_general_options->color((Fl_Color)133);
      Reinit_general_options->selection_color((Fl_Color)92);
      Reinit_general_options->callback((Fl_Callback*)cb_Reinit_general_options);
    } // Fl_Button* Reinit_general_options
    opt_lc_Window->set_non_modal();
    opt_lc_Window->end();
    opt_lc_Window->resizable(opt_lc_Window);
  } // Fl_Double_Window* opt_lc_Window
  { opt_lm_Window = new Fl_Double_Window(366, 367, "Landmark and flag options");
    opt_lm_Window->color((Fl_Color)94);
    opt_lm_Window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 28, 350, 160, "Landmarks rendering");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)93);
      { landmark_type_radio_buttons = new Fl_Group(24, 50, 314, 55, "Draw Landmarks As : ");
        landmark_type_radio_buttons->box(FL_BORDER_BOX);
        landmark_type_radio_buttons->color((Fl_Color)94);
        landmark_type_radio_buttons->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { pt_sphere = new Fl_Round_Button(26, 51, 25, 24, "Spheres");
          pt_sphere->type(102);
          pt_sphere->down_box(FL_ROUND_DOWN_BOX);
          pt_sphere->value(1);
        } // Fl_Round_Button* pt_sphere
        { pt_needle = new Fl_Round_Button(26, 74, 22, 11, "Needles");
          pt_needle->type(102);
          pt_needle->down_box(FL_ROUND_DOWN_BOX);
        } // Fl_Round_Button* pt_needle
        landmark_type_radio_buttons->end();
      } // Fl_Group* landmark_type_radio_buttons
      { Landmark_Size2 = new Fl_Value_Input(240, 148, 28, 25, "Landmark rendering size (mm) :");
        Landmark_Size2->align(Fl_Align(36));
      } // Fl_Value_Input* Landmark_Size2
      { auto_landmark_size = new Fl_Check_Button(30, 123, 25, 25, "Adjust automatically landmark rendering size");
        auto_landmark_size->down_box(FL_DOWN_BOX);
        auto_landmark_size->callback((Fl_Callback*)cb_auto_landmark_size);
      } // Fl_Check_Button* auto_landmark_size
      o->end();
    } // Fl_Group* o
    { Ok_scc_lm = new Fl_Button(150, 335, 65, 25, "Ok");
      Ok_scc_lm->color((Fl_Color)133);
      Ok_scc_lm->selection_color((Fl_Color)92);
      Ok_scc_lm->callback((Fl_Callback*)cb_Ok_scc_lm);
    } // Fl_Button* Ok_scc_lm
    { Fl_Group* o = new Fl_Group(10, 217, 350, 109, "Flags setting");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)93);
      { Flag_g_length = new Fl_Value_Input(143, 276, 28, 25, "Flag length (mm) :");
        Flag_g_length->align(Fl_Align(36));
      } // Fl_Value_Input* Flag_g_length
      { Flag_g_colour = new Fl_Button(33, 233, 140, 26, "Flag colour");
        Flag_g_colour->color((Fl_Color)42);
        Flag_g_colour->labelcolor(FL_GRAY0);
        Flag_g_colour->callback((Fl_Callback*)cb_Flag_g_colour);
      } // Fl_Button* Flag_g_colour
      o->end();
    } // Fl_Group* o
    opt_lm_Window->set_non_modal();
    opt_lm_Window->end();
    opt_lm_Window->resizable(opt_lm_Window);
  } // Fl_Double_Window* opt_lm_Window
  { opt_rd_Window = new Fl_Double_Window(371, 270, "Rendering options");
    opt_rd_Window->color((Fl_Color)94);
    opt_rd_Window->user_data((void*)(this));
    { fast_display_option = new Fl_Group(7, 25, 350, 60, "Object rendering when moving object/camera :");
      fast_display_option->box(FL_BORDER_BOX);
      fast_display_option->color((Fl_Color)93);
      { rb_show_all = new Fl_Round_Button(16, 30, 25, 25, "Show full surface / scalars (slower)");
        rb_show_all->type(102);
        rb_show_all->down_box(FL_ROUND_DOWN_BOX);
        rb_show_all->value(1);
        rb_show_all->callback((Fl_Callback*)cb_rb_show_all);
      } // Fl_Round_Button* rb_show_all
      { rb_show_point_cloud = new Fl_Round_Button(16, 50, 25, 32, "Show point cloud (faster)");
        rb_show_point_cloud->type(102);
        rb_show_point_cloud->down_box(FL_ROUND_DOWN_BOX);
        rb_show_point_cloud->callback((Fl_Callback*)cb_rb_show_point_cloud);
      } // Fl_Round_Button* rb_show_point_cloud
      fast_display_option->end();
    } // Fl_Group* fast_display_option
    { depth_of_field_of_view = new Fl_Group(8, 122, 349, 93, "Depth of field of view");
      depth_of_field_of_view->box(FL_BORDER_BOX);
      depth_of_field_of_view->color((Fl_Color)93);
      { behaviour_when_moving_zoom = new Fl_Group(18, 144, 314, 47, "Behaviour when zooming in/out : ");
        behaviour_when_moving_zoom->box(FL_BORDER_BOX);
        behaviour_when_moving_zoom->color((Fl_Color)94);
        behaviour_when_moving_zoom->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { zm_keep = new Fl_Round_Button(20, 145, 25, 24, "Keep current field of view depth");
          zm_keep->type(102);
          zm_keep->down_box(FL_ROUND_DOWN_BOX);
          zm_keep->value(1);
        } // Fl_Round_Button* zm_keep
        { zm_adapt = new Fl_Round_Button(20, 168, 22, 11, "Adapt field of view depth");
          zm_adapt->type(102);
          zm_adapt->down_box(FL_ROUND_DOWN_BOX);
        } // Fl_Round_Button* zm_adapt
        behaviour_when_moving_zoom->end();
      } // Fl_Group* behaviour_when_moving_zoom
      depth_of_field_of_view->end();
    } // Fl_Group* depth_of_field_of_view
    { Ok_scc_rd = new Fl_Button(145, 225, 65, 25, "Ok");
      Ok_scc_rd->color((Fl_Color)133);
      Ok_scc_rd->selection_color((Fl_Color)92);
      Ok_scc_rd->callback((Fl_Callback*)cb_Ok_scc_rd);
    } // Fl_Button* Ok_scc_rd
    opt_rd_Window->set_non_modal();
    opt_rd_Window->end();
    opt_rd_Window->resizable(opt_rd_Window);
  } // Fl_Double_Window* opt_rd_Window
  { matWindow = new Fl_Double_Window(252, 350, "Object Matrix");
    matWindow->color((Fl_Color)215);
    matWindow->user_data((void*)(this));
    { Ok_mat = new Fl_Button(10, 270, 65, 25, "Ok");
      Ok_mat->tooltip("Apply these matrices to first selected object only");
      Ok_mat->color((Fl_Color)134);
      Ok_mat->selection_color((Fl_Color)92);
      Ok_mat->callback((Fl_Callback*)cb_Ok_mat);
    } // Fl_Button* Ok_mat
    { Size_matrix = new Fl_Group(10, 66, 221, 89, "Aspect matrix");
      Size_matrix->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { M1_00 = new Fl_Value_Input(26, 69, 50, 20);
        M1_00->textsize(10);
      } // Fl_Value_Input* M1_00
      { M1_01 = new Fl_Value_Input(78, 69, 50, 20);
        M1_01->textsize(10);
      } // Fl_Value_Input* M1_01
      { M1_02 = new Fl_Value_Input(129, 69, 50, 20);
        M1_02->textsize(10);
      } // Fl_Value_Input* M1_02
      { M1_03 = new Fl_Value_Input(181, 69, 50, 20);
        M1_03->textsize(10);
      } // Fl_Value_Input* M1_03
      { M1_10 = new Fl_Value_Input(27, 90, 50, 20);
        M1_10->textsize(10);
      } // Fl_Value_Input* M1_10
      { M1_11 = new Fl_Value_Input(78, 90, 50, 20);
        M1_11->textsize(10);
      } // Fl_Value_Input* M1_11
      { M1_12 = new Fl_Value_Input(129, 90, 50, 20);
        M1_12->textsize(10);
      } // Fl_Value_Input* M1_12
      { M1_13 = new Fl_Value_Input(181, 90, 50, 20);
        M1_13->textsize(10);
      } // Fl_Value_Input* M1_13
      { M1_20 = new Fl_Value_Input(27, 111, 50, 20);
        M1_20->textsize(10);
      } // Fl_Value_Input* M1_20
      { M1_21 = new Fl_Value_Input(78, 111, 50, 20);
        M1_21->textsize(10);
      } // Fl_Value_Input* M1_21
      { M1_22 = new Fl_Value_Input(129, 111, 50, 20);
        M1_22->textsize(10);
      } // Fl_Value_Input* M1_22
      { M1_23 = new Fl_Value_Input(181, 111, 50, 20);
        M1_23->textsize(10);
      } // Fl_Value_Input* M1_23
      { M1_30 = new Fl_Value_Input(27, 132, 50, 20);
        M1_30->textsize(10);
      } // Fl_Value_Input* M1_30
      { M1_31 = new Fl_Value_Input(78, 132, 50, 20);
        M1_31->textsize(10);
      } // Fl_Value_Input* M1_31
      { M1_32 = new Fl_Value_Input(129, 132, 50, 20);
        M1_32->textsize(10);
      } // Fl_Value_Input* M1_32
      { M1_33 = new Fl_Value_Input(181, 132, 50, 20);
        M1_33->textsize(10);
      } // Fl_Value_Input* M1_33
      Size_matrix->end();
    } // Fl_Group* Size_matrix
    { Position_matrix = new Fl_Group(10, 175, 230, 85, "Position matrix");
      Position_matrix->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { M2_00 = new Fl_Value_Input(26, 177, 50, 20);
        M2_00->textsize(10);
      } // Fl_Value_Input* M2_00
      { M2_01 = new Fl_Value_Input(77, 177, 50, 20);
        M2_01->textsize(10);
      } // Fl_Value_Input* M2_01
      { M2_02 = new Fl_Value_Input(130, 177, 50, 20);
        M2_02->textsize(10);
      } // Fl_Value_Input* M2_02
      { M2_03 = new Fl_Value_Input(182, 177, 50, 20);
        M2_03->textsize(10);
      } // Fl_Value_Input* M2_03
      { M2_10 = new Fl_Value_Input(26, 198, 50, 20);
        M2_10->textsize(10);
      } // Fl_Value_Input* M2_10
      { M2_11 = new Fl_Value_Input(77, 198, 50, 20);
        M2_11->textsize(10);
      } // Fl_Value_Input* M2_11
      { M2_12 = new Fl_Value_Input(129, 198, 51, 20);
        M2_12->textsize(10);
      } // Fl_Value_Input* M2_12
      { M2_13 = new Fl_Value_Input(182, 198, 50, 20);
        M2_13->textsize(10);
      } // Fl_Value_Input* M2_13
      { M2_20 = new Fl_Value_Input(26, 219, 50, 20);
        M2_20->textsize(10);
      } // Fl_Value_Input* M2_20
      { M2_21 = new Fl_Value_Input(78, 219, 50, 20);
        M2_21->textsize(10);
      } // Fl_Value_Input* M2_21
      { M2_22 = new Fl_Value_Input(130, 219, 50, 20);
        M2_22->textsize(10);
      } // Fl_Value_Input* M2_22
      { M2_23 = new Fl_Value_Input(181, 219, 50, 20);
        M2_23->textsize(10);
      } // Fl_Value_Input* M2_23
      { M2_30 = new Fl_Value_Input(26, 240, 50, 20);
        M2_30->textsize(10);
      } // Fl_Value_Input* M2_30
      { M2_31 = new Fl_Value_Input(77, 240, 50, 20);
        M2_31->textsize(10);
      } // Fl_Value_Input* M2_31
      { M2_32 = new Fl_Value_Input(130, 240, 50, 20);
        M2_32->textsize(10);
      } // Fl_Value_Input* M2_32
      { M2_33 = new Fl_Value_Input(181, 240, 50, 20);
        M2_33->textsize(10);
      } // Fl_Value_Input* M2_33
      Position_matrix->end();
    } // Fl_Group* Position_matrix
    { Init_mat = new Fl_Button(143, 270, 65, 25, "Init");
      Init_mat->tooltip("Reset to identity matrices");
      Init_mat->color((Fl_Color)174);
      Init_mat->selection_color((Fl_Color)132);
      Init_mat->callback((Fl_Callback*)cb_Init_mat);
    } // Fl_Button* Init_mat
    { conv_mat = new Fl_Button(167, 270, 65, 25, "Conv");
      conv_mat->tooltip("If object translation appears in \"Aspect Matrix\", put it into \"Position Ma\
trix\" (old version correction)");
      conv_mat->color((Fl_Color)81);
      conv_mat->callback((Fl_Callback*)cb_conv_mat);
      conv_mat->hide();
    } // Fl_Button* conv_mat
    { Ok_mat2 = new Fl_Button(10, 300, 170, 25, "Ok for all selected objects");
      Ok_mat2->tooltip("Apply these matrices to all selected objects");
      Ok_mat2->color((Fl_Color)128);
      Ok_mat2->callback((Fl_Callback*)cb_Ok_mat2);
    } // Fl_Button* Ok_mat2
    { MyName = new Fl_Output(50, 15, 185, 30, "Name");
      MyName->color(FL_BACKGROUND_COLOR);
    } // Fl_Output* MyName
    { Refresh_mat = new Fl_Button(76, 270, 65, 25, "Refresh");
      Refresh_mat->tooltip("Refresh matrices to first selected object");
      Refresh_mat->color((Fl_Color)134);
      Refresh_mat->selection_color((Fl_Color)92);
      Refresh_mat->callback((Fl_Callback*)cb_Refresh_mat);
    } // Fl_Button* Refresh_mat
    matWindow->set_non_modal();
    matWindow->end();
    matWindow->resizable(matWindow);
  } // Fl_Double_Window* matWindow
  { versionWindow = new Fl_Double_Window(784, 173, "About");
    versionWindow->user_data((void*)(this));
    { Ok_Version = new Fl_Button(265, 120, 65, 25, "Ok");
      Ok_Version->callback((Fl_Callback*)cb_Ok_Version);
    } // Fl_Button* Ok_Version
    { Version = new Fl_Input(168, 6, 70, 25, "Version :");
      Version->box(FL_NO_BOX);
    } // Fl_Input* Version
    { Copyright = new Fl_Input(685, 26, 15, 25, "Copyright : Renaud Lebrun, Stefan Schlager, Jean Dumoncel and C\303\251""cile\
 Peladan 2013-2016");
      Copyright->box(FL_NO_BOX);
    } // Fl_Input* Copyright
    { Contact = new Fl_Input(379, 46, 15, 25, "Contact : renaud.lebrun<at>umontpellier.fr");
      Contact->box(FL_NO_BOX);
    } // Fl_Input* Contact
    { Website = new Fl_Input(406, 66, 15, 25, "Website : http://morphomuseum.com/meshtools");
      Website->box(FL_NO_BOX);
    } // Fl_Input* Website
    { Fl_Box* o = new Fl_Box(3, 12, 100, 68);
      o->image(image_Mesh_Tools_Icon);
    } // Fl_Box* o
    { Git = new Fl_Input(487, 86, 15, 25, "Source repository : https://github.com/morphomuseum/ISE-MeshTools");
      Git->box(FL_NO_BOX);
    } // Fl_Input* Git
    versionWindow->set_modal();
    versionWindow->end();
    versionWindow->resizable(versionWindow);
  } // Fl_Double_Window* versionWindow
  { smoothWindow = new Fl_Double_Window(239, 122, "Smooth");
    smoothWindow->color((Fl_Color)134);
    smoothWindow->user_data((void*)(this));
    { S_Iteration_number = new Fl_Value_Input(165, 5, 52, 25, "Iteration Number :");
      S_Iteration_number->value(20);
      S_Iteration_number->align(Fl_Align(36));
    } // Fl_Value_Input* S_Iteration_number
    { Ok_smooth = new Fl_Button(53, 80, 65, 25, "Ok");
      Ok_smooth->color((Fl_Color)93);
      Ok_smooth->selection_color((Fl_Color)91);
      Ok_smooth->callback((Fl_Callback*)cb_Ok_smooth);
    } // Fl_Button* Ok_smooth
    { Relaxation = new Fl_Value_Input(165, 35, 52, 25, "Relaxation (0.001-0.1) :");
      Relaxation->value(0.01);
      Relaxation->align(Fl_Align(36));
    } // Fl_Value_Input* Relaxation
    { Cancel_smooth = new Fl_Button(147, 80, 65, 25, "Cancel");
      Cancel_smooth->color((Fl_Color)133);
      Cancel_smooth->selection_color((Fl_Color)132);
      Cancel_smooth->callback((Fl_Callback*)cb_Cancel_smooth);
    } // Fl_Button* Cancel_smooth
    smoothWindow->set_modal();
    smoothWindow->end();
    smoothWindow->resizable(smoothWindow);
  } // Fl_Double_Window* smoothWindow
  { blendWindow = new Fl_Double_Window(201, 94, "Alpha value (0-100)");
    blendWindow->color((Fl_Color)246);
    blendWindow->user_data((void*)(this));
    { Alpha_value = new Fl_Value_Input(115, 10, 52, 25, "Alpha:");
      Alpha_value->align(Fl_Align(36));
    } // Fl_Value_Input* Alpha_value
    { Ok_blend = new Fl_Button(60, 49, 65, 25, "Ok");
      Ok_blend->color((Fl_Color)244);
      Ok_blend->callback((Fl_Callback*)cb_Ok_blend);
    } // Fl_Button* Ok_blend
    blendWindow->set_modal();
    blendWindow->end();
    blendWindow->resizable(blendWindow);
  } // Fl_Double_Window* blendWindow
  { gridsizeWindow = new Fl_Double_Window(175, 88, "Grid size");
    gridsizeWindow->color((Fl_Color)246);
    gridsizeWindow->user_data((void*)(this));
    { grid_size_value = new Fl_Value_Input(115, 10, 52, 25, "Millimeter/square:");
      grid_size_value->align(Fl_Align(36));
    } // Fl_Value_Input* grid_size_value
    { Ok_grid_size = new Fl_Button(60, 49, 65, 25, "Ok");
      Ok_grid_size->color((Fl_Color)238);
      Ok_grid_size->selection_color((Fl_Color)237);
      Ok_grid_size->callback((Fl_Callback*)cb_Ok_grid_size);
    } // Fl_Button* Ok_grid_size
    gridsizeWindow->set_modal();
    gridsizeWindow->end();
    gridsizeWindow->resizable(gridsizeWindow);
  } // Fl_Double_Window* gridsizeWindow
  { zoomScaleWindow = new Fl_Double_Window(203, 92, "Scale");
    zoomScaleWindow->user_data((void*)(this));
    { TF100pixels_in_mm_value = new Fl_Value_Input(115, 10, 52, 25, "100 Pixels in mm:");
      TF100pixels_in_mm_value->align(Fl_Align(36));
    } // Fl_Value_Input* TF100pixels_in_mm_value
    { Ok_100pixels_in_mm = new Fl_Button(60, 49, 65, 25, "Ok");
      Ok_100pixels_in_mm->callback((Fl_Callback*)cb_Ok_100pixels_in_mm);
    } // Fl_Button* Ok_100pixels_in_mm
    zoomScaleWindow->set_modal();
    zoomScaleWindow->end();
    zoomScaleWindow->resizable(zoomScaleWindow);
  } // Fl_Double_Window* zoomScaleWindow
  { curvWindow = new Fl_Double_Window(391, 163, "Curvature");
    curvWindow->color((Fl_Color)215);
    curvWindow->user_data((void*)(this));
    { Ok_curv = new Fl_Button(95, 125, 65, 25, "Ok");
      Ok_curv->color((Fl_Color)94);
      Ok_curv->selection_color((Fl_Color)93);
      Ok_curv->callback((Fl_Callback*)cb_Ok_curv);
    } // Fl_Button* Ok_curv
    { curvature_computation_option = new Fl_Group(25, 16, 344, 98, "Compute :");
      curvature_computation_option->box(FL_BORDER_BOX);
      curvature_computation_option->color((Fl_Color)93);
      { cv_1 = new Fl_Round_Button(26, 16, 25, 25, "Principal maximal curvature");
        cv_1->type(102);
        cv_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* cv_1
      { cv_2 = new Fl_Round_Button(26, 36, 25, 25, "Principal minimal curvature");
        cv_2->type(102);
        cv_2->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* cv_2
      { cv_3 = new Fl_Round_Button(26, 57, 25, 25, "Gaussian curvature");
        cv_3->type(102);
        cv_3->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* cv_3
      { cv_4 = new Fl_Round_Button(26, 76, 25, 33, "Mean curvature");
        cv_4->type(102);
        cv_4->down_box(FL_ROUND_DOWN_BOX);
        cv_4->value(1);
      } // Fl_Round_Button* cv_4
      curvature_computation_option->end();
    } // Fl_Group* curvature_computation_option
    { Cancel_curv = new Fl_Button(198, 125, 65, 25, "Cancel");
      Cancel_curv->color((Fl_Color)133);
      Cancel_curv->selection_color((Fl_Color)132);
      Cancel_curv->callback((Fl_Callback*)cb_Cancel_curv);
    } // Fl_Button* Cancel_curv
    curvWindow->set_modal();
    curvWindow->end();
    curvWindow->resizable(curvWindow);
  } // Fl_Double_Window* curvWindow
  { deleteWindow = new Fl_Double_Window(256, 88, "Delete small objects");
    deleteWindow->color((Fl_Color)134);
    deleteWindow->user_data((void*)(this));
    { Triangles = new Fl_Value_Input(190, 10, 52, 25, "Min number of triangles");
      Triangles->value(10000);
      Triangles->align(Fl_Align(36));
    } // Fl_Value_Input* Triangles
    { Ok_delete = new Fl_Button(63, 51, 65, 25, "Ok");
      Ok_delete->color((Fl_Color)130);
      Ok_delete->selection_color((Fl_Color)128);
      Ok_delete->callback((Fl_Callback*)cb_Ok_delete);
    } // Fl_Button* Ok_delete
    { Cancel_delete = new Fl_Button(137, 51, 65, 25, "Cancel");
      Cancel_delete->color((Fl_Color)133);
      Cancel_delete->selection_color((Fl_Color)132);
      Cancel_delete->callback((Fl_Callback*)cb_Cancel_delete);
    } // Fl_Button* Cancel_delete
    deleteWindow->set_modal();
    deleteWindow->end();
    deleteWindow->resizable(deleteWindow);
  } // Fl_Double_Window* deleteWindow
  { deleteWindow2 = new Fl_Double_Window(256, 88, "Delete small objects");
    deleteWindow2->color((Fl_Color)93);
    deleteWindow2->user_data((void*)(this));
    { DeleteVolume = new Fl_Value_Input(190, 10, 52, 25, "Delete smaller than ... mm3");
      DeleteVolume->value(1000);
      DeleteVolume->align(Fl_Align(36));
    } // Fl_Value_Input* DeleteVolume
    { Ok_delete_small_volume = new Fl_Button(63, 51, 65, 25, "Ok");
      Ok_delete_small_volume->color((Fl_Color)90);
      Ok_delete_small_volume->selection_color(FL_RED);
      Ok_delete_small_volume->callback((Fl_Callback*)cb_Ok_delete_small_volume);
    } // Fl_Button* Ok_delete_small_volume
    { Cancel_volume_delete = new Fl_Button(137, 51, 65, 25, "Cancel");
      Cancel_volume_delete->color((Fl_Color)94);
      Cancel_volume_delete->selection_color((Fl_Color)92);
      Cancel_volume_delete->callback((Fl_Callback*)cb_Cancel_volume_delete);
    } // Fl_Button* Cancel_volume_delete
    deleteWindow2->set_modal();
    deleteWindow2->end();
    deleteWindow2->resizable(deleteWindow2);
  } // Fl_Double_Window* deleteWindow2
  { defWindow = new Fl_Double_Window(336, 146, "TPS Window");
    defWindow->color((Fl_Color)245);
    defWindow->user_data((void*)(this));
    { Def_percentage = new Fl_Value_Input(293, 37, 35, 25, "Deformation %:");
      Def_percentage->maximum(500);
      Def_percentage->step(1);
      Def_percentage->value(100);
    } // Fl_Value_Input* Def_percentage
    { tps_radio_buttons = new Fl_Group(45, 56, 120, 64, "Transformation basis");
      { U_1 = new Fl_Round_Button(46, 56, 25, 27, "U = r");
        U_1->type(102);
        U_1->down_box(FL_ROUND_DOWN_BOX);
        U_1->value(1);
      } // Fl_Round_Button* U_1
      { U_2 = new Fl_Round_Button(46, 79, 25, 19, "U= r\262log(r\262)");
        U_2->type(102);
        U_2->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* U_2
      tps_radio_buttons->end();
    } // Fl_Group* tps_radio_buttons
    { Okdef2 = new Fl_Button(120, 115, 54, 25, " Ok");
      Okdef2->color((Fl_Color)247);
      Okdef2->selection_color((Fl_Color)80);
      Okdef2->callback((Fl_Callback*)cb_Okdef2);
    } // Fl_Button* Okdef2
    { Canceldef = new Fl_Button(200, 115, 60, 25, "Cancel");
      Canceldef->color((Fl_Color)247);
      Canceldef->selection_color((Fl_Color)80);
      Canceldef->callback((Fl_Callback*)cb_Canceldef);
    } // Fl_Button* Canceldef
    defWindow->set_non_modal();
    defWindow->end();
    defWindow->resizable(defWindow);
  } // Fl_Double_Window* defWindow
  { LMcurveWindow = new Fl_Double_Window(328, 157, "Curve decimation");
    LMcurveWindow->color((Fl_Color)247);
    LMcurveWindow->user_data((void*)(this));
    { CUR_NR = new Fl_Value_Input(172, 5, 95, 30, "Landmark N\260 / Curve :");
      CUR_NR->value(20);
      CUR_NR->align(Fl_Align(36));
    } // Fl_Value_Input* CUR_NR
    { Ok_curve_landmark = new Fl_Button(140, 111, 65, 25, "Ok");
      Ok_curve_landmark->color((Fl_Color)245);
      Ok_curve_landmark->selection_color((Fl_Color)246);
      Ok_curve_landmark->callback((Fl_Callback*)cb_Ok_curve_landmark);
    } // Fl_Button* Ok_curve_landmark
    { LMK_GROUP_SAVE_OPTIONS3 = new Fl_Group(29, 48, 113, 58, "Save as :");
      LMK_GROUP_SAVE_OPTIONS3->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { LMK_VER3 = new Fl_Round_Button(39, 52, 102, 24, ".VER file ");
        LMK_VER3->type(102);
        LMK_VER3->down_box(FL_ROUND_DOWN_BOX);
        LMK_VER3->value(1);
      } // Fl_Round_Button* LMK_VER3
      { LMK_LMK3 = new Fl_Round_Button(39, 73, 102, 22, ".LMK file");
        LMK_LMK3->type(102);
        LMK_LMK3->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* LMK_LMK3
      LMK_GROUP_SAVE_OPTIONS3->end();
    } // Fl_Group* LMK_GROUP_SAVE_OPTIONS3
    LMcurveWindow->set_modal();
    LMcurveWindow->end();
    LMcurveWindow->resizable(LMcurveWindow);
  } // Fl_Double_Window* LMcurveWindow
  { movehandlesWindow = new Fl_Double_Window(256, 88, "Move Handles");
    movehandlesWindow->color((Fl_Color)91);
    movehandlesWindow->user_data((void*)(this));
    { MovementIntensity = new Fl_Value_Input(190, 10, 52, 25, "Movement intensity (%)");
      MovementIntensity->value(25);
      MovementIntensity->align(Fl_Align(36));
    } // Fl_Value_Input* MovementIntensity
    { Ok_move_handles = new Fl_Button(63, 51, 65, 25, "Ok");
      Ok_move_handles->color((Fl_Color)89);
      Ok_move_handles->selection_color((Fl_Color)80);
      Ok_move_handles->callback((Fl_Callback*)cb_Ok_move_handles);
    } // Fl_Button* Ok_move_handles
    { Cancel_move_handles = new Fl_Button(137, 51, 65, 25, "Cancel");
      Cancel_move_handles->color((Fl_Color)133);
      Cancel_move_handles->selection_color((Fl_Color)92);
      Cancel_move_handles->callback((Fl_Callback*)cb_Cancel_move_handles);
    } // Fl_Button* Cancel_move_handles
    movehandlesWindow->set_modal();
    movehandlesWindow->end();
    movehandlesWindow->resizable(movehandlesWindow);
  } // Fl_Double_Window* movehandlesWindow
  { STLSaveWindow = new Fl_Double_Window(289, 131, "STL save options");
    STLSaveWindow->color((Fl_Color)215);
    STLSaveWindow->user_data((void*)(this));
    { STL_T_RB = new Fl_Group(35, 25, 75, 61, "File type");
      { STL_T_0 = new Fl_Round_Button(35, 30, 64, 23, "Binary");
        STL_T_0->type(102);
        STL_T_0->down_box(FL_ROUND_DOWN_BOX);
        STL_T_0->value(1);
      } // Fl_Round_Button* STL_T_0
      { STL_T_1 = new Fl_Round_Button(35, 49, 65, 22, "ASCII");
        STL_T_1->type(102);
        STL_T_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* STL_T_1
      STL_T_RB->end();
    } // Fl_Group* STL_T_RB
    { STL_M_RB = new Fl_Group(132, 25, 113, 58, "Position");
      { STL_M_0 = new Fl_Round_Button(143, 30, 102, 24, "Keep original");
        STL_M_0->type(102);
        STL_M_0->down_box(FL_ROUND_DOWN_BOX);
        STL_M_0->value(1);
      } // Fl_Round_Button* STL_M_0
      { STL_M_1 = new Fl_Round_Button(143, 50, 102, 22, "Modified");
        STL_M_1->type(102);
        STL_M_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* STL_M_1
      STL_M_RB->end();
    } // Fl_Group* STL_M_RB
    { OkSTLSave = new Fl_Button(49, 85, 90, 25, "Save STL");
      OkSTLSave->color((Fl_Color)175);
      OkSTLSave->selection_color((Fl_Color)214);
      OkSTLSave->callback((Fl_Callback*)cb_OkSTLSave);
    } // Fl_Button* OkSTLSave
    { CancelSaveSTL = new Fl_Button(146, 86, 60, 25, "Cancel");
      CancelSaveSTL->color((Fl_Color)174);
      CancelSaveSTL->selection_color((Fl_Color)133);
      CancelSaveSTL->callback((Fl_Callback*)cb_CancelSaveSTL);
    } // Fl_Button* CancelSaveSTL
    STLSaveWindow->set_non_modal();
    STLSaveWindow->end();
    STLSaveWindow->resizable(STLSaveWindow);
  } // Fl_Double_Window* STLSaveWindow
  { VTKSaveWindow = new Fl_Double_Window(298, 132, "VTK save options");
    VTKSaveWindow->color((Fl_Color)215);
    VTKSaveWindow->user_data((void*)(this));
    { VTK_T_RB = new Fl_Group(35, 25, 75, 61, "File type");
      { VTK_T_0 = new Fl_Round_Button(35, 30, 64, 23, "Binary");
        VTK_T_0->type(102);
        VTK_T_0->down_box(FL_ROUND_DOWN_BOX);
        VTK_T_0->value(1);
      } // Fl_Round_Button* VTK_T_0
      { VTK_T_1 = new Fl_Round_Button(35, 49, 65, 22, "ASCII");
        VTK_T_1->type(102);
        VTK_T_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* VTK_T_1
      VTK_T_RB->end();
    } // Fl_Group* VTK_T_RB
    { VTK_M_RB = new Fl_Group(132, 25, 113, 58, "Position");
      { VTK_M_0 = new Fl_Round_Button(143, 30, 102, 24, "Keep original");
        VTK_M_0->type(102);
        VTK_M_0->down_box(FL_ROUND_DOWN_BOX);
        VTK_M_0->value(1);
      } // Fl_Round_Button* VTK_M_0
      { VTK_M_1 = new Fl_Round_Button(143, 50, 102, 22, "Modified");
        VTK_M_1->type(102);
        VTK_M_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* VTK_M_1
      VTK_M_RB->end();
    } // Fl_Group* VTK_M_RB
    { OkVTKSave = new Fl_Button(49, 85, 90, 25, "Save VTK");
      OkVTKSave->color((Fl_Color)175);
      OkVTKSave->selection_color((Fl_Color)214);
      OkVTKSave->callback((Fl_Callback*)cb_OkVTKSave);
    } // Fl_Button* OkVTKSave
    { CancelSaveVTK = new Fl_Button(146, 86, 60, 25, "Cancel");
      CancelSaveVTK->color((Fl_Color)174);
      CancelSaveVTK->selection_color((Fl_Color)133);
      CancelSaveVTK->callback((Fl_Callback*)cb_CancelSaveVTK);
    } // Fl_Button* CancelSaveVTK
    VTKSaveWindow->set_non_modal();
    VTKSaveWindow->end();
    VTKSaveWindow->resizable(VTKSaveWindow);
  } // Fl_Double_Window* VTKSaveWindow
  { OBJSaveWindow = new Fl_Double_Window(252, 126, "OBJ save options");
    OBJSaveWindow->color((Fl_Color)215);
    OBJSaveWindow->user_data((void*)(this));
    { OBJ_M_RB = new Fl_Group(45, 25, 113, 58, "Position");
      { OBJ_M_0 = new Fl_Round_Button(56, 30, 102, 24, "Keep original");
        OBJ_M_0->type(102);
        OBJ_M_0->down_box(FL_ROUND_DOWN_BOX);
        OBJ_M_0->value(1);
      } // Fl_Round_Button* OBJ_M_0
      { OBJ_M_1 = new Fl_Round_Button(56, 50, 102, 22, "Modified");
        OBJ_M_1->type(102);
        OBJ_M_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* OBJ_M_1
      OBJ_M_RB->end();
    } // Fl_Group* OBJ_M_RB
    { OkOBJSave = new Fl_Button(49, 85, 90, 25, "Save OBJ");
      OkOBJSave->color((Fl_Color)175);
      OkOBJSave->selection_color((Fl_Color)214);
      OkOBJSave->callback((Fl_Callback*)cb_OkOBJSave);
    } // Fl_Button* OkOBJSave
    { CancelSaveOBJ = new Fl_Button(146, 86, 60, 25, "Cancel");
      CancelSaveOBJ->color((Fl_Color)174);
      CancelSaveOBJ->selection_color((Fl_Color)133);
      CancelSaveOBJ->callback((Fl_Callback*)cb_CancelSaveOBJ);
    } // Fl_Button* CancelSaveOBJ
    OBJSaveWindow->set_non_modal();
    OBJSaveWindow->end();
    OBJSaveWindow->resizable(OBJSaveWindow);
  } // Fl_Double_Window* OBJSaveWindow
  { PLYSaveWindow = new Fl_Double_Window(439, 130, "PLY save options");
    PLYSaveWindow->color((Fl_Color)215);
    PLYSaveWindow->user_data((void*)(this));
    { PLY_T_RB = new Fl_Group(8, 25, 75, 71, "File type");
      { PLY_T_0 = new Fl_Round_Button(8, 30, 64, 23, "Binary litlle endian");
        PLY_T_0->type(102);
        PLY_T_0->down_box(FL_ROUND_DOWN_BOX);
        PLY_T_0->value(1);
      } // Fl_Round_Button* PLY_T_0
      { PLY_T_2 = new Fl_Round_Button(8, 68, 65, 22, "ASCII");
        PLY_T_2->type(102);
        PLY_T_2->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* PLY_T_2
      { PLY_T_1 = new Fl_Round_Button(8, 48, 65, 22, "Binary big endian");
        PLY_T_1->type(102);
        PLY_T_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* PLY_T_1
      PLY_T_RB->end();
    } // Fl_Group* PLY_T_RB
    { PLY_M_RB = new Fl_Group(143, 25, 113, 58, "Position");
      { PLY_M_0 = new Fl_Round_Button(154, 30, 102, 23, "Keep original");
        PLY_M_0->type(102);
        PLY_M_0->down_box(FL_ROUND_DOWN_BOX);
        PLY_M_0->value(1);
      } // Fl_Round_Button* PLY_M_0
      { PLY_M_1 = new Fl_Round_Button(154, 50, 102, 22, "Modified");
        PLY_M_1->type(102);
        PLY_M_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* PLY_M_1
      PLY_M_RB->end();
    } // Fl_Group* PLY_M_RB
    { PLY_N_RB = new Fl_Group(259, 25, 113, 58, "Normales");
      { PLY_N_0 = new Fl_Round_Button(270, 30, 102, 24, "Do not save normales");
        PLY_N_0->type(102);
        PLY_N_0->down_box(FL_ROUND_DOWN_BOX);
        PLY_N_0->value(1);
      } // Fl_Round_Button* PLY_N_0
      { PLY_N_1 = new Fl_Round_Button(270, 50, 102, 22, "Save normales");
        PLY_N_1->type(102);
        PLY_N_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* PLY_N_1
      PLY_N_RB->end();
    } // Fl_Group* PLY_N_RB
    { OkPLYSave = new Fl_Button(120, 100, 90, 25, "Save PLY");
      OkPLYSave->color((Fl_Color)175);
      OkPLYSave->selection_color((Fl_Color)214);
      OkPLYSave->callback((Fl_Callback*)cb_OkPLYSave);
    } // Fl_Button* OkPLYSave
    { CancelSavePLY = new Fl_Button(226, 100, 60, 25, "Cancel");
      CancelSavePLY->color((Fl_Color)174);
      CancelSavePLY->selection_color((Fl_Color)133);
      CancelSavePLY->callback((Fl_Callback*)cb_CancelSavePLY);
    } // Fl_Button* CancelSavePLY
    PLYSaveWindow->set_non_modal();
    PLYSaveWindow->end();
    PLYSaveWindow->resizable(PLYSaveWindow);
  } // Fl_Double_Window* PLYSaveWindow
  { decimateWindow = new Fl_Double_Window(381, 203, "Decimate");
    decimateWindow->color((Fl_Color)134);
    decimateWindow->user_data((void*)(this));
    { DCM_factor = new Fl_Value_Input(210, 115, 52, 30, "Decimation factor (%) :");
      DCM_factor->value(20);
      DCM_factor->align(Fl_Align(36));
    } // Fl_Value_Input* DCM_factor
    { Ok_decimate = new Fl_Button(60, 165, 65, 25, "Ok");
      Ok_decimate->color((Fl_Color)93);
      Ok_decimate->selection_color((Fl_Color)91);
      Ok_decimate->callback((Fl_Callback*)cb_Ok_decimate);
    } // Fl_Button* Ok_decimate
    { Cancel_decimate = new Fl_Button(185, 162, 65, 25, "Cancel");
      Cancel_decimate->color((Fl_Color)133);
      Cancel_decimate->selection_color((Fl_Color)132);
      Cancel_decimate->callback((Fl_Callback*)cb_Cancel_decimate);
    } // Fl_Button* Cancel_decimate
    { decimate_options = new Fl_Group(20, 30, 355, 70, "Decimation filter");
      decimate_options->box(FL_BORDER_BOX);
      decimate_options->color((Fl_Color)93);
      { dc_quadratic = new Fl_Round_Button(34, 45, 25, 25, "Quadratic decimation (usually performs better)");
        dc_quadratic->type(102);
        dc_quadratic->down_box(FL_ROUND_DOWN_BOX);
        dc_quadratic->value(1);
        dc_quadratic->callback((Fl_Callback*)cb_dc_quadratic);
      } // Fl_Round_Button* dc_quadratic
      { dc_pro = new Fl_Round_Button(34, 65, 25, 32, "Pro decimation");
        dc_pro->type(102);
        dc_pro->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* dc_pro
      decimate_options->end();
    } // Fl_Group* decimate_options
    decimateWindow->set_modal();
    decimateWindow->end();
    decimateWindow->resizable(decimateWindow);
  } // Fl_Double_Window* decimateWindow
  { LMKSaveNormal = new Fl_Double_Window(351, 189, "Save normal landmarks options");
    LMKSaveNormal->color((Fl_Color)215);
    LMKSaveNormal->user_data((void*)(this));
    { LMK_GROUP_SAVE_OPTIONS = new Fl_Group(7, 25, 113, 58, "Save as :");
      { LMK_VER = new Fl_Round_Button(17, 30, 102, 24, ".VER file ( xyz coordinates + landmark orientation)");
        LMK_VER->type(102);
        LMK_VER->down_box(FL_ROUND_DOWN_BOX);
        LMK_VER->value(1);
      } // Fl_Round_Button* LMK_VER
      { LMK_LMK = new Fl_Round_Button(17, 50, 102, 22, ".LMK file (xyz coordinates)");
        LMK_LMK->type(102);
        LMK_LMK->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* LMK_LMK
      LMK_GROUP_SAVE_OPTIONS->end();
    } // Fl_Group* LMK_GROUP_SAVE_OPTIONS
    { OkLMKSave1 = new Fl_Button(15, 105, 205, 25, "Save all landmarks");
      OkLMKSave1->color((Fl_Color)175);
      OkLMKSave1->selection_color((Fl_Color)214);
      OkLMKSave1->callback((Fl_Callback*)cb_OkLMKSave1);
    } // Fl_Button* OkLMKSave1
    { CancelSaveLMK = new Fl_Button(230, 120, 60, 25, "Cancel");
      CancelSaveLMK->color((Fl_Color)174);
      CancelSaveLMK->selection_color((Fl_Color)133);
      CancelSaveLMK->callback((Fl_Callback*)cb_CancelSaveLMK);
    } // Fl_Button* CancelSaveLMK
    { OkLMKSave2 = new Fl_Button(15, 130, 205, 25, "Save only selected landmarks");
      OkLMKSave2->color((Fl_Color)151);
      OkLMKSave2->selection_color((Fl_Color)214);
      OkLMKSave2->callback((Fl_Callback*)cb_OkLMKSave2);
    } // Fl_Button* OkLMKSave2
    LMKSaveNormal->set_non_modal();
    LMKSaveNormal->end();
    LMKSaveNormal->resizable(LMKSaveNormal);
  } // Fl_Double_Window* LMKSaveNormal
  { LMKSaveTarget = new Fl_Double_Window(366, 185, "Save target landmarks options");
    LMKSaveTarget->color((Fl_Color)215);
    LMKSaveTarget->user_data((void*)(this));
    { LMK_GROUP_SAVE_OPTIONS2 = new Fl_Group(7, 25, 113, 58, "Save as :");
      { LMK_VER2 = new Fl_Round_Button(17, 30, 102, 24, ".VER file ( xyz coordinates + landmark orientation)");
        LMK_VER2->type(102);
        LMK_VER2->down_box(FL_ROUND_DOWN_BOX);
        LMK_VER2->value(1);
      } // Fl_Round_Button* LMK_VER2
      { LMK_LMK2 = new Fl_Round_Button(17, 50, 102, 22, ".LMK file (xyz coordinates)");
        LMK_LMK2->type(102);
        LMK_LMK2->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* LMK_LMK2
      LMK_GROUP_SAVE_OPTIONS2->end();
    } // Fl_Group* LMK_GROUP_SAVE_OPTIONS2
    { OkLMKSave3 = new Fl_Button(15, 105, 205, 25, "Save landmarks");
      OkLMKSave3->color((Fl_Color)175);
      OkLMKSave3->selection_color((Fl_Color)214);
      OkLMKSave3->callback((Fl_Callback*)cb_OkLMKSave3);
    } // Fl_Button* OkLMKSave3
    { CancelSaveLMK2 = new Fl_Button(230, 120, 60, 25, "Cancel");
      CancelSaveLMK2->color((Fl_Color)174);
      CancelSaveLMK2->selection_color((Fl_Color)133);
      CancelSaveLMK2->callback((Fl_Callback*)cb_CancelSaveLMK2);
    } // Fl_Button* CancelSaveLMK2
    { OkLMKSave4 = new Fl_Button(15, 130, 205, 25, "Save only selected landmarks");
      OkLMKSave4->color((Fl_Color)151);
      OkLMKSave4->selection_color((Fl_Color)214);
      OkLMKSave4->callback((Fl_Callback*)cb_OkLMKSave4);
    } // Fl_Button* OkLMKSave4
    LMKSaveTarget->set_non_modal();
    LMKSaveTarget->end();
    LMKSaveTarget->resizable(LMKSaveTarget);
  } // Fl_Double_Window* LMKSaveTarget
  { scWindow = new Fl_Double_Window(497, 231, "Scalar rendering options");
    scWindow->color((Fl_Color)214);
    scWindow->user_data((void*)(this));
    { Ok_sc = new Fl_Button(140, 199, 65, 25, "Ok");
      Ok_sc->color((Fl_Color)215);
      Ok_sc->callback((Fl_Callback*)cb_Ok_sc);
    } // Fl_Button* Ok_sc
    { scmin = new Fl_Slider(35, 80, 310, 19, "min");
      scmin->type(5);
      scmin->color((Fl_Color)215);
      scmin->minimum(-2);
      scmin->maximum(0);
      scmin->step(0.01);
      scmin->value(-1);
      scmin->callback((Fl_Callback*)cb_scmin);
      scmin->align(Fl_Align(FL_ALIGN_LEFT));
      scmin->when(FL_WHEN_RELEASE);
    } // Fl_Slider* scmin
    { scmax = new Fl_Slider(35, 105, 310, 19, "max");
      scmax->type(5);
      scmax->color((Fl_Color)215);
      scmax->maximum(2);
      scmax->step(0.01);
      scmax->value(1);
      scmax->callback((Fl_Callback*)cb_scmax);
      scmax->align(Fl_Align(FL_ALIGN_LEFT));
      scmax->when(FL_WHEN_RELEASE);
    } // Fl_Slider* scmax
    { Min = new Fl_Value_Input(291, 134, 52, 25, "Scale min :");
      Min->align(Fl_Align(36));
    } // Fl_Value_Input* Min
    { Max = new Fl_Value_Input(291, 163, 52, 25, "Scale max :");
      Max->align(Fl_Align(36));
    } // Fl_Value_Input* Max
    { Min_sc = new Fl_Value_Input(113, 135, 70, 25, "Suggested min :");
    } // Fl_Value_Input* Min_sc
    { Max_sc = new Fl_Value_Input(113, 163, 70, 25, "Suggested max :");
    } // Fl_Value_Input* Max_sc
    { sc_active = new Fl_Choice(136, 8, 100, 23, "Chose active scalar");
      sc_active->down_box(FL_BORDER_BOX);
      sc_active->callback((Fl_Callback*)cb_sc_active);
    } // Fl_Choice* sc_active
    { sc_right_01 = new Fl_Button(185, 135, 30, 25);
      sc_right_01->color((Fl_Color)215);
      sc_right_01->image(image_s_right_132);
      sc_right_01->callback((Fl_Callback*)cb_sc_right_01);
    } // Fl_Button* sc_right_01
    { sc_right_02 = new Fl_Button(184, 162, 30, 25);
      sc_right_02->selection_color((Fl_Color)215);
      sc_right_02->image(image_s_right_132);
      sc_right_02->callback((Fl_Callback*)cb_sc_right_02);
    } // Fl_Button* sc_right_02
    { Ok_sc2 = new Fl_Button(240, 4, 70, 30, "Init scalar");
      Ok_sc2->tooltip("Set current scalar values to 0 for all selected objects");
      Ok_sc2->color((Fl_Color)215);
      Ok_sc2->callback((Fl_Callback*)cb_Ok_sc2);
    } // Fl_Button* Ok_sc2
    { Ok_sc3 = new Fl_Button(315, 5, 102, 30, "Remove scalar");
      Ok_sc3->tooltip("Remove this scalar for all selected objects");
      Ok_sc3->color((Fl_Color)215);
      Ok_sc3->callback((Fl_Callback*)cb_Ok_sc3);
    } // Fl_Button* Ok_sc3
    { sc_cs = new Fl_Choice(136, 41, 100, 23, "Chose colour scale");
      sc_cs->down_box(FL_BORDER_BOX);
      sc_cs->callback((Fl_Callback*)cb_sc_cs);
    } // Fl_Choice* sc_cs
    { above_Max = new Fl_Check_Button(358, 106, 64, 15, "Show above max");
      above_Max->down_box(FL_DOWN_BOX);
      above_Max->value(1);
      above_Max->callback((Fl_Callback*)cb_above_Max);
    } // Fl_Check_Button* above_Max
    { below_Min = new Fl_Check_Button(358, 84, 64, 15, "Show below min");
      below_Min->down_box(FL_DOWN_BOX);
      below_Min->value(1);
      below_Min->callback((Fl_Callback*)cb_below_Min);
    } // Fl_Check_Button* below_Min
    scWindow->set_non_modal();
    scWindow->end();
    scWindow->resizable(scWindow);
  } // Fl_Double_Window* scWindow
  { thicknessWindow = new Fl_Double_Window(229, 125, "Thickness Scalar");
    thicknessWindow->color((Fl_Color)134);
    thicknessWindow->user_data((void*)(this));
    { Ok_thickness = new Fl_Button(62, 90, 65, 25, "Ok");
      Ok_thickness->color((Fl_Color)93);
      Ok_thickness->selection_color((Fl_Color)91);
      Ok_thickness->callback((Fl_Callback*)cb_Ok_thickness);
    } // Fl_Button* Ok_thickness
    { Thickness_Max_Distance = new Fl_Value_Input(165, 17, 52, 25, "Maximal thickness (mm) :");
      Thickness_Max_Distance->value(2);
      Thickness_Max_Distance->align(Fl_Align(36));
    } // Fl_Value_Input* Thickness_Max_Distance
    { Cancel_th = new Fl_Button(139, 90, 65, 25, "Cancel");
      Cancel_th->color((Fl_Color)133);
      Cancel_th->selection_color((Fl_Color)132);
      Cancel_th->callback((Fl_Callback*)cb_Cancel_th);
    } // Fl_Button* Cancel_th
    thicknessWindow->set_modal();
    thicknessWindow->end();
    thicknessWindow->resizable(thicknessWindow);
  } // Fl_Double_Window* thicknessWindow
  { tagsWindow = new Fl_Double_Window(579, 655, "Tag options");
    tagsWindow->color((Fl_Color)215);
    tagsWindow->user_data((void*)(this));
    { Ok_tags = new Fl_Button(187, 600, 65, 25, "Ok");
      Ok_tags->color(FL_YELLOW);
      Ok_tags->selection_color((Fl_Color)94);
      Ok_tags->callback((Fl_Callback*)cb_Ok_tags);
    } // Fl_Button* Ok_tags
    { init_tags = new Fl_Button(262, 600, 130, 25, "Reinit tags");
      init_tags->color(FL_YELLOW);
      init_tags->selection_color((Fl_Color)94);
      init_tags->callback((Fl_Callback*)cb_init_tags);
    } // Fl_Button* init_tags
    { TAG_TOOLS_OPTIONS = new Fl_Group(25, 435, 525, 62, "Tag tools");
      TAG_TOOLS_OPTIONS->box(FL_BORDER_BOX);
      TAG_TOOLS_OPTIONS->color((Fl_Color)175);
      { Pencil_Tag_level = new Fl_Value_Input(82, 446, 52, 21, "Pencil tag size");
        Pencil_Tag_level->tooltip("Chose");
        Pencil_Tag_level->value(3);
        Pencil_Tag_level->callback((Fl_Callback*)cb_Pencil_Tag_level);
        Pencil_Tag_level->align(Fl_Align(34));
      } // Fl_Value_Input* Pencil_Tag_level
      { Magic_Wand_Limit = new Fl_Value_Slider(215, 448, 155, 20, "Magic wand limit angle");
        Magic_Wand_Limit->tooltip("Chose magic wand maximal angle");
        Magic_Wand_Limit->type(1);
        Magic_Wand_Limit->color((Fl_Color)94);
        Magic_Wand_Limit->selection_color(FL_RED);
        Magic_Wand_Limit->maximum(180);
        Magic_Wand_Limit->step(1);
        Magic_Wand_Limit->value(45);
        Magic_Wand_Limit->textsize(14);
        Magic_Wand_Limit->callback((Fl_Callback*)cb_Magic_Wand_Limit);
      } // Fl_Value_Slider* Magic_Wand_Limit
      { Magic_Wand_Override = new Fl_Check_Button(466, 447, 20, 15, "Allow colour override");
        Magic_Wand_Override->down_box(FL_DOWN_BOX);
        Magic_Wand_Override->value(1);
        Magic_Wand_Override->callback((Fl_Callback*)cb_Magic_Wand_Override);
        Magic_Wand_Override->align(Fl_Align(FL_ALIGN_BOTTOM));
      } // Fl_Check_Button* Magic_Wand_Override
      TAG_TOOLS_OPTIONS->end();
    } // Fl_Group* TAG_TOOLS_OPTIONS
    { Extract_Delete_Group = new Fl_Group(30, 526, 524, 65, "Tag extraction / deletion");
      Extract_Delete_Group->box(FL_BORDER_BOX);
      Extract_Delete_Group->color((Fl_Color)175);
      { Extraction_text = new Fl_Input(177, 535, 15, 10, "For a given triangle:");
        Extraction_text->box(FL_NO_BOX);
      } // Fl_Input* Extraction_text
      { rb_extract00 = new Fl_Round_Button(40, 550, 20, 16, "All points must satisfy condition(s)");
        rb_extract00->type(102);
        rb_extract00->down_box(FL_ROUND_DOWN_BOX);
        rb_extract00->value(1);
        rb_extract00->callback((Fl_Callback*)cb_rb_extract00);
      } // Fl_Round_Button* rb_extract00
      { rb_extract01 = new Fl_Round_Button(40, 570, 20, 16, "One point must satisfy condition(s)");
        rb_extract01->type(102);
        rb_extract01->down_box(FL_ROUND_DOWN_BOX);
        rb_extract01->callback((Fl_Callback*)cb_rb_extract01);
      } // Fl_Round_Button* rb_extract01
      Extract_Delete_Group->end();
    } // Fl_Group* Extract_Delete_Group
    { Tags_group = new Fl_Scroll(20, 20, 540, 400, "Define tag labels, colours and transparency");
      Tags_group->type(6);
      Tags_group->box(FL_BORDER_BOX);
      Tags_group->color((Fl_Color)174);
      { Label_tag_group = new Fl_Group(37, 66, 211, 589, "                     Labels");
        Label_tag_group->color((Fl_Color)94);
        Label_tag_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { Tag_text_00 = new Fl_Input(39, 66, 200, 23);
          Tag_text_00->callback((Fl_Callback*)cb_Tag_text_00);
        } // Fl_Input* Tag_text_00
        { Tag_text_01 = new Fl_Input(39, 89, 200, 23);
          Tag_text_01->callback((Fl_Callback*)cb_Tag_text_01);
        } // Fl_Input* Tag_text_01
        { Tag_text_02 = new Fl_Input(39, 112, 200, 23);
          Tag_text_02->callback((Fl_Callback*)cb_Tag_text_02);
        } // Fl_Input* Tag_text_02
        { Tag_text_03 = new Fl_Input(39, 135, 200, 23);
          Tag_text_03->callback((Fl_Callback*)cb_Tag_text_03);
        } // Fl_Input* Tag_text_03
        { Tag_text_04 = new Fl_Input(39, 158, 200, 23);
          Tag_text_04->callback((Fl_Callback*)cb_Tag_text_04);
        } // Fl_Input* Tag_text_04
        { Tag_text_05 = new Fl_Input(39, 181, 200, 23);
          Tag_text_05->callback((Fl_Callback*)cb_Tag_text_05);
        } // Fl_Input* Tag_text_05
        { Tag_text_06 = new Fl_Input(39, 204, 200, 23);
          Tag_text_06->callback((Fl_Callback*)cb_Tag_text_06);
        } // Fl_Input* Tag_text_06
        { Tag_text_07 = new Fl_Input(39, 227, 200, 23);
          Tag_text_07->callback((Fl_Callback*)cb_Tag_text_07);
        } // Fl_Input* Tag_text_07
        { Tag_text_08 = new Fl_Input(39, 250, 200, 23);
          Tag_text_08->callback((Fl_Callback*)cb_Tag_text_08);
        } // Fl_Input* Tag_text_08
        { Tag_text_09 = new Fl_Input(39, 273, 200, 23);
          Tag_text_09->callback((Fl_Callback*)cb_Tag_text_09);
        } // Fl_Input* Tag_text_09
        { Tag_text_10 = new Fl_Input(39, 296, 200, 23);
          Tag_text_10->callback((Fl_Callback*)cb_Tag_text_10);
        } // Fl_Input* Tag_text_10
        { Tag_text_11 = new Fl_Input(39, 319, 200, 23);
          Tag_text_11->callback((Fl_Callback*)cb_Tag_text_11);
        } // Fl_Input* Tag_text_11
        { Tag_text_12 = new Fl_Input(39, 342, 200, 23);
          Tag_text_12->callback((Fl_Callback*)cb_Tag_text_12);
        } // Fl_Input* Tag_text_12
        { Tag_text_13 = new Fl_Input(39, 365, 200, 23);
          Tag_text_13->callback((Fl_Callback*)cb_Tag_text_13);
        } // Fl_Input* Tag_text_13
        { Tag_text_14 = new Fl_Input(39, 388, 200, 23);
          Tag_text_14->callback((Fl_Callback*)cb_Tag_text_14);
        } // Fl_Input* Tag_text_14
        { Tag_text_15 = new Fl_Input(39, 411, 200, 23);
          Tag_text_15->callback((Fl_Callback*)cb_Tag_text_15);
        } // Fl_Input* Tag_text_15
        { Tag_text_16 = new Fl_Input(39, 434, 200, 23);
          Tag_text_16->callback((Fl_Callback*)cb_Tag_text_16);
        } // Fl_Input* Tag_text_16
        { Tag_text_17 = new Fl_Input(39, 457, 200, 23);
          Tag_text_17->callback((Fl_Callback*)cb_Tag_text_17);
        } // Fl_Input* Tag_text_17
        { Tag_text_18 = new Fl_Input(39, 480, 200, 23);
          Tag_text_18->callback((Fl_Callback*)cb_Tag_text_18);
        } // Fl_Input* Tag_text_18
        { Tag_text_19 = new Fl_Input(39, 503, 200, 23);
          Tag_text_19->callback((Fl_Callback*)cb_Tag_text_19);
        } // Fl_Input* Tag_text_19
        { Tag_text_20 = new Fl_Input(39, 526, 200, 23);
          Tag_text_20->callback((Fl_Callback*)cb_Tag_text_20);
        } // Fl_Input* Tag_text_20
        { Tag_text_21 = new Fl_Input(39, 549, 200, 23);
          Tag_text_21->callback((Fl_Callback*)cb_Tag_text_21);
        } // Fl_Input* Tag_text_21
        { Tag_text_22 = new Fl_Input(39, 572, 200, 23);
          Tag_text_22->callback((Fl_Callback*)cb_Tag_text_22);
        } // Fl_Input* Tag_text_22
        { Tag_text_23 = new Fl_Input(39, 595, 200, 23);
          Tag_text_23->callback((Fl_Callback*)cb_Tag_text_23);
        } // Fl_Input* Tag_text_23
        { Tag_text_24 = new Fl_Input(39, 618, 200, 23);
          Tag_text_24->callback((Fl_Callback*)cb_Tag_text_24);
        } // Fl_Input* Tag_text_24
        Label_tag_group->end();
      } // Fl_Group* Label_tag_group
      { Active_tag_group = new Fl_Group(220, 66, 45, 589, "Active tag");
        Active_tag_group->color((Fl_Color)94);
        Active_tag_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { rb_tag00 = new Fl_Round_Button(244, 67, 20, 23);
          rb_tag00->type(102);
          rb_tag00->down_box(FL_ROUND_DOWN_BOX);
          rb_tag00->callback((Fl_Callback*)cb_rb_tag00);
        } // Fl_Round_Button* rb_tag00
        { rb_tag01 = new Fl_Round_Button(244, 90, 20, 23);
          rb_tag01->type(102);
          rb_tag01->down_box(FL_ROUND_DOWN_BOX);
          rb_tag01->value(1);
          rb_tag01->callback((Fl_Callback*)cb_rb_tag01);
        } // Fl_Round_Button* rb_tag01
        { rb_tag02 = new Fl_Round_Button(244, 113, 20, 23);
          rb_tag02->type(102);
          rb_tag02->down_box(FL_ROUND_DOWN_BOX);
          rb_tag02->callback((Fl_Callback*)cb_rb_tag02);
        } // Fl_Round_Button* rb_tag02
        { rb_tag03 = new Fl_Round_Button(244, 136, 20, 23);
          rb_tag03->type(102);
          rb_tag03->down_box(FL_ROUND_DOWN_BOX);
          rb_tag03->callback((Fl_Callback*)cb_rb_tag03);
        } // Fl_Round_Button* rb_tag03
        { rb_tag04 = new Fl_Round_Button(244, 159, 20, 23);
          rb_tag04->type(102);
          rb_tag04->down_box(FL_ROUND_DOWN_BOX);
          rb_tag04->callback((Fl_Callback*)cb_rb_tag04);
        } // Fl_Round_Button* rb_tag04
        { rb_tag05 = new Fl_Round_Button(244, 182, 20, 23);
          rb_tag05->type(102);
          rb_tag05->down_box(FL_ROUND_DOWN_BOX);
          rb_tag05->callback((Fl_Callback*)cb_rb_tag05);
        } // Fl_Round_Button* rb_tag05
        { rb_tag06 = new Fl_Round_Button(244, 205, 20, 23);
          rb_tag06->type(102);
          rb_tag06->down_box(FL_ROUND_DOWN_BOX);
          rb_tag06->callback((Fl_Callback*)cb_rb_tag06);
        } // Fl_Round_Button* rb_tag06
        { rb_tag07 = new Fl_Round_Button(244, 228, 20, 23);
          rb_tag07->type(102);
          rb_tag07->down_box(FL_ROUND_DOWN_BOX);
          rb_tag07->callback((Fl_Callback*)cb_rb_tag07);
        } // Fl_Round_Button* rb_tag07
        { rb_tag08 = new Fl_Round_Button(244, 251, 20, 23);
          rb_tag08->type(102);
          rb_tag08->down_box(FL_ROUND_DOWN_BOX);
          rb_tag08->callback((Fl_Callback*)cb_rb_tag08);
        } // Fl_Round_Button* rb_tag08
        { rb_tag09 = new Fl_Round_Button(244, 274, 20, 23);
          rb_tag09->type(102);
          rb_tag09->down_box(FL_ROUND_DOWN_BOX);
          rb_tag09->callback((Fl_Callback*)cb_rb_tag09);
        } // Fl_Round_Button* rb_tag09
        { rb_tag10 = new Fl_Round_Button(244, 297, 20, 23);
          rb_tag10->type(102);
          rb_tag10->down_box(FL_ROUND_DOWN_BOX);
          rb_tag10->callback((Fl_Callback*)cb_rb_tag10);
        } // Fl_Round_Button* rb_tag10
        { rb_tag11 = new Fl_Round_Button(244, 320, 20, 23);
          rb_tag11->type(102);
          rb_tag11->down_box(FL_ROUND_DOWN_BOX);
          rb_tag11->callback((Fl_Callback*)cb_rb_tag11);
        } // Fl_Round_Button* rb_tag11
        { rb_tag12 = new Fl_Round_Button(244, 343, 20, 23);
          rb_tag12->type(102);
          rb_tag12->down_box(FL_ROUND_DOWN_BOX);
          rb_tag12->callback((Fl_Callback*)cb_rb_tag12);
        } // Fl_Round_Button* rb_tag12
        { rb_tag13 = new Fl_Round_Button(244, 366, 20, 23);
          rb_tag13->type(102);
          rb_tag13->down_box(FL_ROUND_DOWN_BOX);
          rb_tag13->callback((Fl_Callback*)cb_rb_tag13);
        } // Fl_Round_Button* rb_tag13
        { rb_tag14 = new Fl_Round_Button(244, 389, 20, 23);
          rb_tag14->type(102);
          rb_tag14->down_box(FL_ROUND_DOWN_BOX);
          rb_tag14->callback((Fl_Callback*)cb_rb_tag14);
        } // Fl_Round_Button* rb_tag14
        { rb_tag15 = new Fl_Round_Button(244, 412, 20, 23);
          rb_tag15->type(102);
          rb_tag15->down_box(FL_ROUND_DOWN_BOX);
          rb_tag15->callback((Fl_Callback*)cb_rb_tag15);
        } // Fl_Round_Button* rb_tag15
        { rb_tag16 = new Fl_Round_Button(244, 435, 20, 23);
          rb_tag16->type(102);
          rb_tag16->down_box(FL_ROUND_DOWN_BOX);
          rb_tag16->callback((Fl_Callback*)cb_rb_tag16);
        } // Fl_Round_Button* rb_tag16
        { rb_tag17 = new Fl_Round_Button(244, 458, 20, 23);
          rb_tag17->type(102);
          rb_tag17->down_box(FL_ROUND_DOWN_BOX);
          rb_tag17->callback((Fl_Callback*)cb_rb_tag17);
        } // Fl_Round_Button* rb_tag17
        { rb_tag18 = new Fl_Round_Button(244, 481, 20, 23);
          rb_tag18->type(102);
          rb_tag18->down_box(FL_ROUND_DOWN_BOX);
          rb_tag18->callback((Fl_Callback*)cb_rb_tag18);
        } // Fl_Round_Button* rb_tag18
        { rb_tag19 = new Fl_Round_Button(244, 504, 20, 23);
          rb_tag19->type(102);
          rb_tag19->down_box(FL_ROUND_DOWN_BOX);
          rb_tag19->callback((Fl_Callback*)cb_rb_tag19);
        } // Fl_Round_Button* rb_tag19
        { rb_tag20 = new Fl_Round_Button(244, 527, 20, 23);
          rb_tag20->type(102);
          rb_tag20->down_box(FL_ROUND_DOWN_BOX);
          rb_tag20->callback((Fl_Callback*)cb_rb_tag20);
        } // Fl_Round_Button* rb_tag20
        { rb_tag21 = new Fl_Round_Button(244, 550, 20, 23);
          rb_tag21->type(102);
          rb_tag21->down_box(FL_ROUND_DOWN_BOX);
          rb_tag21->callback((Fl_Callback*)cb_rb_tag21);
        } // Fl_Round_Button* rb_tag21
        { rb_tag22 = new Fl_Round_Button(244, 573, 20, 23);
          rb_tag22->type(102);
          rb_tag22->down_box(FL_ROUND_DOWN_BOX);
          rb_tag22->callback((Fl_Callback*)cb_rb_tag22);
        } // Fl_Round_Button* rb_tag22
        { rb_tag23 = new Fl_Round_Button(244, 596, 20, 23);
          rb_tag23->type(102);
          rb_tag23->down_box(FL_ROUND_DOWN_BOX);
          rb_tag23->callback((Fl_Callback*)cb_rb_tag23);
        } // Fl_Round_Button* rb_tag23
        { rb_tag24 = new Fl_Round_Button(244, 619, 21, 23);
          rb_tag24->type(102);
          rb_tag24->down_box(FL_ROUND_DOWN_BOX);
          rb_tag24->callback((Fl_Callback*)cb_rb_tag24);
        } // Fl_Round_Button* rb_tag24
        Active_tag_group->end();
      } // Fl_Group* Active_tag_group
      { Alpha_group = new Fl_Group(382, 66, 35, 589, "Alpha");
        Alpha_group->color((Fl_Color)94);
        Alpha_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { Alpha_00 = new Fl_Value_Input(387, 66, 30, 22);
          Alpha_00->callback((Fl_Callback*)cb_Alpha_00);
        } // Fl_Value_Input* Alpha_00
        { Alpha_01 = new Fl_Value_Input(387, 88, 30, 23);
          Alpha_01->callback((Fl_Callback*)cb_Alpha_01);
        } // Fl_Value_Input* Alpha_01
        { Alpha_02 = new Fl_Value_Input(387, 111, 30, 23);
          Alpha_02->callback((Fl_Callback*)cb_Alpha_02);
        } // Fl_Value_Input* Alpha_02
        { Alpha_03 = new Fl_Value_Input(387, 134, 30, 23);
          Alpha_03->callback((Fl_Callback*)cb_Alpha_03);
        } // Fl_Value_Input* Alpha_03
        { Alpha_04 = new Fl_Value_Input(387, 157, 30, 23);
          Alpha_04->callback((Fl_Callback*)cb_Alpha_04);
        } // Fl_Value_Input* Alpha_04
        { Alpha_05 = new Fl_Value_Input(387, 180, 30, 23);
          Alpha_05->callback((Fl_Callback*)cb_Alpha_05);
        } // Fl_Value_Input* Alpha_05
        { Alpha_06 = new Fl_Value_Input(387, 203, 30, 23);
          Alpha_06->callback((Fl_Callback*)cb_Alpha_06);
        } // Fl_Value_Input* Alpha_06
        { Alpha_07 = new Fl_Value_Input(387, 226, 30, 23);
          Alpha_07->callback((Fl_Callback*)cb_Alpha_07);
        } // Fl_Value_Input* Alpha_07
        { Alpha_08 = new Fl_Value_Input(387, 249, 30, 23);
          Alpha_08->callback((Fl_Callback*)cb_Alpha_08);
        } // Fl_Value_Input* Alpha_08
        { Alpha_09 = new Fl_Value_Input(387, 272, 30, 23);
          Alpha_09->callback((Fl_Callback*)cb_Alpha_09);
        } // Fl_Value_Input* Alpha_09
        { Alpha_10 = new Fl_Value_Input(387, 295, 30, 23);
          Alpha_10->callback((Fl_Callback*)cb_Alpha_10);
        } // Fl_Value_Input* Alpha_10
        { Alpha_11 = new Fl_Value_Input(387, 318, 30, 23);
          Alpha_11->callback((Fl_Callback*)cb_Alpha_11);
        } // Fl_Value_Input* Alpha_11
        { Alpha_12 = new Fl_Value_Input(387, 341, 30, 23);
          Alpha_12->callback((Fl_Callback*)cb_Alpha_12);
        } // Fl_Value_Input* Alpha_12
        { Alpha_13 = new Fl_Value_Input(387, 364, 30, 23);
          Alpha_13->callback((Fl_Callback*)cb_Alpha_13);
        } // Fl_Value_Input* Alpha_13
        { Alpha_14 = new Fl_Value_Input(387, 387, 30, 23);
          Alpha_14->callback((Fl_Callback*)cb_Alpha_14);
        } // Fl_Value_Input* Alpha_14
        { Alpha_15 = new Fl_Value_Input(387, 410, 30, 23);
          Alpha_15->callback((Fl_Callback*)cb_Alpha_15);
        } // Fl_Value_Input* Alpha_15
        { Alpha_16 = new Fl_Value_Input(387, 433, 30, 23);
          Alpha_16->callback((Fl_Callback*)cb_Alpha_16);
        } // Fl_Value_Input* Alpha_16
        { Alpha_17 = new Fl_Value_Input(387, 456, 30, 23);
          Alpha_17->callback((Fl_Callback*)cb_Alpha_17);
        } // Fl_Value_Input* Alpha_17
        { Alpha_18 = new Fl_Value_Input(387, 479, 30, 23);
          Alpha_18->callback((Fl_Callback*)cb_Alpha_18);
        } // Fl_Value_Input* Alpha_18
        { Alpha_19 = new Fl_Value_Input(387, 502, 30, 23);
          Alpha_19->callback((Fl_Callback*)cb_Alpha_19);
        } // Fl_Value_Input* Alpha_19
        { Alpha_20 = new Fl_Value_Input(387, 525, 30, 23);
          Alpha_20->callback((Fl_Callback*)cb_Alpha_20);
        } // Fl_Value_Input* Alpha_20
        { Alpha_21 = new Fl_Value_Input(387, 549, 30, 23);
          Alpha_21->callback((Fl_Callback*)cb_Alpha_21);
        } // Fl_Value_Input* Alpha_21
        { Alpha_22 = new Fl_Value_Input(387, 573, 30, 23);
          Alpha_22->callback((Fl_Callback*)cb_Alpha_22);
        } // Fl_Value_Input* Alpha_22
        { Alpha_23 = new Fl_Value_Input(387, 595, 30, 23);
          Alpha_23->callback((Fl_Callback*)cb_Alpha_23);
        } // Fl_Value_Input* Alpha_23
        { Alpha_24 = new Fl_Value_Input(387, 618, 30, 25);
          Alpha_24->callback((Fl_Callback*)cb_Alpha_24);
        } // Fl_Value_Input* Alpha_24
        Alpha_group->end();
      } // Fl_Group* Alpha_group
      { Tag_color_group = new Fl_Group(274, 66, 111, 589, "          Colour");
        Tag_color_group->color((Fl_Color)94);
        Tag_color_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { Tag_00 = new Fl_Button(274, 66, 111, 23, "Tag 00");
          Tag_00->color((Fl_Color)46);
          Tag_00->labelcolor(FL_GRAY0);
          Tag_00->callback((Fl_Callback*)cb_Tag_00);
        } // Fl_Button* Tag_00
        { Tag_01 = new Fl_Button(274, 89, 111, 23, "Tag 01");
          Tag_01->color((Fl_Color)46);
          Tag_01->labelcolor(FL_GRAY0);
          Tag_01->callback((Fl_Callback*)cb_Tag_01);
        } // Fl_Button* Tag_01
        { Tag_02 = new Fl_Button(274, 112, 111, 23, "Tag 02");
          Tag_02->color((Fl_Color)46);
          Tag_02->labelcolor(FL_GRAY0);
          Tag_02->callback((Fl_Callback*)cb_Tag_02);
        } // Fl_Button* Tag_02
        { Tag_03 = new Fl_Button(274, 135, 111, 23, "Tag 03");
          Tag_03->color((Fl_Color)46);
          Tag_03->labelcolor(FL_GRAY0);
          Tag_03->callback((Fl_Callback*)cb_Tag_03);
        } // Fl_Button* Tag_03
        { Tag_04 = new Fl_Button(274, 158, 111, 23, "Tag 04");
          Tag_04->color((Fl_Color)46);
          Tag_04->labelcolor(FL_GRAY0);
          Tag_04->callback((Fl_Callback*)cb_Tag_04);
        } // Fl_Button* Tag_04
        { Tag_05 = new Fl_Button(274, 181, 111, 23, "Tag 05");
          Tag_05->color((Fl_Color)46);
          Tag_05->labelcolor(FL_GRAY0);
          Tag_05->callback((Fl_Callback*)cb_Tag_05);
        } // Fl_Button* Tag_05
        { Tag_06 = new Fl_Button(274, 204, 111, 23, "Tag 06");
          Tag_06->color((Fl_Color)46);
          Tag_06->labelcolor(FL_GRAY0);
          Tag_06->callback((Fl_Callback*)cb_Tag_06);
        } // Fl_Button* Tag_06
        { Tag_07 = new Fl_Button(274, 227, 111, 23, "Tag 07");
          Tag_07->color((Fl_Color)46);
          Tag_07->labelcolor(FL_GRAY0);
          Tag_07->callback((Fl_Callback*)cb_Tag_07);
        } // Fl_Button* Tag_07
        { Tag_08 = new Fl_Button(274, 250, 111, 23, "Tag 08");
          Tag_08->color((Fl_Color)46);
          Tag_08->labelcolor(FL_GRAY0);
          Tag_08->callback((Fl_Callback*)cb_Tag_08);
        } // Fl_Button* Tag_08
        { Tag_09 = new Fl_Button(274, 273, 111, 23, "Tag 09");
          Tag_09->color((Fl_Color)46);
          Tag_09->labelcolor(FL_GRAY0);
          Tag_09->callback((Fl_Callback*)cb_Tag_09);
        } // Fl_Button* Tag_09
        { Tag_10 = new Fl_Button(274, 296, 111, 23, "Tag 10");
          Tag_10->color((Fl_Color)46);
          Tag_10->labelcolor(FL_GRAY0);
          Tag_10->callback((Fl_Callback*)cb_Tag_10);
        } // Fl_Button* Tag_10
        { Tag_11 = new Fl_Button(274, 319, 111, 23, "Tag 11");
          Tag_11->color((Fl_Color)46);
          Tag_11->labelcolor(FL_GRAY0);
          Tag_11->callback((Fl_Callback*)cb_Tag_11);
        } // Fl_Button* Tag_11
        { Tag_12 = new Fl_Button(274, 342, 111, 23, "Tag 12");
          Tag_12->color((Fl_Color)46);
          Tag_12->labelcolor(FL_GRAY0);
          Tag_12->callback((Fl_Callback*)cb_Tag_12);
        } // Fl_Button* Tag_12
        { Tag_13 = new Fl_Button(274, 365, 111, 23, "Tag 13");
          Tag_13->color((Fl_Color)46);
          Tag_13->labelcolor(FL_GRAY0);
          Tag_13->callback((Fl_Callback*)cb_Tag_13);
        } // Fl_Button* Tag_13
        { Tag_14 = new Fl_Button(274, 388, 111, 23, "Tag 14");
          Tag_14->color((Fl_Color)46);
          Tag_14->labelcolor(FL_GRAY0);
          Tag_14->callback((Fl_Callback*)cb_Tag_14);
        } // Fl_Button* Tag_14
        { Tag_15 = new Fl_Button(274, 411, 111, 23, "Tag 15");
          Tag_15->color((Fl_Color)46);
          Tag_15->labelcolor(FL_GRAY0);
          Tag_15->callback((Fl_Callback*)cb_Tag_15);
        } // Fl_Button* Tag_15
        { Tag_16 = new Fl_Button(274, 434, 111, 23, "Tag 16");
          Tag_16->color((Fl_Color)46);
          Tag_16->labelcolor(FL_GRAY0);
          Tag_16->callback((Fl_Callback*)cb_Tag_16);
        } // Fl_Button* Tag_16
        { Tag_17 = new Fl_Button(274, 457, 111, 23, "Tag 17");
          Tag_17->color((Fl_Color)46);
          Tag_17->labelcolor(FL_GRAY0);
          Tag_17->callback((Fl_Callback*)cb_Tag_17);
        } // Fl_Button* Tag_17
        { Tag_18 = new Fl_Button(274, 480, 111, 23, "Tag 18");
          Tag_18->color((Fl_Color)46);
          Tag_18->labelcolor(FL_GRAY0);
          Tag_18->callback((Fl_Callback*)cb_Tag_18);
        } // Fl_Button* Tag_18
        { Tag_19 = new Fl_Button(274, 503, 111, 23, "Tag 19");
          Tag_19->color((Fl_Color)46);
          Tag_19->labelcolor(FL_GRAY0);
          Tag_19->callback((Fl_Callback*)cb_Tag_19);
        } // Fl_Button* Tag_19
        { Tag_20 = new Fl_Button(274, 526, 111, 23, "Tag 20");
          Tag_20->color((Fl_Color)46);
          Tag_20->labelcolor(FL_GRAY0);
          Tag_20->callback((Fl_Callback*)cb_Tag_20);
        } // Fl_Button* Tag_20
        { Tag_21 = new Fl_Button(274, 549, 111, 23, "Tag 21");
          Tag_21->color((Fl_Color)46);
          Tag_21->labelcolor(FL_GRAY0);
          Tag_21->callback((Fl_Callback*)cb_Tag_21);
        } // Fl_Button* Tag_21
        { Tag_22 = new Fl_Button(274, 572, 111, 23, "Tag 22");
          Tag_22->color((Fl_Color)46);
          Tag_22->labelcolor(FL_GRAY0);
          Tag_22->callback((Fl_Callback*)cb_Tag_22);
        } // Fl_Button* Tag_22
        { Tag_23 = new Fl_Button(274, 595, 111, 23, "Tag 23");
          Tag_23->color((Fl_Color)46);
          Tag_23->labelcolor(FL_GRAY0);
          Tag_23->callback((Fl_Callback*)cb_Tag_23);
        } // Fl_Button* Tag_23
        { Tag_24 = new Fl_Button(274, 618, 111, 25, "Tag 24");
          Tag_24->color((Fl_Color)46);
          Tag_24->labelcolor(FL_GRAY0);
          Tag_24->callback((Fl_Callback*)cb_Tag_24);
        } // Fl_Button* Tag_24
        Tag_color_group->end();
        Fl_Group::current()->resizable(Tag_color_group);
      } // Fl_Group* Tag_color_group
      { Clear_group = new Fl_Group(420, 43, 60, 612);
        Clear_group->color((Fl_Color)94);
        Clear_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { Clear_01 = new Fl_Button(421, 90, 54, 23, "Clear");
          Clear_01->color((Fl_Color)94);
          Clear_01->labelcolor(FL_GRAY0);
          Clear_01->callback((Fl_Callback*)cb_Clear_01);
        } // Fl_Button* Clear_01
        { Clear_02 = new Fl_Button(421, 113, 54, 23, "Clear");
          Clear_02->color((Fl_Color)94);
          Clear_02->labelcolor(FL_GRAY0);
          Clear_02->callback((Fl_Callback*)cb_Clear_02);
        } // Fl_Button* Clear_02
        { Clear_03 = new Fl_Button(421, 136, 54, 23, "Clear");
          Clear_03->color((Fl_Color)94);
          Clear_03->labelcolor(FL_GRAY0);
          Clear_03->callback((Fl_Callback*)cb_Clear_03);
        } // Fl_Button* Clear_03
        { Clear_04 = new Fl_Button(421, 159, 54, 23, "Clear");
          Clear_04->color((Fl_Color)94);
          Clear_04->labelcolor(FL_GRAY0);
          Clear_04->callback((Fl_Callback*)cb_Clear_04);
        } // Fl_Button* Clear_04
        { Clear_05 = new Fl_Button(421, 182, 54, 23, "Clear");
          Clear_05->color((Fl_Color)94);
          Clear_05->labelcolor(FL_GRAY0);
          Clear_05->callback((Fl_Callback*)cb_Clear_05);
        } // Fl_Button* Clear_05
        { Clear_06 = new Fl_Button(421, 205, 54, 23, "Clear");
          Clear_06->color((Fl_Color)94);
          Clear_06->labelcolor(FL_GRAY0);
          Clear_06->callback((Fl_Callback*)cb_Clear_06);
        } // Fl_Button* Clear_06
        { Clear_07 = new Fl_Button(421, 228, 54, 23, "Clear");
          Clear_07->color((Fl_Color)94);
          Clear_07->labelcolor(FL_GRAY0);
          Clear_07->callback((Fl_Callback*)cb_Clear_07);
        } // Fl_Button* Clear_07
        { Clear_08 = new Fl_Button(421, 251, 54, 23, "Clear");
          Clear_08->color((Fl_Color)94);
          Clear_08->labelcolor(FL_GRAY0);
          Clear_08->callback((Fl_Callback*)cb_Clear_08);
        } // Fl_Button* Clear_08
        { Clear_09 = new Fl_Button(421, 274, 54, 23, "Clear");
          Clear_09->color((Fl_Color)94);
          Clear_09->labelcolor(FL_GRAY0);
          Clear_09->callback((Fl_Callback*)cb_Clear_09);
        } // Fl_Button* Clear_09
        { Clear_10 = new Fl_Button(421, 297, 54, 23, "Clear");
          Clear_10->color((Fl_Color)94);
          Clear_10->labelcolor(FL_GRAY0);
          Clear_10->callback((Fl_Callback*)cb_Clear_10);
        } // Fl_Button* Clear_10
        { Clear_11 = new Fl_Button(421, 320, 54, 23, "Clear");
          Clear_11->color((Fl_Color)94);
          Clear_11->labelcolor(FL_GRAY0);
          Clear_11->callback((Fl_Callback*)cb_Clear_11);
        } // Fl_Button* Clear_11
        { Clear_12 = new Fl_Button(421, 343, 54, 23, "Clear");
          Clear_12->color((Fl_Color)94);
          Clear_12->labelcolor(FL_GRAY0);
          Clear_12->callback((Fl_Callback*)cb_Clear_12);
        } // Fl_Button* Clear_12
        { Clear_13 = new Fl_Button(421, 366, 54, 23, "Clear");
          Clear_13->color((Fl_Color)94);
          Clear_13->labelcolor(FL_GRAY0);
          Clear_13->callback((Fl_Callback*)cb_Clear_13);
        } // Fl_Button* Clear_13
        { Clear_14 = new Fl_Button(421, 389, 54, 23, "Clear");
          Clear_14->color((Fl_Color)94);
          Clear_14->labelcolor(FL_GRAY0);
          Clear_14->callback((Fl_Callback*)cb_Clear_14);
        } // Fl_Button* Clear_14
        { Clear_15 = new Fl_Button(421, 412, 54, 23, "Clear");
          Clear_15->color((Fl_Color)94);
          Clear_15->labelcolor(FL_GRAY0);
          Clear_15->callback((Fl_Callback*)cb_Clear_15);
        } // Fl_Button* Clear_15
        { Clear_16 = new Fl_Button(421, 435, 54, 23, "Clear");
          Clear_16->color((Fl_Color)94);
          Clear_16->labelcolor(FL_GRAY0);
          Clear_16->callback((Fl_Callback*)cb_Clear_16);
        } // Fl_Button* Clear_16
        { Clear_17 = new Fl_Button(421, 458, 54, 23, "Clear");
          Clear_17->color((Fl_Color)94);
          Clear_17->labelcolor(FL_GRAY0);
          Clear_17->callback((Fl_Callback*)cb_Clear_17);
        } // Fl_Button* Clear_17
        { Clear_18 = new Fl_Button(421, 481, 54, 23, "Clear");
          Clear_18->color((Fl_Color)94);
          Clear_18->labelcolor(FL_GRAY0);
          Clear_18->callback((Fl_Callback*)cb_Clear_18);
        } // Fl_Button* Clear_18
        { Clear_19 = new Fl_Button(421, 504, 54, 23, "Clear");
          Clear_19->color((Fl_Color)94);
          Clear_19->labelcolor(FL_GRAY0);
          Clear_19->callback((Fl_Callback*)cb_Clear_19);
        } // Fl_Button* Clear_19
        { Clear_20 = new Fl_Button(421, 527, 54, 23, "Clear");
          Clear_20->color((Fl_Color)94);
          Clear_20->labelcolor(FL_GRAY0);
          Clear_20->callback((Fl_Callback*)cb_Clear_20);
        } // Fl_Button* Clear_20
        { Clear_21 = new Fl_Button(421, 550, 54, 23, "Clear");
          Clear_21->color((Fl_Color)94);
          Clear_21->labelcolor(FL_GRAY0);
          Clear_21->callback((Fl_Callback*)cb_Clear_21);
        } // Fl_Button* Clear_21
        { Clear_22 = new Fl_Button(421, 573, 54, 23, "Clear");
          Clear_22->color((Fl_Color)94);
          Clear_22->labelcolor(FL_GRAY0);
          Clear_22->callback((Fl_Callback*)cb_Clear_22);
        } // Fl_Button* Clear_22
        { Clear_23 = new Fl_Button(421, 596, 54, 23, "Clear");
          Clear_23->color((Fl_Color)94);
          Clear_23->labelcolor(FL_GRAY0);
          Clear_23->callback((Fl_Callback*)cb_Clear_23);
        } // Fl_Button* Clear_23
        { Clear_24 = new Fl_Button(421, 619, 54, 23, "Clear");
          Clear_24->color((Fl_Color)94);
          Clear_24->labelcolor(FL_GRAY0);
          Clear_24->callback((Fl_Callback*)cb_Clear_24);
        } // Fl_Button* Clear_24
        { Clear_00 = new Fl_Button(421, 67, 54, 23, "Clear");
          Clear_00->color((Fl_Color)94);
          Clear_00->labelcolor(FL_GRAY0);
          Clear_00->callback((Fl_Callback*)cb_Clear_00);
        } // Fl_Button* Clear_00
        Clear_group->end();
      } // Fl_Group* Clear_group
      { Fill_holes_group = new Fl_Group(470, 43, 69, 612);
        Fill_holes_group->color((Fl_Color)92);
        Fill_holes_group->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { FH_01 = new Fl_Button(471, 90, 59, 23, "Fill holes");
          FH_01->color((Fl_Color)93);
          FH_01->labelcolor(FL_GRAY0);
          FH_01->callback((Fl_Callback*)cb_FH_01);
        } // Fl_Button* FH_01
        { FH_02 = new Fl_Button(471, 113, 59, 24, "Fill holes");
          FH_02->color((Fl_Color)93);
          FH_02->labelcolor(FL_GRAY0);
          FH_02->callback((Fl_Callback*)cb_FH_02);
        } // Fl_Button* FH_02
        { FH_03 = new Fl_Button(471, 136, 59, 23, "Fill holes");
          FH_03->color((Fl_Color)93);
          FH_03->labelcolor(FL_GRAY0);
          FH_03->callback((Fl_Callback*)cb_FH_03);
        } // Fl_Button* FH_03
        { FH_04 = new Fl_Button(471, 159, 59, 23, "Fill holes");
          FH_04->color((Fl_Color)93);
          FH_04->labelcolor(FL_GRAY0);
          FH_04->callback((Fl_Callback*)cb_FH_04);
        } // Fl_Button* FH_04
        { FH_05 = new Fl_Button(471, 182, 59, 23, "Fill holes");
          FH_05->color((Fl_Color)93);
          FH_05->labelcolor(FL_GRAY0);
          FH_05->callback((Fl_Callback*)cb_FH_05);
        } // Fl_Button* FH_05
        { FH_06 = new Fl_Button(471, 205, 59, 23, "Fill holes");
          FH_06->color((Fl_Color)93);
          FH_06->labelcolor(FL_GRAY0);
          FH_06->callback((Fl_Callback*)cb_FH_06);
        } // Fl_Button* FH_06
        { FH_07 = new Fl_Button(471, 228, 59, 23, "Fill holes");
          FH_07->color((Fl_Color)93);
          FH_07->labelcolor(FL_GRAY0);
          FH_07->callback((Fl_Callback*)cb_FH_07);
        } // Fl_Button* FH_07
        { FH_08 = new Fl_Button(471, 251, 59, 23, "Fill holes");
          FH_08->color((Fl_Color)93);
          FH_08->labelcolor(FL_GRAY0);
          FH_08->callback((Fl_Callback*)cb_FH_08);
        } // Fl_Button* FH_08
        { FH_09 = new Fl_Button(471, 274, 59, 23, "Fill holes");
          FH_09->color((Fl_Color)93);
          FH_09->labelcolor(FL_GRAY0);
          FH_09->callback((Fl_Callback*)cb_FH_09);
        } // Fl_Button* FH_09
        { FH_10 = new Fl_Button(471, 297, 59, 23, "Fill holes");
          FH_10->color((Fl_Color)93);
          FH_10->labelcolor(FL_GRAY0);
          FH_10->callback((Fl_Callback*)cb_FH_10);
        } // Fl_Button* FH_10
        { FH_11 = new Fl_Button(471, 320, 59, 23, "Fill holes");
          FH_11->color((Fl_Color)93);
          FH_11->labelcolor(FL_GRAY0);
          FH_11->callback((Fl_Callback*)cb_FH_11);
        } // Fl_Button* FH_11
        { FH_12 = new Fl_Button(471, 343, 59, 23, "Fill holes");
          FH_12->color((Fl_Color)93);
          FH_12->labelcolor(FL_GRAY0);
          FH_12->callback((Fl_Callback*)cb_FH_12);
        } // Fl_Button* FH_12
        { FH_13 = new Fl_Button(471, 366, 59, 23, "Fill holes");
          FH_13->color((Fl_Color)93);
          FH_13->labelcolor(FL_GRAY0);
          FH_13->callback((Fl_Callback*)cb_FH_13);
        } // Fl_Button* FH_13
        { FH_14 = new Fl_Button(471, 389, 59, 23, "Fill holes");
          FH_14->color((Fl_Color)93);
          FH_14->labelcolor(FL_GRAY0);
          FH_14->callback((Fl_Callback*)cb_FH_14);
        } // Fl_Button* FH_14
        { FH_15 = new Fl_Button(471, 412, 59, 23, "Fill holes");
          FH_15->color((Fl_Color)93);
          FH_15->labelcolor(FL_GRAY0);
          FH_15->callback((Fl_Callback*)cb_FH_15);
        } // Fl_Button* FH_15
        { FH_16 = new Fl_Button(471, 435, 59, 23, "Fill holes");
          FH_16->color((Fl_Color)93);
          FH_16->labelcolor(FL_GRAY0);
          FH_16->callback((Fl_Callback*)cb_FH_16);
        } // Fl_Button* FH_16
        { FH_17 = new Fl_Button(471, 458, 59, 23, "Fill holes");
          FH_17->color((Fl_Color)93);
          FH_17->labelcolor(FL_GRAY0);
          FH_17->callback((Fl_Callback*)cb_FH_17);
        } // Fl_Button* FH_17
        { FH_18 = new Fl_Button(471, 481, 59, 23, "Fill holes");
          FH_18->color((Fl_Color)93);
          FH_18->labelcolor(FL_GRAY0);
          FH_18->callback((Fl_Callback*)cb_FH_18);
        } // Fl_Button* FH_18
        { FH_19 = new Fl_Button(471, 504, 59, 23, "Fill holes");
          FH_19->color((Fl_Color)93);
          FH_19->labelcolor(FL_GRAY0);
          FH_19->callback((Fl_Callback*)cb_FH_19);
        } // Fl_Button* FH_19
        { FH_20 = new Fl_Button(471, 527, 59, 23, "Fill holes");
          FH_20->color((Fl_Color)93);
          FH_20->labelcolor(FL_GRAY0);
          FH_20->callback((Fl_Callback*)cb_FH_20);
        } // Fl_Button* FH_20
        { FH_21 = new Fl_Button(471, 550, 59, 23, "Fill holes");
          FH_21->color((Fl_Color)93);
          FH_21->labelcolor(FL_GRAY0);
          FH_21->callback((Fl_Callback*)cb_FH_21);
        } // Fl_Button* FH_21
        { FH_22 = new Fl_Button(471, 573, 59, 23, "Fill holes");
          FH_22->color((Fl_Color)93);
          FH_22->labelcolor(FL_GRAY0);
          FH_22->callback((Fl_Callback*)cb_FH_22);
        } // Fl_Button* FH_22
        { FH_23 = new Fl_Button(471, 596, 59, 23, "Fill holes");
          FH_23->color((Fl_Color)93);
          FH_23->labelcolor(FL_GRAY0);
          FH_23->callback((Fl_Callback*)cb_FH_23);
        } // Fl_Button* FH_23
        { FH_24 = new Fl_Button(471, 619, 59, 23, "Fill holes");
          FH_24->color((Fl_Color)93);
          FH_24->labelcolor(FL_GRAY0);
          FH_24->callback((Fl_Callback*)cb_FH_24);
        } // Fl_Button* FH_24
        { FH_00 = new Fl_Button(471, 67, 59, 23, "Fill holes");
          FH_00->color((Fl_Color)93);
          FH_00->labelcolor(FL_GRAY0);
          FH_00->callback((Fl_Callback*)cb_FH_00);
        } // Fl_Button* FH_00
        Fill_holes_group->end();
      } // Fl_Group* Fill_holes_group
      Tags_group->end();
    } // Fl_Scroll* Tags_group
    tagsWindow->set_non_modal();
    tagsWindow->end();
    tagsWindow->resizable(tagsWindow);
  } // Fl_Double_Window* tagsWindow
  { mergetagsWindow = new Fl_Double_Window(306, 84, "Merge Tags : put Source into Target");
    mergetagsWindow->color((Fl_Color)214);
    mergetagsWindow->user_data((void*)(this));
    { merge_source = new Fl_Choice(92, 8, 100, 23, "Source Tag");
      merge_source->down_box(FL_BORDER_BOX);
    } // Fl_Choice* merge_source
    { Ok_merge = new Fl_Button(208, 7, 70, 30, "Merge");
      Ok_merge->tooltip("Set current scalar values to 0 for all selected objects");
      Ok_merge->color((Fl_Color)215);
      Ok_merge->callback((Fl_Callback*)cb_Ok_merge);
    } // Fl_Button* Ok_merge
    { merge_target = new Fl_Choice(92, 41, 100, 23, "Target Tag");
      merge_target->down_box(FL_BORDER_BOX);
    } // Fl_Choice* merge_target
    { Cancel_merge_tags = new Fl_Button(210, 41, 65, 25, "Cancel");
      Cancel_merge_tags->color((Fl_Color)254);
      Cancel_merge_tags->selection_color((Fl_Color)252);
      Cancel_merge_tags->callback((Fl_Callback*)cb_Cancel_merge_tags);
    } // Fl_Button* Cancel_merge_tags
    mergetagsWindow->set_non_modal();
    mergetagsWindow->end();
    mergetagsWindow->resizable(mergetagsWindow);
  } // Fl_Double_Window* mergetagsWindow
  { extractregionWindow = new Fl_Double_Window(235, 110, "Extract tagged region");
    extractregionWindow->color((Fl_Color)134);
    extractregionWindow->user_data((void*)(this));
    { Tag_value = new Fl_Value_Input(165, 17, 52, 25, "Tag value to extract :");
      Tag_value->value(2);
      Tag_value->align(Fl_Align(36));
    } // Fl_Value_Input* Tag_value
    { Ok_extractregion = new Fl_Button(43, 80, 65, 25, "Ok");
      Ok_extractregion->color((Fl_Color)93);
      Ok_extractregion->selection_color((Fl_Color)91);
      Ok_extractregion->callback((Fl_Callback*)cb_Ok_extractregion);
    } // Fl_Button* Ok_extractregion
    { Cancel_extract_region = new Fl_Button(150, 81, 65, 25, "Cancel");
      Cancel_extract_region->color((Fl_Color)133);
      Cancel_extract_region->selection_color((Fl_Color)132);
      Cancel_extract_region->callback((Fl_Callback*)cb_Cancel_extract_region);
    } // Fl_Button* Cancel_extract_region
    extractregionWindow->set_modal();
    extractregionWindow->end();
    extractregionWindow->resizable(extractregionWindow);
  } // Fl_Double_Window* extractregionWindow
  { extractrangeWindow = new Fl_Double_Window(360, 204, "Extract tag or scalar range");
    extractrangeWindow->color((Fl_Color)247);
    extractrangeWindow->user_data((void*)(this));
    { Extract_what_radio_buttons = new Fl_Group(25, 20, 314, 55, "Extract : ");
      Extract_what_radio_buttons->box(FL_BORDER_BOX);
      Extract_what_radio_buttons->color((Fl_Color)222);
      Extract_what_radio_buttons->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { ex_tags = new Fl_Round_Button(27, 21, 25, 24, "Tags");
        ex_tags->type(102);
        ex_tags->down_box(FL_ROUND_DOWN_BOX);
        ex_tags->value(1);
      } // Fl_Round_Button* ex_tags
      { ex_scalars = new Fl_Round_Button(27, 44, 22, 11, "Scalars");
        ex_scalars->type(102);
        ex_scalars->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* ex_scalars
      { sc_active2 = new Fl_Choice(205, 40, 100, 23, "Chose  scalar");
        sc_active2->down_box(FL_BORDER_BOX);
      } // Fl_Choice* sc_active2
      Extract_what_radio_buttons->end();
    } // Fl_Group* Extract_what_radio_buttons
    { Range_min = new Fl_Value_Input(135, 93, 52, 25, "Minimal value:");
      Range_min->align(Fl_Align(36));
    } // Fl_Value_Input* Range_min
    { Range_max = new Fl_Value_Input(135, 123, 52, 25, "Maximal value :");
      Range_max->value(24);
      Range_max->align(Fl_Align(36));
    } // Fl_Value_Input* Range_max
    { Ok_extractrange = new Fl_Button(110, 163, 65, 25, "Ok");
      Ok_extractrange->color((Fl_Color)239);
      Ok_extractrange->selection_color((Fl_Color)237);
      Ok_extractrange->callback((Fl_Callback*)cb_Ok_extractrange);
    } // Fl_Button* Ok_extractrange
    { Cancel_extract_scalar_range = new Fl_Button(195, 163, 65, 25, "Cancel");
      Cancel_extract_scalar_range->color((Fl_Color)191);
      Cancel_extract_scalar_range->selection_color((Fl_Color)191);
      Cancel_extract_scalar_range->callback((Fl_Callback*)cb_Cancel_extract_scalar_range);
    } // Fl_Button* Cancel_extract_scalar_range
    extractrangeWindow->set_modal();
    extractrangeWindow->end();
    extractrangeWindow->resizable(extractrangeWindow);
  } // Fl_Double_Window* extractrangeWindow
  { decomposeWindow = new Fl_Double_Window(213, 120, "Connectivity decomposition");
    decomposeWindow->color((Fl_Color)167);
    decomposeWindow->user_data((void*)(this));
    { Decompose_min_region_size = new Fl_Value_Input(150, 17, 52, 25, "Minimal region size :");
      Decompose_min_region_size->value(50);
      Decompose_min_region_size->align(Fl_Align(36));
    } // Fl_Value_Input* Decompose_min_region_size
    { Ok_decomposition = new Fl_Button(36, 89, 65, 25, "Ok");
      Ok_decomposition->color((Fl_Color)207);
      Ok_decomposition->selection_color((Fl_Color)207);
      Ok_decomposition->callback((Fl_Callback*)cb_Ok_decomposition);
    } // Fl_Button* Ok_decomposition
    { Cancel_connectivity_decompose = new Fl_Button(135, 90, 65, 25, "Cancel");
      Cancel_connectivity_decompose->color((Fl_Color)167);
      Cancel_connectivity_decompose->selection_color((Fl_Color)151);
      Cancel_connectivity_decompose->callback((Fl_Callback*)cb_Cancel_connectivity_decompose);
    } // Fl_Button* Cancel_connectivity_decompose
    decomposeWindow->set_modal();
    decomposeWindow->end();
    decomposeWindow->resizable(decomposeWindow);
  } // Fl_Double_Window* decomposeWindow
  { extractallregionsWindow = new Fl_Double_Window(239, 126, "Extract all tagged regions");
    extractallregionsWindow->color((Fl_Color)132);
    extractallregionsWindow->user_data((void*)(this));
    { Tag_decompose_min_region_size = new Fl_Value_Input(150, 17, 52, 25, "Minimal region size :");
      Tag_decompose_min_region_size->value(50);
      Tag_decompose_min_region_size->align(Fl_Align(36));
    } // Fl_Value_Input* Tag_decompose_min_region_size
    { Ok_extractallregions = new Fl_Button(57, 89, 65, 25, "Ok");
      Ok_extractallregions->color((Fl_Color)80);
      Ok_extractallregions->selection_color((Fl_Color)91);
      Ok_extractallregions->callback((Fl_Callback*)cb_Ok_extractallregions);
    } // Fl_Button* Ok_extractallregions
    { Cancel_extractalltaggedregions = new Fl_Button(160, 90, 65, 25, "Cancel");
      Cancel_extractalltaggedregions->color((Fl_Color)133);
      Cancel_extractalltaggedregions->selection_color((Fl_Color)132);
      Cancel_extractalltaggedregions->callback((Fl_Callback*)cb_Cancel_extractalltaggedregions);
    } // Fl_Button* Cancel_extractalltaggedregions
    extractallregionsWindow->set_modal();
    extractallregionsWindow->end();
    extractallregionsWindow->resizable(extractallregionsWindow);
  } // Fl_Double_Window* extractallregionsWindow
  { deleteregionWindow = new Fl_Double_Window(234, 109, "Delete tagged region");
    deleteregionWindow->color((Fl_Color)80);
    deleteregionWindow->user_data((void*)(this));
    { Tag_value_delete = new Fl_Value_Input(165, 17, 52, 25, "Tag value to delete :");
      Tag_value_delete->value(1);
      Tag_value_delete->align(Fl_Align(36));
    } // Fl_Value_Input* Tag_value_delete
    { Ok_deleteregion = new Fl_Button(65, 80, 65, 25, "Ok");
      Ok_deleteregion->color((Fl_Color)90);
      Ok_deleteregion->selection_color((Fl_Color)91);
      Ok_deleteregion->callback((Fl_Callback*)cb_Ok_deleteregion);
    } // Fl_Button* Ok_deleteregion
    { Cancel_deleteregion = new Fl_Button(165, 80, 65, 25, "Cancel");
      Cancel_deleteregion->color((Fl_Color)133);
      Cancel_deleteregion->selection_color((Fl_Color)132);
      Cancel_deleteregion->callback((Fl_Callback*)cb_Cancel_deleteregion);
    } // Fl_Button* Cancel_deleteregion
    deleteregionWindow->set_modal();
    deleteregionWindow->end();
    deleteregionWindow->resizable(deleteregionWindow);
  } // Fl_Double_Window* deleteregionWindow
  { flagWindow = new Fl_Double_Window(237, 179, "Edit 1 Selected Flag");
    flagWindow->color((Fl_Color)215);
    flagWindow->user_data((void*)(this));
    { Refresh_flag = new Fl_Button(87, 140, 65, 25, "Refresh");
      Refresh_flag->tooltip("Change Flag to first selected flag");
      Refresh_flag->color((Fl_Color)134);
      Refresh_flag->selection_color((Fl_Color)92);
      Refresh_flag->callback((Fl_Callback*)cb_Refresh_flag);
    } // Fl_Button* Refresh_flag
    { Flag_Label = new Fl_Input(66, 10, 162, 24, "Label:");
    } // Fl_Input* Flag_Label
    { Cancel_flag = new Fl_Button(151, 140, 65, 25, "Cancel");
      Cancel_flag->color((Fl_Color)133);
      Cancel_flag->selection_color((Fl_Color)132);
      Cancel_flag->callback((Fl_Callback*)cb_Cancel_flag);
    } // Fl_Button* Cancel_flag
    { Flag_Length = new Fl_Value_Input(175, 45, 52, 25, "Flag length (mm):");
      Flag_Length->value(25);
      Flag_Length->align(Fl_Align(36));
    } // Fl_Value_Input* Flag_Length
    { Flag_Colour = new Fl_Button(75, 82, 114, 23, "Flag colour");
      Flag_Colour->color((Fl_Color)43);
      Flag_Colour->labelcolor(FL_GRAY0);
      Flag_Colour->callback((Fl_Callback*)cb_Flag_Colour);
    } // Fl_Button* Flag_Colour
    { Ok_flag = new Fl_Button(23, 140, 65, 25, "Ok");
      Ok_flag->tooltip("Change Flag to first selected flag");
      Ok_flag->color((Fl_Color)134);
      Ok_flag->selection_color((Fl_Color)92);
      Ok_flag->callback((Fl_Callback*)cb_Ok_flag);
    } // Fl_Button* Ok_flag
    flagWindow->set_non_modal();
    flagWindow->end();
    flagWindow->resizable(flagWindow);
  } // Fl_Double_Window* flagWindow
  { thicknessWindow2 = new Fl_Double_Window(247, 199, "Thickness between 2 surfaces");
    thicknessWindow2->color((Fl_Color)135);
    thicknessWindow2->user_data((void*)(this));
    { Ok_th2 = new Fl_Button(63, 162, 65, 25, "Ok");
      Ok_th2->color((Fl_Color)94);
      Ok_th2->callback((Fl_Callback*)cb_Ok_th2);
    } // Fl_Button* Ok_th2
    { th_source = new Fl_Choice(122, 8, 100, 23, "Impacted object");
      th_source->down_box(FL_BORDER_BOX);
    } // Fl_Choice* th_source
    { th_target = new Fl_Choice(122, 41, 100, 23, "Observed object");
      th_target->down_box(FL_BORDER_BOX);
    } // Fl_Choice* th_target
    { Thickness_Max_Distance2 = new Fl_Value_Input(171, 71, 52, 25, "Maximal thickness (mm) :");
      Thickness_Max_Distance2->value(2);
      Thickness_Max_Distance2->align(Fl_Align(36));
    } // Fl_Value_Input* Thickness_Max_Distance2
    { Cancel_th2 = new Fl_Button(140, 162, 65, 25, "Cancel");
      Cancel_th2->color((Fl_Color)133);
      Cancel_th2->selection_color((Fl_Color)132);
      Cancel_th2->callback((Fl_Callback*)cb_Cancel_th2);
    } // Fl_Button* Cancel_th2
    thicknessWindow2->set_modal();
    thicknessWindow2->end();
    thicknessWindow2->resizable(thicknessWindow2);
  } // Fl_Double_Window* thicknessWindow2
  { fillholesWindow = new Fl_Double_Window(234, 127, "Fill Holes");
    fillholesWindow->color((Fl_Color)134);
    fillholesWindow->user_data((void*)(this));
    { HOLES_size = new Fl_Value_Input(158, 28, 52, 30, "Maximal size :");
      HOLES_size->value(500);
      HOLES_size->align(Fl_Align(36));
    } // Fl_Value_Input* HOLES_size
    { Ok_fillholes = new Fl_Button(48, 80, 65, 25, "Ok");
      Ok_fillholes->color((Fl_Color)93);
      Ok_fillholes->selection_color((Fl_Color)91);
      Ok_fillholes->callback((Fl_Callback*)cb_Ok_fillholes);
    } // Fl_Button* Ok_fillholes
    { Cancel_fillholes = new Fl_Button(146, 80, 65, 25, "Cancel");
      Cancel_fillholes->color((Fl_Color)133);
      Cancel_fillholes->selection_color((Fl_Color)132);
      Cancel_fillholes->callback((Fl_Callback*)cb_Cancel_fillholes);
    } // Fl_Button* Cancel_fillholes
    fillholesWindow->set_modal();
    fillholesWindow->end();
  } // Fl_Double_Window* fillholesWindow
  { fillholesWindow2 = new Fl_Double_Window(239, 137, "Fill Holes");
    fillholesWindow2->color((Fl_Color)134);
    fillholesWindow2->user_data((void*)(this));
    { HOLES2_size = new Fl_Value_Input(165, 40, 52, 30, "Max num vertices : ");
      HOLES2_size->value(50);
      HOLES2_size->align(Fl_Align(36));
    } // Fl_Value_Input* HOLES2_size
    { Ok_fillholes2 = new Fl_Button(60, 90, 65, 25, "Ok");
      Ok_fillholes2->color((Fl_Color)93);
      Ok_fillholes2->selection_color((Fl_Color)91);
      Ok_fillholes2->callback((Fl_Callback*)cb_Ok_fillholes2);
    } // Fl_Button* Ok_fillholes2
    { Cancel_fillholes2 = new Fl_Button(135, 90, 65, 25, "Cancel");
      Cancel_fillholes2->color((Fl_Color)133);
      Cancel_fillholes2->selection_color((Fl_Color)132);
      Cancel_fillholes2->callback((Fl_Callback*)cb_Cancel_fillholes2);
    } // Fl_Button* Cancel_fillholes2
    { HOLES2_tagid = new Fl_Value_Input(165, 8, 52, 30, "Tag id :");
      HOLES2_tagid->align(Fl_Align(36));
    } // Fl_Value_Input* HOLES2_tagid
    fillholesWindow2->set_modal();
    fillholesWindow2->end();
    fillholesWindow2->resizable(fillholesWindow2);
  } // Fl_Double_Window* fillholesWindow2
  { densifyWindow = new Fl_Double_Window(322, 111, "Densify");
    densifyWindow->color((Fl_Color)134);
    densifyWindow->user_data((void*)(this));
    { DENSIFY_factor = new Fl_Value_Input(215, 20, 52, 30, "Number of subdivisions :");
      DENSIFY_factor->value(1);
      DENSIFY_factor->align(Fl_Align(36));
    } // Fl_Value_Input* DENSIFY_factor
    { Ok_densify = new Fl_Button(106, 75, 65, 25, "Ok");
      Ok_densify->color((Fl_Color)93);
      Ok_densify->selection_color((Fl_Color)91);
      Ok_densify->callback((Fl_Callback*)cb_Ok_densify);
    } // Fl_Button* Ok_densify
    { Cancel_densify = new Fl_Button(181, 75, 65, 25, "Cancel");
      Cancel_densify->color((Fl_Color)133);
      Cancel_densify->selection_color((Fl_Color)132);
      Cancel_densify->callback((Fl_Callback*)cb_Cancel_densify);
    } // Fl_Button* Cancel_densify
    densifyWindow->set_modal();
    densifyWindow->end();
    densifyWindow->resizable(densifyWindow);
  } // Fl_Double_Window* densifyWindow
  { nameWindow = new Fl_Double_Window(288, 168, "Edit  Name");
    nameWindow->color((Fl_Color)215);
    nameWindow->user_data((void*)(this));
    { Ok_name = new Fl_Button(15, 66, 175, 24, "Ok (first selected object)");
      Ok_name->tooltip("Set name to \"label\" value to first selected surface object");
      Ok_name->color((Fl_Color)133);
      Ok_name->selection_color((Fl_Color)92);
      Ok_name->callback((Fl_Callback*)cb_Ok_name);
    } // Fl_Button* Ok_name
    { Ok_name2 = new Fl_Button(15, 90, 175, 30, "Ok (all selected objects)");
      Ok_name2->tooltip("Set name to \"label\" value to first selected surface object");
      Ok_name2->color((Fl_Color)134);
      Ok_name2->selection_color((Fl_Color)92);
      Ok_name2->callback((Fl_Callback*)cb_Ok_name2);
    } // Fl_Button* Ok_name2
    { Name_Label = new Fl_Input(65, 17, 195, 24, "Label:");
    } // Fl_Input* Name_Label
    { Cancel_name = new Fl_Button(100, 120, 90, 25, "Cancel");
      Cancel_name->tooltip("Cancel current action");
      Cancel_name->color((Fl_Color)92);
      Cancel_name->selection_color((Fl_Color)132);
      Cancel_name->callback((Fl_Callback*)cb_Cancel_name);
    } // Fl_Button* Cancel_name
    { Refresh_name = new Fl_Button(15, 121, 85, 25, "Refresh");
      Refresh_name->tooltip("Update label : get label of first selected surface object");
      Refresh_name->color((Fl_Color)221);
      Refresh_name->selection_color((Fl_Color)217);
      Refresh_name->callback((Fl_Callback*)cb_Refresh_name);
    } // Fl_Button* Refresh_name
    nameWindow->set_non_modal();
    nameWindow->end();
    nameWindow->resizable(nameWindow);
  } // Fl_Double_Window* nameWindow
  { allflagWindow = new Fl_Double_Window(244, 107, "Edit All Selected Flags");
    allflagWindow->color((Fl_Color)215);
    allflagWindow->user_data((void*)(this));
    { Ok_all_flag = new Fl_Button(58, 70, 65, 25, "Ok");
      Ok_all_flag->tooltip("Change Flag to first selected flag");
      Ok_all_flag->color((Fl_Color)134);
      Ok_all_flag->selection_color((Fl_Color)92);
      Ok_all_flag->callback((Fl_Callback*)cb_Ok_all_flag);
    } // Fl_Button* Ok_all_flag
    { Cancel_all_flag = new Fl_Button(142, 70, 65, 25, "Cancel");
      Cancel_all_flag->color((Fl_Color)133);
      Cancel_all_flag->selection_color((Fl_Color)132);
      Cancel_all_flag->callback((Fl_Callback*)cb_Cancel_all_flag);
    } // Fl_Button* Cancel_all_flag
    { All_Flag_Length = new Fl_Value_Input(155, 10, 52, 25, "Flag length (mm):");
      All_Flag_Length->value(25);
      All_Flag_Length->align(Fl_Align(36));
    } // Fl_Value_Input* All_Flag_Length
    { All_Flag_Colour = new Fl_Button(95, 42, 114, 23, "Flag colour");
      All_Flag_Colour->color((Fl_Color)43);
      All_Flag_Colour->labelcolor(FL_GRAY0);
      All_Flag_Colour->callback((Fl_Callback*)cb_All_Flag_Colour);
    } // Fl_Button* All_Flag_Colour
    allflagWindow->set_non_modal();
    allflagWindow->end();
  } // Fl_Double_Window* allflagWindow
  { ViewHideObjectsWindow = new Fl_Double_Window(283, 473, "View Hide objects");
    ViewHideObjectsWindow->color((Fl_Color)215);
    ViewHideObjectsWindow->user_data((void*)(this));
    { Check_browser = new Fl_Check_Browser(15, 10, 245, 385);
      Check_browser->callback((Fl_Callback*)cb_Check_browser);
      Check_browser->when(FL_WHEN_CHANGED);
    } // Fl_Check_Browser* Check_browser
    { Ok_view_hide = new Fl_Button(145, 427, 85, 30, "Ok");
      Ok_view_hide->color((Fl_Color)133);
      Ok_view_hide->selection_color((Fl_Color)92);
      Ok_view_hide->callback((Fl_Callback*)cb_Ok_view_hide);
    } // Fl_Button* Ok_view_hide
    { Refresh_view_hide = new Fl_Button(61, 427, 85, 30, "Refresh");
      Refresh_view_hide->color((Fl_Color)221);
      Refresh_view_hide->selection_color((Fl_Color)92);
      Refresh_view_hide->callback((Fl_Callback*)cb_Refresh_view_hide);
    } // Fl_Button* Refresh_view_hide
    { Check_none_view_hide = new Fl_Button(145, 397, 85, 30, "Uncheck all");
      Check_none_view_hide->color((Fl_Color)130);
      Check_none_view_hide->selection_color((Fl_Color)92);
      Check_none_view_hide->callback((Fl_Callback*)cb_Check_none_view_hide);
    } // Fl_Button* Check_none_view_hide
    { Check_all_view_hide = new Fl_Button(61, 397, 85, 30, "Check all");
      Check_all_view_hide->color((Fl_Color)111);
      Check_all_view_hide->selection_color((Fl_Color)92);
      Check_all_view_hide->callback((Fl_Callback*)cb_Check_all_view_hide);
    } // Fl_Button* Check_all_view_hide
    ViewHideObjectsWindow->set_non_modal();
    ViewHideObjectsWindow->end();
    ViewHideObjectsWindow->resizable(ViewHideObjectsWindow);
  } // Fl_Double_Window* ViewHideObjectsWindow
  { tags_convert_Window = new Fl_Double_Window(515, 162, "Convert RGB scalars to TAGs");
    tags_convert_Window->color((Fl_Color)94);
    tags_convert_Window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(6, 16, 504, 98, "Conversion ");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)93);
      { rgb_to_tags_options = new Fl_Group(24, 38, 471, 49, "Options");
        rgb_to_tags_options->box(FL_BORDER_BOX);
        rgb_to_tags_options->color((Fl_Color)94);
        rgb_to_tags_options->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { rgb_exact = new Fl_Round_Button(26, 39, 25, 24, "Exact colour match (non matching vertices will be put inside TAG 00)");
          rgb_exact->type(102);
          rgb_exact->down_box(FL_ROUND_DOWN_BOX);
          rgb_exact->value(1);
        } // Fl_Round_Button* rgb_exact
        { rgb_distinct = new Fl_Round_Button(26, 62, 22, 11, "Define tags following the first 25 distinct colours found in RGB scalar");
          rgb_distinct->type(102);
          rgb_distinct->down_box(FL_ROUND_DOWN_BOX);
        } // Fl_Round_Button* rgb_distinct
        rgb_to_tags_options->end();
      } // Fl_Group* rgb_to_tags_options
      o->end();
    } // Fl_Group* o
    { Ok_rgb_to_tags = new Fl_Button(225, 120, 65, 25, "Ok");
      Ok_rgb_to_tags->color((Fl_Color)133);
      Ok_rgb_to_tags->selection_color((Fl_Color)92);
      Ok_rgb_to_tags->callback((Fl_Callback*)cb_Ok_rgb_to_tags);
    } // Fl_Button* Ok_rgb_to_tags
    tags_convert_Window->set_non_modal();
    tags_convert_Window->end();
    tags_convert_Window->resizable(tags_convert_Window);
  } // Fl_Double_Window* tags_convert_Window
  { orientationWindow = new Fl_Double_Window(243, 243, "Edit orientation labels");
    orientationWindow->color((Fl_Color)215);
    orientationWindow->user_data((void*)(this));
    { Ok_orientation = new Fl_Button(55, 200, 65, 25, "Ok");
      Ok_orientation->tooltip("Set name to \"label\" value to first selected surface object");
      Ok_orientation->color((Fl_Color)134);
      Ok_orientation->selection_color((Fl_Color)92);
      Ok_orientation->callback((Fl_Callback*)cb_Ok_orientation);
    } // Fl_Button* Ok_orientation
    { Cancel_orientation = new Fl_Button(121, 200, 65, 25, "Cancel");
      Cancel_orientation->tooltip("Cancel current action");
      Cancel_orientation->color((Fl_Color)133);
      Cancel_orientation->selection_color((Fl_Color)132);
      Cancel_orientation->callback((Fl_Callback*)cb_Cancel_orientation);
    } // Fl_Button* Cancel_orientation
    { z_plus_l = new Fl_Input(55, 10, 162, 24, "+z:");
    } // Fl_Input* z_plus_l
    { z_minus_l = new Fl_Input(56, 37, 162, 24, "-z:");
    } // Fl_Input* z_minus_l
    { y_plus_l = new Fl_Input(54, 63, 162, 24, "+y:");
    } // Fl_Input* y_plus_l
    { y_minus_l = new Fl_Input(55, 90, 162, 24, "-y:");
    } // Fl_Input* y_minus_l
    { x_plus_l = new Fl_Input(55, 116, 162, 24, "+x:");
    } // Fl_Input* x_plus_l
    { x_minus_l = new Fl_Input(56, 143, 162, 24, "-x:");
    } // Fl_Input* x_minus_l
    orientationWindow->set_non_modal();
    orientationWindow->end();
    orientationWindow->resizable(orientationWindow);
  } // Fl_Double_Window* orientationWindow
  { lmkselectWindow = new Fl_Double_Window(263, 133, "Select landmark");
    lmkselectWindow->color((Fl_Color)215);
    lmkselectWindow->user_data((void*)(this));
    { LandmarkId = new Fl_Value_Input(190, 10, 52, 25, "Landmark Id to select");
      LandmarkId->value(1);
      LandmarkId->align(Fl_Align(36));
    } // Fl_Value_Input* LandmarkId
    { Ok_lmkselect = new Fl_Button(65, 95, 65, 25, "Select");
      Ok_lmkselect->color((Fl_Color)159);
      Ok_lmkselect->selection_color((Fl_Color)101);
      Ok_lmkselect->callback((Fl_Callback*)cb_Ok_lmkselect);
    } // Fl_Button* Ok_lmkselect
    { Cancel_lmkselect = new Fl_Button(135, 95, 65, 25, "Close");
      Cancel_lmkselect->color((Fl_Color)133);
      Cancel_lmkselect->selection_color((Fl_Color)132);
      Cancel_lmkselect->callback((Fl_Callback*)cb_Cancel_lmkselect);
    } // Fl_Button* Cancel_lmkselect
    { SELECT_LMK = new Fl_Round_Button(27, 40, 102, 24, "Normal landmark");
      SELECT_LMK->type(102);
      SELECT_LMK->down_box(FL_ROUND_DOWN_BOX);
      SELECT_LMK->value(1);
    } // Fl_Round_Button* SELECT_LMK
    { SELECT_LMK2 = new Fl_Round_Button(27, 60, 102, 22, "Target landmark");
      SELECT_LMK2->type(102);
      SELECT_LMK2->down_box(FL_ROUND_DOWN_BOX);
    } // Fl_Round_Button* SELECT_LMK2
    lmkselectWindow->set_non_modal();
    lmkselectWindow->end();
    lmkselectWindow->resizable(lmkselectWindow);
  } // Fl_Double_Window* lmkselectWindow
  { lmkrangeselectWindow = new Fl_Double_Window(267, 156, "Select landmark range");
    lmkrangeselectWindow->color((Fl_Color)215);
    lmkrangeselectWindow->user_data((void*)(this));
    { rangestart = new Fl_Value_Input(190, 10, 52, 25, "Select landmark id START");
      rangestart->value(1);
      rangestart->align(Fl_Align(36));
    } // Fl_Value_Input* rangestart
    { Ok_lmkrangeselect = new Fl_Button(45, 115, 85, 25, "Select range");
      Ok_lmkrangeselect->color((Fl_Color)159);
      Ok_lmkrangeselect->selection_color((Fl_Color)101);
      Ok_lmkrangeselect->callback((Fl_Callback*)cb_Ok_lmkrangeselect);
    } // Fl_Button* Ok_lmkrangeselect
    { Cancel_lmkrangeselect = new Fl_Button(135, 114, 65, 25, "Close");
      Cancel_lmkrangeselect->color((Fl_Color)133);
      Cancel_lmkrangeselect->selection_color((Fl_Color)132);
      Cancel_lmkrangeselect->callback((Fl_Callback*)cb_Cancel_lmkrangeselect);
    } // Fl_Button* Cancel_lmkrangeselect
    { SELECTRANGE_LMK = new Fl_Round_Button(30, 58, 102, 24, "Normal landmark");
      SELECTRANGE_LMK->type(102);
      SELECTRANGE_LMK->down_box(FL_ROUND_DOWN_BOX);
      SELECTRANGE_LMK->value(1);
    } // Fl_Round_Button* SELECTRANGE_LMK
    { SELECTRANGE_LMK2 = new Fl_Round_Button(30, 78, 102, 22, "Target landmark");
      SELECTRANGE_LMK2->type(102);
      SELECTRANGE_LMK2->down_box(FL_ROUND_DOWN_BOX);
    } // Fl_Round_Button* SELECTRANGE_LMK2
    { rangeend = new Fl_Value_Input(190, 35, 52, 25, "Select landmark id END");
      rangeend->value(1);
      rangeend->align(Fl_Align(36));
    } // Fl_Value_Input* rangeend
    lmkrangeselectWindow->set_non_modal();
    lmkrangeselectWindow->end();
    lmkrangeselectWindow->resizable(lmkrangeselectWindow);
  } // Fl_Double_Window* lmkrangeselectWindow
  { Registration_Window = new Fl_Double_Window(1080, 600, "Registration");
    Registration_Window->color((Fl_Color)215);
    Registration_Window->user_data((void*)(this));
    Registration_Window->hotspot(Registration_Window);
    { once_icp_ok = new Fl_Group(740, 5, 315, 580);
      once_icp_ok->box(FL_EMBOSSED_BOX);
      once_icp_ok->color((Fl_Color)166);
      { Fl_Group* o = new Fl_Group(750, 30, 295, 425, "Display Matching");
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)175);
        o->labelfont(1);
        { display_landmark = new Fl_Check_Button(760, 40, 64, 15, "landmarks");
          display_landmark->down_box(FL_DOWN_BOX);
          display_landmark->value(1);
        } // Fl_Check_Button* display_landmark
        { draw = new Fl_Button(910, 390, 125, 55, "Draw");
          draw->color((Fl_Color)126);
          draw->callback((Fl_Callback*)cb_draw);
        } // Fl_Button* draw
        { display_vertice = new Fl_Check_Button(760, 65, 64, 15, "vertice");
          display_vertice->down_box(FL_DOWN_BOX);
          display_vertice->callback((Fl_Callback*)cb_display_vertice);
        } // Fl_Check_Button* display_vertice
        { Fl_Group* o = new Fl_Group(775, 80, 260, 265);
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)174);
          { vertice_color = new Fl_Button(920, 245, 110, 40, "Change vertice color");
            vertice_color->color((Fl_Color)117);
            vertice_color->callback((Fl_Callback*)cb_vertice_color);
            vertice_color->align(Fl_Align(FL_ALIGN_WRAP));
            vertice_color->deactivate();
          } // Fl_Button* vertice_color
          { Fl_Group* o = new Fl_Group(780, 80, 250, 150);
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)174);
            { display_val_dec_vertice = new Fl_Value_Input(910, 90, 80, 25, "1 matching over");
              display_val_dec_vertice->minimum(1);
              display_val_dec_vertice->maximum(100);
              display_val_dec_vertice->step(1);
              display_val_dec_vertice->callback((Fl_Callback*)cb_display_val_dec_vertice);
              display_val_dec_vertice->deactivate();
            } // Fl_Value_Input* display_val_dec_vertice
            { display_val_result_vertice = new Fl_Value_Output(810, 130, 105, 30, " = ");
              display_val_result_vertice->color((Fl_Color)206);
              display_val_result_vertice->callback((Fl_Callback*)cb_display_val_result_vertice);
              display_val_result_vertice->deactivate();
            } // Fl_Value_Output* display_val_result_vertice
            { textmatchings = new Fl_Text_Display(920, 133, 100, 27);
              textmatchings->box(FL_NO_BOX);
              textmatchings->color((Fl_Color)174);
              textmatchings->align(Fl_Align(161));
              textmatchings->deactivate();
              Display_Text(textmatchings,"matchings.",FL_BLACK);
            } // Fl_Text_Display* textmatchings
            { ok_vertice = new Fl_Button(830, 185, 140, 30, "validate");
              ok_vertice->color((Fl_Color)119);
              ok_vertice->callback((Fl_Callback*)cb_ok_vertice);
              ok_vertice->deactivate();
            } // Fl_Button* ok_vertice
            o->end();
          } // Fl_Group* o
          { save_vertice = new Fl_Button(785, 295, 100, 40, "Save vertice");
            save_vertice->color((Fl_Color)117);
            save_vertice->callback((Fl_Callback*)cb_save_vertice);
            save_vertice->deactivate();
          } // Fl_Button* save_vertice
          { line_width = new Fl_Value_Input(850, 247, 45, 33, "width of  matching lines:");
            line_width->maximum(15);
            line_width->step(0.1);
            line_width->value(1);
            line_width->align(Fl_Align(141));
            line_width->deactivate();
          } // Fl_Value_Input* line_width
          o->end();
        } // Fl_Group* o
        { save_origin_source_vertice = new Fl_Button(775, 355, 135, 35, "Save the original source vertice");
          save_origin_source_vertice->color((Fl_Color)117);
          save_origin_source_vertice->callback((Fl_Callback*)cb_save_origin_source_vertice);
          save_origin_source_vertice->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* save_origin_source_vertice
        o->end();
      } // Fl_Group* o
      { errors_curve = new Fl_Button(765, 520, 145, 55, "Display result");
        errors_curve->color((Fl_Color)118);
        errors_curve->callback((Fl_Callback*)cb_errors_curve);
      } // Fl_Button* errors_curve
      { color_ICP = new Fl_Check_Button(750, 460, 200, 35, "Draw the distances between Source and Target");
        color_ICP->down_box(FL_DOWN_BOX);
        color_ICP->callback((Fl_Callback*)cb_color_ICP);
        color_ICP->align(Fl_Align(132|FL_ALIGN_INSIDE));
      } // Fl_Check_Button* color_ICP
      { Distance_threshold = new Fl_Value_Input(975, 481, 55, 34, "Threshold :");
        Distance_threshold->maximum(10);
        Distance_threshold->value(0.01);
        Distance_threshold->deactivate();
      } // Fl_Value_Input* Distance_threshold
      once_icp_ok->end();
    } // Fl_Group* once_icp_ok
    { data_icp = new Fl_Group(5, 5, 730, 580);
      data_icp->box(FL_EMBOSSED_BOX);
      data_icp->color((Fl_Color)165);
      { Fl_Group* o = new Fl_Group(430, 505, 295, 45);
        o->color((Fl_Color)16);
        { Fl_Group* o = new Fl_Group(450, 505, 110, 45);
          { Fl_Group* o = new Fl_Group(450, 505, 110, 45);
            { Ok_ICP = new Fl_Button(465, 505, 95, 45, "Ok");
              Ok_ICP->color(FL_YELLOW);
              Ok_ICP->selection_color((Fl_Color)93);
              Ok_ICP->callback((Fl_Callback*)cb_Ok_ICP);
            } // Fl_Button* Ok_ICP
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Cancel_ICP = new Fl_Button(595, 505, 95, 45, "Cancel");
          Cancel_ICP->color((Fl_Color)91);
          Cancel_ICP->selection_color((Fl_Color)90);
          Cancel_ICP->callback((Fl_Callback*)cb_Cancel_ICP);
        } // Fl_Button* Cancel_ICP
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(15, 185, 405, 160, "Points data ");
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)175);
        o->labelfont(1);
        { color_data = new Fl_Check_Button(30, 300, 155, 20, "to add the color data");
          color_data->down_box(FL_DOWN_BOX);
          color_data->callback((Fl_Callback*)cb_color_data);
          Fl_Group::current()->resizable(color_data);
        } // Fl_Check_Button* color_data
        { curv_data = new Fl_Check_Button(30, 230, 185, 15, "to add the curvature data (min and max)");
          curv_data->down_box(FL_DOWN_BOX);
          curv_data->value(1);
          curv_data->callback((Fl_Callback*)cb_curv_data);
        } // Fl_Check_Button* curv_data
        { weighted_normal = new Fl_Value_Slider(145, 195, 190, 20, "weight for normal:");
          weighted_normal->type(5);
          weighted_normal->color((Fl_Color)206);
          weighted_normal->value(0.5);
          weighted_normal->textsize(14);
          weighted_normal->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Value_Slider* weighted_normal
        { weighted_color = new Fl_Value_Slider(200, 315, 195, 20, "weight for colors:");
          weighted_color->type(5);
          weighted_color->color((Fl_Color)206);
          weighted_color->value(0.5);
          weighted_color->textsize(14);
          weighted_color->callback((Fl_Callback*)cb_weighted_color);
          weighted_color->align(Fl_Align(FL_ALIGN_LEFT));
          weighted_color->deactivate();
        } // Fl_Value_Slider* weighted_color
        { weighted_curvature = new Fl_Value_Slider(205, 250, 180, 20, "weight for curvature:");
          weighted_curvature->type(5);
          weighted_curvature->color((Fl_Color)206);
          weighted_curvature->value(0.5);
          weighted_curvature->textsize(14);
          weighted_curvature->callback((Fl_Callback*)cb_weighted_curvature);
          weighted_curvature->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Value_Slider* weighted_curvature
        { percentageCurv = new Fl_Value_Slider(205, 275, 180, 20, "remove curv (%):");
          percentageCurv->type(5);
          percentageCurv->color((Fl_Color)206);
          percentageCurv->textsize(14);
          percentageCurv->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Value_Slider* percentageCurv
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(15, 25, 405, 140, "Meshes");
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)175);
        o->labelfont(1);
        { icp_source_name = new Fl_Choice(85, 45, 305, 25, "Source:");
          icp_source_name->down_box(FL_BORDER_BOX);
        } // Fl_Choice* icp_source_name
        { icp_target_name = new Fl_Choice(85, 85, 305, 25, "Target:");
          icp_target_name->down_box(FL_BORDER_BOX);
        } // Fl_Choice* icp_target_name
        { reinit_s_t_list = new Fl_Button(235, 115, 170, 20, "reinit source and target list");
          reinit_s_t_list->color((Fl_Color)94);
          reinit_s_t_list->callback((Fl_Callback*)cb_reinit_s_t_list);
        } // Fl_Button* reinit_s_t_list
        o->end();
      } // Fl_Group* o
      { transformation_mode = new Fl_Group(430, 165, 295, 130, "Transformation Mode");
        transformation_mode->box(FL_ENGRAVED_BOX);
        transformation_mode->color((Fl_Color)175);
        transformation_mode->labelfont(1);
        { rigid = new Fl_Check_Button(440, 180, 64, 15, "RIGID");
          rigid->down_box(FL_DOWN_BOX);
          rigid->callback((Fl_Callback*)cb_rigid);
        } // Fl_Check_Button* rigid
        { similitude = new Fl_Check_Button(440, 200, 100, 15, "SIMILITUDE");
          similitude->down_box(FL_DOWN_BOX);
          similitude->callback((Fl_Callback*)cb_similitude);
        } // Fl_Check_Button* similitude
        { affine = new Fl_Check_Button(440, 220, 150, 15, "AFFINE (+Similitude) ");
          affine->down_box(FL_DOWN_BOX);
          affine->value(1);
          affine->callback((Fl_Callback*)cb_affine);
        } // Fl_Check_Button* affine
        { loc_affine = new Fl_Check_Button(440, 240, 265, 15, "LOCALLY AFFINE (+Affine +Similitude)");
          loc_affine->down_box(FL_DOWN_BOX);
          loc_affine->callback((Fl_Callback*)cb_loc_affine);
        } // Fl_Check_Button* loc_affine
        { step_by_step = new Fl_Check_Button(440, 265, 115, 15, "STEP BY STEP");
          step_by_step->down_box(FL_DOWN_BOX);
          step_by_step->callback((Fl_Callback*)cb_step_by_step);
        } // Fl_Check_Button* step_by_step
        transformation_mode->end();
      } // Fl_Group* transformation_mode
      { Fl_Group* o = new Fl_Group(15, 365, 400, 210, "For ICP non-deformable (Rigid, Similitude, Affine)");
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)175);
        o->labelfont(1);
        { add_landmarks = new Fl_Check_Button(30, 370, 150, 25, "to add landmarks");
          add_landmarks->down_box(FL_DOWN_BOX);
          add_landmarks->callback((Fl_Callback*)cb_add_landmarks);
        } // Fl_Check_Button* add_landmarks
        { weighted_landmark = new Fl_Value_Slider(215, 395, 160, 20, "weight for the landmarks:");
          weighted_landmark->type(5);
          weighted_landmark->color((Fl_Color)206);
          weighted_landmark->textsize(14);
          weighted_landmark->align(Fl_Align(FL_ALIGN_LEFT));
          weighted_landmark->deactivate();
        } // Fl_Value_Slider* weighted_landmark
        { Fl_Group* o = new Fl_Group(25, 425, 385, 65);
          { choose_numberLandmarksPoints = new Fl_Check_Button(30, 425, 325, 15, "to choose the number of Source vertice");
            choose_numberLandmarksPoints->down_box(FL_DOWN_BOX);
            choose_numberLandmarksPoints->callback((Fl_Callback*)cb_choose_numberLandmarksPoints);
          } // Fl_Check_Button* choose_numberLandmarksPoints
          { val_dec = new Fl_Value_Input(110, 450, 85, 30, "1 point over");
            val_dec->minimum(1);
            val_dec->maximum(100);
            val_dec->step(1);
            val_dec->callback((Fl_Callback*)cb_val_dec);
            val_dec->deactivate();
          } // Fl_Value_Input* val_dec
          { val_result = new Fl_Value_Output(215, 450, 105, 30, " = ");
            val_result->color((Fl_Color)206);
            val_result->callback((Fl_Callback*)cb_val_result);
            val_result->deactivate();
          } // Fl_Value_Output* val_result
          { textpoints = new Fl_Text_Display(325, 455, 80, 25);
            textpoints->box(FL_NO_BOX);
            textpoints->color((Fl_Color)175);
            textpoints->align(Fl_Align(33));
            textpoints->deactivate();
            Display_Text(textpoints,"points.",FL_BLACK);
          } // Fl_Text_Display* textpoints
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(30, 516, 385, 59, "For the pairs matching:");
          o->color((Fl_Color)175);
          o->labelfont(2);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { percentageOfRadius = new Fl_Value_Slider(85, 541, 265, 24, "percentage of the radius for the maximum matchings distance:");
            percentageOfRadius->type(5);
            percentageOfRadius->color((Fl_Color)206);
            percentageOfRadius->step(0.05);
            percentageOfRadius->value(0.3);
            percentageOfRadius->textsize(14);
            percentageOfRadius->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Value_Slider* percentageOfRadius
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { error_threshold = new Fl_Group(430, 403, 295, 82, "Errors threshold");
        error_threshold->box(FL_ENGRAVED_BOX);
        error_threshold->color((Fl_Color)175);
        error_threshold->labelfont(1);
        { ite_max = new Fl_Value_Input(625, 415, 40, 24, "Maximum number of iteration:");
          ite_max->maximum(1000);
          ite_max->value(20);
        } // Fl_Value_Input* ite_max
        { threshold_InPercentage = new Fl_Value_Input(630, 447, 65, 26, "Threshold of errors distances:");
          threshold_InPercentage->maximum(20);
          threshold_InPercentage->value(5);
        } // Fl_Value_Input* threshold_InPercentage
        { textpercentError = new Fl_Text_Display(695, 448, 25, 32);
          textpercentError->box(FL_NO_BOX);
          textpercentError->color((Fl_Color)175);
          textpercentError->align(Fl_Align(33));
          textpercentError->deactivate();
          Display_Text(textpercentError,"%.",FL_BLACK);
        } // Fl_Text_Display* textpercentError
        error_threshold->end();
      } // Fl_Group* error_threshold
      { parameters = new Fl_Group(430, 35, 295, 110, "Parameters");
        parameters->box(FL_ENGRAVED_BOX);
        parameters->color((Fl_Color)175);
        parameters->labelfont(1);
        { save_parameters = new Fl_Button(540, 105, 125, 25, "Save parameters");
          save_parameters->color((Fl_Color)172);
          save_parameters->callback((Fl_Callback*)cb_save_parameters);
          save_parameters->deactivate();
        } // Fl_Button* save_parameters
        { store_parameter = new Fl_Check_Button(465, 80, 125, 20, "to store parameters");
          store_parameter->down_box(FL_DOWN_BOX);
          store_parameter->callback((Fl_Callback*)cb_store_parameter);
        } // Fl_Check_Button* store_parameter
        { load_parameter = new Fl_Light_Button(465, 45, 170, 30, "Load parameters list");
          load_parameter->color((Fl_Color)172);
          load_parameter->selection_color((Fl_Color)6);
          load_parameter->callback((Fl_Callback*)cb_load_parameter);
        } // Fl_Light_Button* load_parameter
        parameters->end();
      } // Fl_Group* parameters
      { LA_transformation = new Fl_Group(430, 315, 295, 65, "For ICP deformable");
        LA_transformation->box(FL_EMBOSSED_BOX);
        LA_transformation->color((Fl_Color)175);
        LA_transformation->labelfont(1);
        { radiusLA = new Fl_Value_Input(575, 333, 55, 27, "Percentage of sphere diameter:");
          radiusLA->maximum(100);
          radiusLA->value(5);
          radiusLA->callback((Fl_Callback*)cb_radiusLA);
          radiusLA->align(Fl_Align(132));
          radiusLA->deactivate();
        } // Fl_Value_Input* radiusLA
        { textpercentRadius = new Fl_Text_Display(630, 324, 85, 46);
          textpercentRadius->box(FL_NO_BOX);
          textpercentRadius->color((Fl_Color)175);
          textpercentRadius->align(Fl_Align(161));
          textpercentRadius->deactivate();
          Display_Text(textpercentRadius,"% of source\n diameter.",FL_BLACK);
        } // Fl_Text_Display* textpercentRadius
        LA_transformation->end();
      } // Fl_Group* LA_transformation
      { Only_Matching = new Fl_Check_Button(45, 140, 370, 15, "To compute only Matching between Source and Target ");
        Only_Matching->down_box(FL_DOWN_BOX);
        Only_Matching->callback((Fl_Callback*)cb_Only_Matching);
      } // Fl_Check_Button* Only_Matching
      data_icp->end();
    } // Fl_Group* data_icp
    Registration_Window->end();
    Registration_Window->resizable(Registration_Window);
  } // Fl_Double_Window* Registration_Window
  { Errors_curv_Window = new Fl_Double_Window(832, 518, "Result");
    Errors_curv_Window->color((Fl_Color)214);
    Errors_curv_Window->user_data((void*)(this));
    { save_errors_curve = new Fl_Button(280, 435, 140, 45, "Save errors");
      save_errors_curve->color((Fl_Color)117);
      save_errors_curve->callback((Fl_Callback*)cb_save_errors_curve);
    } // Fl_Button* save_errors_curve
    { caption = new Fl_Group(15, 240, 215, 265, "Caption");
      caption->box(FL_DOWN_BOX);
      caption->color((Fl_Color)215);
      caption->labelfont(3);
      { caption_matching = new Fl_Text_Display(40, 245, 105, 35);
        caption_matching->box(FL_NO_BOX);
        caption_matching->color((Fl_Color)215);
      } // Fl_Text_Display* caption_matching
      { caption_landmarks = new Fl_Text_Display(40, 285, 105, 35);
        caption_landmarks->box(FL_NO_BOX);
        caption_landmarks->color((Fl_Color)215);
      } // Fl_Text_Display* caption_landmarks
      { caption_total = new Fl_Text_Display(40, 325, 105, 55);
        caption_total->box(FL_NO_BOX);
        caption_total->color((Fl_Color)215);
      } // Fl_Text_Display* caption_total
      { caption_textmode = new Fl_Text_Display(40, 375, 190, 120);
        caption_textmode->box(FL_NO_BOX);
        caption_textmode->color((Fl_Color)215);
      } // Fl_Text_Display* caption_textmode
      caption->end();
    } // Fl_Group* caption
    { Fl_Group* o = new Fl_Group(5, 13, 810, 208, "error distance of vertice and landmarks");
      { box_curve = new Fl_Chart(5, 14, 805, 206);
        box_curve->box(FL_FLAT_BOX);
        box_curve->color(FL_BACKGROUND2_COLOR);
        box_curve->selection_color(FL_BACKGROUND_COLOR);
        box_curve->labeltype(FL_NORMAL_LABEL);
        box_curve->labelfont(0);
        box_curve->labelsize(14);
        box_curve->labelcolor(FL_FOREGROUND_COLOR);
        box_curve->align(Fl_Align(FL_ALIGN_CENTER));
        box_curve->when(FL_WHEN_RELEASE);
        InitializeChart(box_curve,0);
      } // Fl_Chart* box_curve
      { box_curve1 = new Fl_Chart(5, 14, 805, 206);
        box_curve1->box(FL_NO_BOX);
        box_curve1->color(FL_BACKGROUND2_COLOR);
        box_curve1->selection_color(FL_BACKGROUND_COLOR);
        box_curve1->labeltype(FL_NORMAL_LABEL);
        box_curve1->labelfont(0);
        box_curve1->labelsize(14);
        box_curve1->labelcolor(FL_FOREGROUND_COLOR);
        box_curve1->align(Fl_Align(FL_ALIGN_CENTER));
        box_curve1->when(FL_WHEN_RELEASE);
        InitializeChart(box_curve1,1);
      } // Fl_Chart* box_curve1
      { box_curve2 = new Fl_Chart(5, 14, 805, 206);
        box_curve2->box(FL_NO_BOX);
        box_curve2->color(FL_BACKGROUND2_COLOR);
        box_curve2->selection_color(FL_BACKGROUND_COLOR);
        box_curve2->labeltype(FL_NORMAL_LABEL);
        box_curve2->labelfont(0);
        box_curve2->labelsize(14);
        box_curve2->labelcolor(FL_FOREGROUND_COLOR);
        box_curve2->align(Fl_Align(FL_ALIGN_CENTER));
        box_curve2->when(FL_WHEN_RELEASE);
        InitializeChart(box_curve2,2);
      } // Fl_Chart* box_curve2
      { box_axe_abs = new Fl_Chart(5, 14, 805, 207);
        box_axe_abs->box(FL_NO_BOX);
        box_axe_abs->color(FL_BACKGROUND2_COLOR);
        box_axe_abs->selection_color(FL_BACKGROUND_COLOR);
        box_axe_abs->labeltype(FL_NORMAL_LABEL);
        box_axe_abs->labelfont(0);
        box_axe_abs->labelsize(14);
        box_axe_abs->labelcolor(FL_FOREGROUND_COLOR);
        box_axe_abs->align(Fl_Align(FL_ALIGN_TOP));
        box_axe_abs->when(FL_WHEN_RELEASE);
        InitializeChart(box_axe_abs,-1);
      } // Fl_Chart* box_axe_abs
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(520, 220, 295, 220);
      { time_total = new Fl_Text_Display(525, 375, 255, 55);
        time_total->box(FL_NO_BOX);
        time_total->color((Fl_Color)214);
      } // Fl_Text_Display* time_total
      { table_time = new Fl_Browser(535, 240, 280, 115, "Time");
        table_time->labelfont(3);
        table_time->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Browser* table_time
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(200, 225, 325, 255);
      { table_error = new Fl_Browser(245, 240, 280, 180, "Error");
        table_error->labelfont(3);
        table_error->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Browser* table_error
      o->end();
    } // Fl_Group* o
    Errors_curv_Window->set_modal();
    Errors_curv_Window->end();
    Errors_curv_Window->resizable(Errors_curv_Window);
  } // Fl_Double_Window* Errors_curv_Window
  { NTWSaveWindow = new Fl_Double_Window(740, 123, "NTW save options");
    NTWSaveWindow->color((Fl_Color)215);
    NTWSaveWindow->user_data((void*)(this));
    { NTW_O_RB = new Fl_Group(12, 25, 113, 71, "Orientation labels");
      { NTW_O_0 = new Fl_Round_Button(12, 30, 64, 23, "Do not save orientations");
        NTW_O_0->type(102);
        NTW_O_0->down_box(FL_ROUND_DOWN_BOX);
        NTW_O_0->value(1);
      } // Fl_Round_Button* NTW_O_0
      { NTW_O_1 = new Fl_Round_Button(12, 48, 65, 22, "Save orientations");
        NTW_O_1->type(102);
        NTW_O_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* NTW_O_1
      NTW_O_RB->end();
    } // Fl_Group* NTW_O_RB
    { NTW_T_RB = new Fl_Group(196, 25, 155, 58, "Tag colours and legends");
      { NTW_T_0 = new Fl_Round_Button(199, 30, 102, 23, "Do not save tags");
        NTW_T_0->type(102);
        NTW_T_0->down_box(FL_ROUND_DOWN_BOX);
        NTW_T_0->value(1);
      } // Fl_Round_Button* NTW_T_0
      { NTW_T_1 = new Fl_Round_Button(199, 50, 102, 22, "Save tags");
        NTW_T_1->type(102);
        NTW_T_1->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* NTW_T_1
      NTW_T_RB->end();
    } // Fl_Group* NTW_T_RB
    { NTW_C_RB = new Fl_Group(366, 25, 193, 58, "Source and Target landmarks");
      { NTW_C_0 = new Fl_Round_Button(368, 30, 102, 24, "Always prefer .CUR over .STV format when applicable");
        NTW_C_0->type(102);
        NTW_C_0->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* NTW_C_0
      { NTW_C_1 = new Fl_Round_Button(368, 50, 102, 22, "Let ISE-MeshTools decide");
        NTW_C_1->type(102);
        NTW_C_1->down_box(FL_ROUND_DOWN_BOX);
        NTW_C_1->value(1);
      } // Fl_Round_Button* NTW_C_1
      NTW_C_RB->end();
    } // Fl_Group* NTW_C_RB
    { OkNTWSave = new Fl_Button(235, 90, 90, 25, "Save NTW");
      OkNTWSave->color((Fl_Color)175);
      OkNTWSave->selection_color((Fl_Color)214);
      OkNTWSave->callback((Fl_Callback*)cb_OkNTWSave);
    } // Fl_Button* OkNTWSave
    { CancelSaveNTW = new Fl_Button(341, 90, 60, 25, "Cancel");
      CancelSaveNTW->color((Fl_Color)174);
      CancelSaveNTW->selection_color((Fl_Color)133);
      CancelSaveNTW->callback((Fl_Callback*)cb_CancelSaveNTW);
    } // Fl_Button* CancelSaveNTW
    NTWSaveWindow->set_non_modal();
    NTWSaveWindow->end();
    NTWSaveWindow->resizable(NTWSaveWindow);
  } // Fl_Double_Window* NTWSaveWindow
}

void MeshToolsUI::show(int argc, char **argv) {
  #ifdef WIN32
  	mainWindow->icon((char*)LoadIcon(fl_display, MAKEINTRESOURCE(1)));
  #endif	
  mainWindow->show(argc, argv);
  int disp = MT->Get_mode_cam_centre_of_mass();
  Move_cam_centre_of_mass->value(disp);
  mainWindow->size_range(700,1000);
}

void MeshToolsUI::cam_show() {
  camWindow->show();
  Cam_near->value(MT->cam_getnear());
  Cam_far->value(MT->cam_getfar());
  Cam_tx->value(MT->cam_gettx());
  Cam_ty->value(MT->cam_getty());
  Cam_tz->value(MT->cam_gettz());
  Cam_az->value(MT->cam_getaz());
  Cam_el->value(MT->cam_getel());
  Cam_tw->value(MT->cam_gettw());
}

void MeshToolsUI::cam_hide() {
  camWindow->hide();
}

void MeshToolsUI::options_lc_show() {
  options_lc_update();
  
  opt_lc_Window->show();
}

void MeshToolsUI::options_lc_hide() {
  opt_lc_Window->hide();
}

void MeshToolsUI::options_lc_update() {
  Fl_Color c;
  uchar r,g,b;
  
  int sides =0;
  
  Diffuse->value(MT->GetDiffuse());
  Ambiant->value(MT->GetAmbiant());
  Specular->value(MT->GetSpecular());
  
  MT->color_getbackcolor(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Back_Color->color(c);
  Back_Color->redraw();
  MT->color_getgridcolor(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Grid_Color->color(c);
  Grid_Color->redraw();
  MT->color_getobjcolor(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Obj_Color->color(c);
  Obj_Color->redraw();
  
  
  sides = MT->Mesh_Get2SidesLightning();
  cb_enable_2sides->value(sides);
}

void MeshToolsUI::options_lm_show() {
  int landmark_type;
  int landmark_type2;
  int auto_rendering_size;
  Landmark_Size2->value(MT->Mesh_GetLandmarkSize());
  landmark_type = MT->Mesh_GetLandmarkType();
  landmark_type2=0;
  if (landmark_type==0){landmark_type2=1;}
  pt_sphere->value(landmark_type);
  pt_needle->value(landmark_type2);
  
  
  Flag_g_length->value(MT->get_g_flag_length());
  uchar r,g,b;
  Fl_Color c;
  MT->get_g_flag_color(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Flag_g_colour->color(c);
  Flag_g_colour->redraw();
  
  
  auto_rendering_size = MT->get_g_landmark_auto_rendering_size();
  auto_landmark_size->value(auto_rendering_size);
  if (auto_rendering_size ==1)
  {
  	Landmark_Size2->deactivate();
  }
  else
  {
  	Landmark_Size2->activate();
  }
  
  opt_lm_Window->show();
}

void MeshToolsUI::options_lm_hide() {
  opt_lm_Window->hide();
}

void MeshToolsUI::options_rd_show() {
  Fl_Color c;
  uchar r,g,b;
  int landmark_type;
  int landmark_type2;
  int move_cm;
  int fov_adapt;
  int move_cm2;
  int fov_adapt2;
  int auto_zoom;
  int auto_zoom2;
  int sides =0;
  int auto_delete;
  int auto_delete2;
  landmark_type2=0;
  int all=0;
  int all2=0;
  all = MT->Get_Display_All();
  if (all ==0){all2=1;}
  
  rb_show_all->value(all);
  rb_show_point_cloud->value(all2);
  Diffuse->value(MT->GetDiffuse());
  Ambiant->value(MT->GetAmbiant());
  Specular->value(MT->GetSpecular());
  
  MT->color_getbackcolor(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Back_Color->color(c);
  Back_Color->redraw();
  MT->color_getgridcolor(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Grid_Color->color(c);
  Grid_Color->redraw();
  MT->color_getobjcolor(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Obj_Color->color(c);
  Obj_Color->redraw();
  
  Landmark_Size2->value(MT->Mesh_GetLandmarkSize());
  landmark_type = MT->Mesh_GetLandmarkType();
  if (landmark_type==0){landmark_type2=1;}
  pt_sphere->value(landmark_type);
  pt_needle->value(landmark_type2);
  
  
  move_cm = MT->Mesh_GetOpeningBehaviour();
  move_cm2=0;
  if (move_cm==0){move_cm2=1;}
  rb_cm->value(move_cm);
  rb_cm2->value(move_cm2);
  
  
  fov_adapt = MT->Get_fov_adapt();
  fov_adapt2=0;
  if (fov_adapt==0){fov_adapt2=1;}
  zm_adapt->value(fov_adapt);
  zm_keep->value(fov_adapt2);
  
  
  
  auto_zoom = MT->Mesh_GetZoomBehaviour();
  auto_zoom2=0;
  if (auto_zoom==0){auto_zoom2=1;}
  rb_cam->value(auto_zoom);
  rb_cam2->value(auto_zoom2);
  
  auto_delete = MT->Mesh_GetAutoDelete();
  auto_delete2=0;
  if (auto_delete ==0){auto_delete2=1;}
  rb_delete_orig->value(auto_delete);
  rb_keep_orig->value(auto_delete2);
  
  
  
  sides = MT->Mesh_Get2SidesLightning();
  cb_enable_2sides->value(sides);
  
  opt_rd_Window->show();
}

void MeshToolsUI::options_rd_hide() {
  opt_rd_Window->hide();
}

void MeshToolsUI::options_show() {
  int move_cm;
  int move_cm2;
  
  int auto_zoom;
  int auto_zoom2;
  int auto_delete;
  int auto_delete2;
  
  move_cm = MT->Mesh_GetOpeningBehaviour();
  move_cm2=0;
  if (move_cm==0){move_cm2=1;}
  rb_cm->value(move_cm);
  rb_cm2->value(move_cm2);
  
  auto_zoom = MT->Mesh_GetZoomBehaviour();
  auto_zoom2=0;
  if (auto_zoom==0){auto_zoom2=1;}
  rb_cam->value(auto_zoom);
  rb_cam2->value(auto_zoom2);
  
  auto_delete = MT->Mesh_GetAutoDelete();
  auto_delete2=0;
  if (auto_delete ==0){auto_delete2=1;}
  rb_delete_orig->value(auto_delete);
  rb_keep_orig->value(auto_delete2);
  
  optWindow->show();
}

void MeshToolsUI::options_hide() {
  optWindow->hide();
}

void MeshToolsUI::handle(int event) {
}

void MeshToolsUI::Displaymode(int mode) {
  MT->SetDisplayMode(mode);
  MT->redraw();
}

void MeshToolsUI::mat_show() {
  float m1[16];
  float m2[16];
  std::string Name;
  
  int ok;
  matWindow->show();
  
  Name = MT->get_matrix(m1,m2);
  
  if (Name.length()>0)
  {
  	M2_00->value(m2[0]);
  	M2_01->value(m2[1]);
  	M2_02->value(m2[2]);
  	M2_03->value(m2[3]);
  	M2_10->value(m2[4]);
  	M2_11->value(m2[5]);
  	M2_12->value(m2[6]);
  	M2_13->value(m2[7]);
  	M2_20->value(m2[8]);
  	M2_21->value(m2[9]);
  	M2_22->value(m2[10]);
  	M2_23->value(m2[11]);
  	M2_30->value(m2[12]);
  	M2_31->value(m2[13]);
  	M2_32->value(m2[14]);
  	M2_33->value(m2[15]);
  
  	M1_00->value(m1[0]);
  	M1_01->value(m1[1]);
  	M1_02->value(m1[2]);
  	M1_03->value(m1[3]);
  	M1_10->value(m1[4]);
  	M1_11->value(m1[5]);
  	M1_12->value(m1[6]);
  	M1_13->value(m1[7]);
  	M1_20->value(m1[8]);
  	M1_21->value(m1[9]);
  	M1_22->value(m1[10]);
  	M1_23->value(m1[11]);
  	M1_30->value(m1[12]);
  	M1_31->value(m1[13]);
  	M1_32->value(m1[14]);
  	M1_33->value(m1[15]);
  }
  //MyName->insert_position(0);
  //MyName->insert(Name);
  //MyName->buffer(Name);
  MyName->value(Name.c_str());
}

void MeshToolsUI::mat_hide() {
  matWindow->hide();
}

void MeshToolsUI::version_show() {
  versionWindow->show();
  //Version->value(MT->GetVersion());
  //Version->insert_position(1);
  //Version->insert("Rourou");
  Version->value(MT->GetVersion());
}

void MeshToolsUI::version_hide() {
  versionWindow->hide();
}

void MeshToolsUI::smooth_show() {
  smoothWindow->show();
}

void MeshToolsUI::smooth_hide() {
  smoothWindow->hide();
}

void MeshToolsUI::blend_show() {
  blendWindow->show();
  Alpha_value->value(MT->Get_Blend());
}

void MeshToolsUI::blend_hide() {
  blendWindow->hide();
}

void MeshToolsUI::grid_size_show() {
  gridsizeWindow->show();
  grid_size_value->value(MT->Get_Grid_Size());
}

void MeshToolsUI::grid_size_hide() {
  gridsizeWindow->hide();
}

void MeshToolsUI::zoomScaleWindow_show() {
  zoomScaleWindow->show();
  TF100pixels_in_mm_value->value(MT->Get_100pixels_in_mm());
}

void MeshToolsUI::zoomScaleWindow_hide() {
  zoomScaleWindow->hide();
}

void MeshToolsUI::curv_show() {
  curvWindow->show();
}

void MeshToolsUI::curv_hide() {
  curvWindow->hide();
}

void MeshToolsUI::delete_show() {
  deleteWindow->show();
}

void MeshToolsUI::delete_hide() {
  deleteWindow->hide();
}

void MeshToolsUI::def_show() {
  defWindow->show();
}

void MeshToolsUI::def_hide() {
  defWindow->hide();
}

void MeshToolsUI::lmcur_show() {
  LMcurveWindow->show();
}

void MeshToolsUI::lmcur_hide() {
  LMcurveWindow->hide();
}

void MeshToolsUI::delete2_show() {
  deleteWindow2->show();
}

void MeshToolsUI::delete2_hide() {
  deleteWindow2->hide();
}

void MeshToolsUI::movehandles_show() {
  movehandlesWindow->show();
}

void MeshToolsUI::movehandles_hide() {
  movehandlesWindow->hide();
}

void MeshToolsUI::stl_show() {
  STLSaveWindow->show();
}

void MeshToolsUI::stl_hide() {
  STLSaveWindow->hide();
}

void MeshToolsUI::vtk_show() {
  VTKSaveWindow->show();
}

void MeshToolsUI::vtk_hide() {
  VTKSaveWindow->hide();
}

void MeshToolsUI::obj_show() {
  OBJSaveWindow->show();
}

void MeshToolsUI::obj_hide() {
  OBJSaveWindow->hide();
}

void MeshToolsUI::ply_show() {
  PLYSaveWindow->show();
}

void MeshToolsUI::ply_hide() {
  PLYSaveWindow->hide();
}

void MeshToolsUI::decimate_show() {
  decimateWindow->show();
}

void MeshToolsUI::decimate_hide() {
  decimateWindow->hide();
}

void MeshToolsUI::lmk_show() {
  LMKSaveNormal->show();
}

void MeshToolsUI::lmk_hide() {
  LMKSaveNormal->hide();
}

void MeshToolsUI::lmk_show2() {
  LMKSaveTarget->show();
}

void MeshToolsUI::lmk_hide2() {
  LMKSaveTarget->hide();
}

void MeshToolsUI::thickness_show() {
  thicknessWindow->show();
}

void MeshToolsUI::thickness_hide() {
  thicknessWindow->hide();
}

void MeshToolsUI::sc_show() {
  scWindow->show();
  std::vector<std::string> scalar_list= MT->Get_Scalar_List();
  sc_active->clear();
  int active_scalar = MT->Get_Active_Scalar();
  /*for(int t=0;t<scalar_list.size();t++){
  	sc_active->add(scalar_list.at(t).c_str());
  
       }*/
       
  sc_active->add("Depth");
  sc_active->add("Maximum_Curvature");
  sc_active->add("Minimum_Curvature");
  sc_active->add("Gauss_Curvature");
  sc_active->add("Mean_Curvature");
  //sc_active->add("Tags");
  sc_active->add("Thickness");
  
  
  
  if (active_scalar>=0)
  {
  	sc_active->value(active_scalar);
  }
  	// 0 => depth
  	// 1 =>	"Maximum_Curvature"
  	// 2 => "Minimum_Curvature"
  	// 3 => "Gauss_Curvature"
  	// 4 => "Mean_Curvature"
  	// 5 => "Thickness"
  
  
  sc_cs->clear();
  int color_scale_id = MT->GetColorScaleId();  
  sc_cs->add("Rainbow");
  //sc_cs->add("Tags");
  sc_cs->add("Red and Yellow");
  
  if (color_scale_id>=0)
  {
  	sc_cs->value(color_scale_id);
  }
  
  //if (color_scale_id !=1)
  //{
  scmin->value(MT->Get_sc_min());
  scmax->value(MT->Get_sc_max());
  Max->value(MT->Get_sc_max());
  Min->value(MT->Get_sc_min());
  Max_sc->value(MT->scalars_get_max());
  Min_sc->value(MT->scalars_get_min());
  //}
  /*else
  {
  scmin->value(0);
  scmax->value(24);
  Max->value(0);
  Min->value(24);
  Max_sc->value(0);
  Min_sc->value(24);
  
  }*/
  sc_update();
}

void MeshToolsUI::sc_hide() {
  scWindow->hide();
}

void MeshToolsUI::sc_update() {
  int color_scale_id = MT->GetColorScaleId();  
  //if (color_scale_id !=1)
  //{
  	scmin->maximum ((MT->Get_sc_max()+MT->Get_sc_min())/2);
  	scmin->minimum ((3*MT->Get_sc_min()-MT->Get_sc_max())/2);
  	scmax->minimum ((MT->Get_sc_max()+MT->Get_sc_min())/2);
  	scmax->maximum ((3*MT->Get_sc_max()-MT->Get_sc_min())/2);
  	Max->value (MT->Get_sc_max());
  	Min->value (MT->Get_sc_min());
  	scmax->redraw();
  	scmin->redraw();
  //}
}

void MeshToolsUI::sc_update2() {
  Max_sc->value(MT->scalars_get_max());
  Min_sc->value(MT->scalars_get_min());
}

void MeshToolsUI::tags_show() {
  tags_update();
  
  tagsWindow->show();
}

void MeshToolsUI::tags_update() {
  uchar r,g,b;
  Fl_Color c;
  MT->get_tag_color(0,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_00->color(c);
  Tag_00->redraw();
  Tag_text_00->value(MT->get_tag_label(0).c_str());
  
  MT->get_tag_color(1,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_01->color(c);
  Tag_01->redraw();
  Tag_text_01->value(MT->get_tag_label(1).c_str());
  
  MT->get_tag_color(2,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_02->color(c);
  Tag_02->redraw();
  Tag_text_02->value(MT->get_tag_label(2).c_str());
  
  MT->get_tag_color(3,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_03->color(c);
  Tag_03->redraw();
  Tag_text_03->value(MT->get_tag_label(3).c_str());
  
  MT->get_tag_color(4,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_04->color(c);
  Tag_04->redraw();
  Tag_text_04->value(MT->get_tag_label(4).c_str());
  
  MT->get_tag_color(5,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_05->color(c);
  Tag_05->redraw();
  Tag_text_05->value(MT->get_tag_label(5).c_str());
  
  MT->get_tag_color(6,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_06->color(c);
  Tag_06->redraw();
  Tag_text_06->value(MT->get_tag_label(6).c_str());
  
  MT->get_tag_color(7,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_07->color(c);
  Tag_07->redraw();
  Tag_text_07->value(MT->get_tag_label(7).c_str());
  
  MT->get_tag_color(8,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_08->color(c);
  Tag_08->redraw();
  Tag_text_08->value(MT->get_tag_label(8).c_str());
  
  MT->get_tag_color(9,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_09->color(c);
  Tag_09->redraw();
  Tag_text_09->value(MT->get_tag_label(9).c_str());
  
  MT->get_tag_color(10,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_10->color(c);
  Tag_10->redraw();
  Tag_text_10->value(MT->get_tag_label(10).c_str());
  
  MT->get_tag_color(11,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_11->color(c);
  Tag_11->redraw();
  Tag_text_11->value(MT->get_tag_label(11).c_str());
  
  MT->get_tag_color(12,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_12->color(c);
  Tag_12->redraw();
  Tag_text_12->value(MT->get_tag_label(12).c_str());
  
  MT->get_tag_color(13,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_13->color(c);
  Tag_13->redraw();
  Tag_text_13->value(MT->get_tag_label(13).c_str());
  
  
  MT->get_tag_color(14,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_14->color(c);
  Tag_14->redraw();
  Tag_text_14->value(MT->get_tag_label(14).c_str());
  
  MT->get_tag_color(15,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_15->color(c);
  Tag_15->redraw();
  Tag_text_15->value(MT->get_tag_label(15).c_str());
  
  MT->get_tag_color(16,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_16->color(c);
  Tag_16->redraw();
  Tag_text_16->value(MT->get_tag_label(16).c_str());
  
  MT->get_tag_color(17,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_17->color(c);
  Tag_17->redraw();
  Tag_text_17->value(MT->get_tag_label(17).c_str());
  
  MT->get_tag_color(18,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_18->color(c);
  Tag_18->redraw();
  Tag_text_18->value(MT->get_tag_label(18).c_str());
  
  MT->get_tag_color(19,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_19->color(c);
  Tag_19->redraw();
  Tag_text_19->value(MT->get_tag_label(19).c_str());
  
  MT->get_tag_color(20,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_20->color(c);
  Tag_20->redraw();
  Tag_text_20->value(MT->get_tag_label(20).c_str());
  
  MT->get_tag_color(21,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_21->color(c);
  Tag_21->redraw();
  Tag_text_21->value(MT->get_tag_label(21).c_str());
  
  MT->get_tag_color(22,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_22->color(c);
  Tag_22->redraw();
  Tag_text_22->value(MT->get_tag_label(22).c_str());
  
  MT->get_tag_color(23,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_23->color(c);
  Tag_23->redraw();
  Tag_text_23->value(MT->get_tag_label(23).c_str());
  
  MT->get_tag_color(24,&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Tag_24->color(c);
  Tag_24->redraw();
  Tag_text_24->value(MT->get_tag_label(24).c_str());
  
  rb_tag00->value(0);
  rb_tag01->value(0);
  rb_tag02->value(0);
  rb_tag03->value(0);
  rb_tag04->value(0);
  rb_tag05->value(0);
  rb_tag06->value(0);
  rb_tag07->value(0);
  rb_tag08->value(0);
  rb_tag09->value(0);
  rb_tag10->value(0);
  rb_tag11->value(0);
  rb_tag12->value(0);
  rb_tag13->value(0);
  rb_tag14->value(0);
  rb_tag15->value(0);
  rb_tag16->value(0);
  rb_tag17->value(0);
  rb_tag18->value(0);
  rb_tag19->value(0);
  rb_tag20->value(0);
  rb_tag21->value(0);
  rb_tag22->value(0);
  rb_tag23->value(0);
  rb_tag24->value(0);
  
  int active_tag = MT->Get_Active_Tag();
  if (active_tag ==0)
  {rb_tag00->value(1);}
  else if (active_tag ==1)
  {rb_tag01->value(1);}
  else if (active_tag ==2)
  {rb_tag02->value(1);}
  else if (active_tag ==3)
  {rb_tag03->value(1);}
  else if (active_tag ==4)
  {rb_tag04->value(1);}
  else if (active_tag ==5)
  {rb_tag05->value(1);}
  else if (active_tag ==6)
  {rb_tag06->value(1);}
  else if (active_tag ==7)
  {rb_tag07->value(1);}
  else if (active_tag ==8)
  {rb_tag08->value(1);}
  else if (active_tag ==9)
  {rb_tag09->value(1);}
  else if (active_tag ==10)
  {rb_tag10->value(1);}
  else if (active_tag ==11)
  {rb_tag11->value(1);}
  else if (active_tag ==12)
  {rb_tag12->value(1);}
  else if (active_tag ==13)
  {rb_tag13->value(1);}
  else if (active_tag ==14)
  {rb_tag14->value(1);}
  else if (active_tag ==15)
  {rb_tag15->value(1);}
  else if (active_tag ==16)
  {rb_tag16->value(1);}
  else if (active_tag ==17)
  {rb_tag17->value(1);}
  else if (active_tag ==18)
  {rb_tag18->value(1);}
  else if (active_tag ==19)
  {rb_tag19->value(1);}
  else if (active_tag ==20)
  {rb_tag20->value(1);}
  else if (active_tag ==21)
  {rb_tag21->value(1);}
  else if (active_tag ==22)
  {rb_tag22->value(1);}
  else if (active_tag ==23)
  {rb_tag23->value(1);}
  else if (active_tag ==24)
  {rb_tag24->value(1);}
   
  
  Alpha_00->value(MT->get_tag_alpha(0));
  Alpha_01->value(MT->get_tag_alpha(1));
  Alpha_02->value(MT->get_tag_alpha(2));
  Alpha_03->value(MT->get_tag_alpha(3));
  Alpha_04->value(MT->get_tag_alpha(4));
  Alpha_05->value(MT->get_tag_alpha(5));
  Alpha_06->value(MT->get_tag_alpha(6));
  Alpha_07->value(MT->get_tag_alpha(7));
  Alpha_08->value(MT->get_tag_alpha(8));
  Alpha_09->value(MT->get_tag_alpha(9));
  Alpha_10->value(MT->get_tag_alpha(10));
  Alpha_11->value(MT->get_tag_alpha(11));
  Alpha_12->value(MT->get_tag_alpha(12));
  Alpha_13->value(MT->get_tag_alpha(13));
  Alpha_14->value(MT->get_tag_alpha(14));
  Alpha_15->value(MT->get_tag_alpha(15));
  Alpha_16->value(MT->get_tag_alpha(16));
  Alpha_17->value(MT->get_tag_alpha(17));
  Alpha_18->value(MT->get_tag_alpha(18));
  Alpha_19->value(MT->get_tag_alpha(19));
  Alpha_20->value(MT->get_tag_alpha(20));
  Alpha_21->value(MT->get_tag_alpha(21));
  Alpha_22->value(MT->get_tag_alpha(22));
  Alpha_23->value(MT->get_tag_alpha(23));
  Alpha_24->value(MT->get_tag_alpha(24));
}

void MeshToolsUI::tags_hide() {
  tagsWindow->hide();
}

void MeshToolsUI::mergetags_show() {
  merge_source->clear();
  
  merge_source->add("Tag 00");
  merge_source->add("Tag 01");
  merge_source->add("Tag 02");
  merge_source->add("Tag 03");
  merge_source->add("Tag 04");
  merge_source->add("Tag 05");
  merge_source->add("Tag 06");
  merge_source->add("Tag 07");
  merge_source->add("Tag 08");
  merge_source->add("Tag 09");
  
  merge_source->add("Tag 10");
  merge_source->add("Tag 11");
  merge_source->add("Tag 12");
  merge_source->add("Tag 13");
  merge_source->add("Tag 14");
  merge_source->add("Tag 15");
  merge_source->add("Tag 16");
  merge_source->add("Tag 17");
  merge_source->add("Tag 18");
  merge_source->add("Tag 19");
  
  merge_source->add("Tag 20");
  merge_source->add("Tag 21");
  merge_source->add("Tag 22");
  merge_source->add("Tag 23");
  merge_source->add("Tag 24");
  
  
  merge_target->clear();
  
  merge_target->add("Tag 00");
  merge_target->add("Tag 01");
  merge_target->add("Tag 02");
  merge_target->add("Tag 03");
  merge_target->add("Tag 04");
  merge_target->add("Tag 05");
  merge_target->add("Tag 06");
  merge_target->add("Tag 07");
  merge_target->add("Tag 08");
  merge_target->add("Tag 09");
  
  merge_target->add("Tag 10");
  merge_target->add("Tag 11");
  merge_target->add("Tag 12");
  merge_target->add("Tag 13");
  merge_target->add("Tag 14");
  merge_target->add("Tag 15");
  merge_target->add("Tag 16");
  merge_target->add("Tag 17");
  merge_target->add("Tag 18");
  merge_target->add("Tag 19");
  
  merge_target->add("Tag 20");
  merge_target->add("Tag 21");
  merge_target->add("Tag 22");
  merge_target->add("Tag 23");
  merge_target->add("Tag 24");
  
  mergetagsWindow->show();
}

void MeshToolsUI::mergetags_hide() {
  mergetagsWindow->hide();
}

void MeshToolsUI::extractregion_show() {
  extractregionWindow->show();
}

void MeshToolsUI::extractregion_hide() {
  extractregionWindow->hide();
}

void MeshToolsUI::extractrange_show() {
  sc_active2->clear();
  int active_scalar = MT->Get_Active_Scalar();
  /*for(int t=0;t<scalar_list.size();t++){
  	sc_active->add(scalar_list.at(t).c_str());
  
       }*/
       
  sc_active2->add("Depth");
  sc_active2->add("Maximum_Curvature");
  sc_active2->add("Minimum_Curvature");
  sc_active2->add("Gauss_Curvature");
  sc_active2->add("Mean_Curvature");
  sc_active2->add("Thickness");
  
  extractrangeWindow->show();
}

void MeshToolsUI::extractrange_hide() {
  extractrangeWindow->hide();
}

void MeshToolsUI::extractallregions_show() {
  extractallregionsWindow->show();
}

void MeshToolsUI::extractallregions_hide() {
  extractallregionsWindow->hide();
}

void MeshToolsUI::decompose_show() {
  decomposeWindow->show();
}

void MeshToolsUI::decompose_hide() {
  decomposeWindow->hide();
}

void MeshToolsUI::deleteregion_show() {
  deleteregionWindow->show();
}

void MeshToolsUI::deleteregion_hide() {
  deleteregionWindow->hide();
}

void MeshToolsUI::flag_show() {
  flagWindow->show();
  flag_update();
  /*label = MT->get_flag();
  Flag_Label->value(label.c_str());
  Flag_Length->value(MT->get_flag_length());
  uchar r,g,b;
  Fl_Color c;
  MT->get_flag_color(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Flag_Colour->color(c);
  Flag_Colour->redraw();*/
}

void MeshToolsUI::flag_hide() {
  flagWindow->hide();
}

void MeshToolsUI::flag_update() {
  std::string label ="Flag";
  label = MT->get_flag();
  Flag_Label->value(label.c_str());
  Flag_Length->value(MT->get_flag_length());
  uchar r,g,b;
  Fl_Color c;
  MT->get_flag_color(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  Flag_Colour->color(c);
  Flag_Colour->redraw();
}

void MeshToolsUI::thickness2_show() {
  std::vector<std::string> name_list= MT->Get_Selected_Names_List();
  th_source->clear();
  th_target->clear();
  
  for(int n=0;n<name_list.size();n++)
  {
  	th_source->add(name_list.at(n).c_str());
  	th_target->add(name_list.at(n).c_str());
  }
  thicknessWindow2->show();
}

void MeshToolsUI::thickness2_hide() {
  thicknessWindow2->hide();
}

void MeshToolsUI::fillholes_show() {
  fillholesWindow->show();
}

void MeshToolsUI::fillholes_hide() {
  fillholesWindow->hide();
}

void MeshToolsUI::fillholes2_show(int tag_id) {
  fillholesWindow2->show();
  HOLES2_tagid->value(tag_id);
}

void MeshToolsUI::fillholes2_hide() {
  fillholesWindow2->hide();
}

void MeshToolsUI::densify_show() {
  densifyWindow->show();
}

void MeshToolsUI::densify_hide() {
  densifyWindow->hide();
}

void MeshToolsUI::name_show() {
  float m1[16];
  float m2[16];
  
  std::string label ="Name";
  nameWindow->show();
  label = MT->get_flag();
  
  
  label = MT->get_matrix(m1,m2);
  
  Name_Label->value(label.c_str());
}

void MeshToolsUI::name_hide() {
  nameWindow->hide();
}

void MeshToolsUI::all_flag_show() {
  allflagWindow->show();
  
  All_Flag_Length->value(MT->get_g_flag_length());
  uchar r,g,b;
  Fl_Color c;
  MT->get_g_flag_color(&r,&g,&b);
  c = fl_rgb_color(r,g,b);
  All_Flag_Colour->color(c);
  All_Flag_Colour->redraw();
}

void MeshToolsUI::all_flag_hide() {
  allflagWindow->hide();
}

void MeshToolsUI::tags_convert_show() {
  tags_convert_Window->show();
}

void MeshToolsUI::tags_convert_hide() {
  tags_convert_Window->hide();
}

void MeshToolsUI::view_hide_show() {
  view_hide_refresh();
  ViewHideObjectsWindow->show();
}

void MeshToolsUI::view_hide_hide() {
  ViewHideObjectsWindow->hide();
}

void MeshToolsUI::view_hide_refresh() {
  // get first object...
  
  std::vector<std::string> object_names;
  std::vector<int> object_view_values;
  MT->get_object_names_and_view_values(object_names,object_view_values);
  
  
  // clear Check_browser
  Check_browser->clear();
  
  // populate
  for(int i = 0; i < object_names.size(); i++) {
        Check_browser->add (object_names[i].c_str(),object_view_values[i]);    
  }
}

void MeshToolsUI::view_hide_ok() {
  // construc new values vector
  
  std::vector<int> object_new_view_values;
  int num_lines = Check_browser->nitems();
  for (int i=1; i<=num_lines;i++)
  {
  	object_new_view_values.push_back(Check_browser->checked(i));
  }
  // Inform MT object
  MT->set_object_view_values(object_new_view_values);
  object_new_view_values.clear();
  MT->redraw();
}

void MeshToolsUI::orientation_show() {
  orientationWindow->show();
  orientation_update();
}

void MeshToolsUI::orientation_hide() {
  orientationWindow->hide();
}

void MeshToolsUI::orientation_update() {
  std::string z1 ="z+";
  std::string z2 ="z-";
  std::string y1 ="y+";
  std::string y2 ="y-";
  std::string x1 ="x+";
  std::string x2 ="x-";
  MT->get_orientation_labels(z1,z2,y1,y2,x1,x2);
  
  z_plus_l->value(z1.c_str());
  z_minus_l->value(z2.c_str());
  y_plus_l->value(y1.c_str());
  y_minus_l->value(y2.c_str());
  x_plus_l->value(x1.c_str());
  x_minus_l->value(x2.c_str());
}

void MeshToolsUI::lmkselect_show() {
  lmkselectWindow->show();
}

void MeshToolsUI::lmkselect_hide() {
  lmkselectWindow->hide();
}

void MeshToolsUI::lmkrangeselect_hide() {
  lmkrangeselectWindow->hide();
}

void MeshToolsUI::lmkrangeselect_show() {
  lmkrangeselectWindow->show();
}

void MeshToolsUI::registration_ICP_hide() {
  Registration_Window->hide();
}

void MeshToolsUI::registration_ICP_show() {
  if(MT->bool_ICP){
  	icp_source_name->clear();
  	icp_target_name->clear();
  	icp_source_name->add(MT->registration->Source->name.c_str());
  	icp_target_name->add(MT->registration->Target->name.c_str());
  	icp_source_name->value(1);
  	icp_target_name->value(1);
  }else{
  	std::vector<std::string> name_list= MT->Get_Selected_Names_List();
  	icp_source_name->clear();
  	icp_target_name->clear();
  
  	for(int n=0;n<name_list.size();n++)
  	{
  		icp_source_name->add(name_list.at(n).c_str());
  		icp_target_name->add(name_list.at(n).c_str());
  	}
  }
  Registration_Window->show();
}

void MeshToolsUI::errors_curve_ICP_hide() {
  Errors_curv_Window->hide();
}

void MeshToolsUI::errors_curv_ICP_show() {
  Errors_curv_Window->show();
  InitializeChart(box_curve,0);
  InitializeChart(box_curve1,1);
  InitializeChart(box_curve2,2);
  InitializeChart(box_axe_abs,-1);
  Display_Text(caption_matching,"vertice",FL_RED);
  Display_Text(caption_landmarks,"landmarks",FL_GREEN);
  Display_Text(caption_total,"vertice\n+landmarks",FL_BLUE);
  const char*text_mode="(Rl) : Rigid Landmarks\n(Rv) : Rigid Vertice\n(Sl) : Similitude Landmarks\n(Sv) : Similitude Vertice\n(A) : Affine\n(LA) : Locally Affine";
  Display_Text(caption_textmode,text_mode,FL_BLACK);
  
  Initialize_time_Table(table_time);
  Initialize_error_Table(table_error);
}

void MeshToolsUI::InitializeChart(Fl_Chart * chart,int ind) {
  chart->clear();
  float height=125.0;
  if(ind!=-1)
  	chart->bounds(-10,height); 
  else
  	chart->bounds(0, height); 
  chart->type(FL_LINE_CHART);
  
  if(MT->bool_ICP==true){
  vtkSmartPointer<vtkFloatArray> tab =vtkSmartPointer<vtkFloatArray>::New();
  tab->SetNumberOfComponents(5);
  tab->DeepCopy(MT->GetErrors_ICP());
   int size =tab->GetNumberOfTuples();
  double val;
  static char val_str[20];
  char *val_mode,*val_mode_succ;
  int mode=0;
  
  
  int scale=Update_Chart_scale(tab,height);
  
  for (int i=0;i<size;i++) 
  { 
  
    if(ind==-1){ //axe des abcisses avec legende
       mode=(int)tab->GetComponent(i,0);
       val_mode=select_mode_text(tab,i);
       sprintf(val_str, "%d(%s)", i,val_mode);
       val=0;
    }
    else{
      val =tab->GetComponent(i,ind+1)*scale; //valeur à tracer dans le graphique
    }
    
    //recupère les modes
    val_mode=select_mode_text(tab,i);
    val_mode_succ=select_mode_text(tab,i+1);
    if(ind == 0){// courbe des vetices
  	if(strcmp(val_mode,val_mode_succ)==0 || (strcmp(val_mode,"Sv")==0 && strcmp(val_mode_succ,"A")==0) || (strcmp(val_mode,"A")==0 && strcmp(val_mode_succ,"LA")==0)) {
  		chart->add(val,0,FL_RED);
  	}
  	else{
  		chart->add(val,0,FL_WHITE);
  	}
    }
     else{// courbe des landmark et des landmark+vertice
     
     	if(ind!=-1 && ( strcmp(val_mode,"A")==0 || strcmp(val_mode,"LA")==0 )&&  strcmp(val_mode_succ,"LA")==0 ){
     		 chart->add(val,0,FL_WHITE); 
     	}
     	else{
  	  chart->add(val, (ind==-1)? val_str:0,(ind==1)? FL_GREEN :(ind==2) ? FL_BLUE:0); 
  	 }
  
    }
   }
  }
}

void MeshToolsUI::Display_Text(Fl_Text_Display *caption,const char* str,Fl_Color n) {
  Fl_Text_Buffer *buff = new Fl_Text_Buffer();
  caption->buffer(buff);// attach text buffer to display widget
  caption->textcolor(n);
  buff->text(str);   // add some text to buffer
}

void MeshToolsUI::Initialize_time_Table(Fl_Browser *table) {
  table->clear();
  std::ostringstream sTotaltime;
  std::ostringstream sTotalIte;
  std::string varTimeSum ="0";
  std::string varIteSum ="0";
  string sentence="";
  const char* text;
  
  if(MT->bool_ICP == true){
    	vtkSmartPointer<vtkFloatArray> time_array= vtkSmartPointer<vtkFloatArray>::New();
    	time_array->SetNumberOfComponents(4);
    	time_array->DeepCopy(MT->registration->time);
      	static int widths[] = { 150, 70, 50};  // widths for each column
    	table->column_widths(widths); // assign array to widget
    	table->column_char('\t');     // use tab as the column character
    	table->add("MODE\tTIME\tNB_OF_ITE");
    	int mode_icp=0;
  	int cpt_mode=0;
  	float sumOftimes=0,sumOfIteration=0;
    	for(int i=0;i<time_array->GetNumberOfTuples();i++){
    		mode_icp=time_array->GetComponent(i, 0);
    		cpt_mode = time_array->GetComponent(i, 3);
    		//nom du mode
    		if(mode_icp == 6 ){
    			if(cpt_mode==0){
    				sentence ="Rigid Landmarks";
    			}else if (cpt_mode == 1){
    				sentence ="Rigid Vertice";
    			}
  		}
    		if(mode_icp == 7 ){
    			if(cpt_mode==0){
    				sentence ="Similitude Landmarks";
    			}else if (cpt_mode == 1){
    				sentence ="Similitude Vertice";
    			}
    		}	
    		if(mode_icp == 12 )		
    			sentence = "Affine";
    		else if(mode_icp==20)	
    			sentence = "Locally affine";
    	
    		// somme d'itération et du temps
    		sumOftimes+= time_array->GetComponent(i, 1);
    		sumOfIteration+= time_array->GetComponent(i, 2);
  
  		std::ostringstream sstream1;
  		sstream1 << time_array->GetComponent(i, 1);
  		std::string vartime = sstream1.str();
  		std::ostringstream sstream2;
  		sstream2 << time_array->GetComponent(i, 2);
  		std::string varnbIte = sstream2.str();
  		sentence += "\t" + vartime + "\t" + varnbIte;
  		text = sentence.c_str();
  		
    		table->add(text);// ajout la ligne dans le tableau
  		sentence = "";
  	}
  	// affichage des sommes totales (itération et temps)
  	sTotaltime << sumOftimes ;
  	varTimeSum = sTotaltime.str();
  	sTotalIte << sumOfIteration;
  	varIteSum = sTotalIte.str();
  	sentence ="Total::\n\tTimes : "+varTimeSum+" sec\n\tIterations : "+varIteSum;
  	text=sentence.c_str();
  	Display_Text(time_total,text,FL_BLACK);
   }
   sentence ="Total::\n\tTimes : "+varTimeSum+" sec\n\tIterations : "+varIteSum;
   text=sentence.c_str();
  Display_Text(time_total,text,FL_BLACK);
}

void MeshToolsUI::Initialize_error_Table(Fl_Browser *table) {
  table->clear();
  std::ostringstream sTotaltime;
  std::ostringstream sTotalIte;
  std::string varTimeSum ="0";
  std::string varIteSum ="0";
  string sentence="";
  const char* text;
  
  if(MT->bool_ICP == true){
    	vtkSmartPointer<vtkFloatArray> error_array= vtkSmartPointer<vtkFloatArray>::New();
    	error_array->SetNumberOfComponents(5);
    	error_array->DeepCopy(MT->registration->errors);
      	static int widths[] = { 150, 70, 50, 50};  // widths for each column
    	table->column_widths(widths); // assign array to widget
    	table->column_char('\t');     // use tab as the column character
    	table->add("MODE\tVERTICE\tLAND\tTOTAL");
    	int mode_icp=0;
  	int cpt_mode=0;
  	for(int i=0;i<error_array->GetNumberOfTuples();i++){
    		mode_icp=error_array->GetComponent(i, 0);
    		cpt_mode=error_array->GetComponent(i, 4);
  
    		if(mode_icp == 6 ){// RIGID
    			if(cpt_mode==0){
    				sentence ="Rigid Landmarks";	
    			}else if (cpt_mode == 1){
    				sentence ="Rigid Vertice";
    			}
    		}	
    		if(mode_icp == 7 ){// SIMILITUDE
    			if(cpt_mode==0){
    				sentence ="Similitude Landmarks";	
    			}else if (cpt_mode == 1){
    				sentence ="Similitude Vertice";
    			}
    		}	
    		if(mode_icp == 12 )		
    			sentence = "Affine";
    		else if(mode_icp==20)	
    			sentence = "Locally affine";
    	
    		for(int j=1;j<error_array->GetNumberOfComponents()-1;j++){
  			std::ostringstream sstream;
  			sstream << error_array->GetComponent(i, j);
  			std::string var = sstream.str();
  			sentence+= "\t" + var;
  		}
  		text = sentence.c_str();
    		table->add(text);
  		sentence = "";
  	}
   }
}

char * MeshToolsUI::select_mode_text(vtkSmartPointer<vtkFloatArray> tab,int i) {
  static char *val_mode;
  int mode =tab->GetComponent(i,0);
  if(mode==6){//RIGID
  	if(tab->GetComponent(i,1)!= tab->GetComponent(i,2))
  		val_mode="Rv";
  	else
  		val_mode="Rl";
  }
  
  else if(mode==7){//SIMILITUDE
  	if(tab->GetComponent(i,1)!= tab->GetComponent(i,2))
  		val_mode="Sv";
  	else
  		val_mode="Sl";
  }
  else if(mode==12){// AFFINE
  	val_mode="A";
  }
  else if(mode==20)
  	val_mode="LA";
   return val_mode;  // retourne le nom du mode
}

int MeshToolsUI::Update_Chart_scale(vtkSmartPointer<vtkFloatArray> tab,float chart_height) {
  //on cherche la valeur maximum pour ajuster les courbures dans le graphique
  int total_index=3;
  int size=tab->GetNumberOfTuples();
  float max=0;
  for(int i=0;i<size;i++){
  	if(max<tab->GetComponent(i,total_index)){
  		max=tab->GetComponent(i,total_index);	
  	}
  }
  
  return chart_height/max;
}

void MeshToolsUI::ntw_show() {
  NTWSaveWindow->show();
}

void MeshToolsUI::ntw_hide() {
  NTWSaveWindow->hide();
}
